"""All input for the `addContactToRevision` mutation."""
input AddContactToRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  contactIndex: Int!
  revisionId: Int!
}

"""The output of our `addContactToRevision` mutation."""
type AddContactToRevisionPayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Table containing information about uploaded attachments"""
type Attachment implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Original uploaded filename"""
  fileName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Unique ID for the attachment"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `Attachment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttachmentCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `file` field."""
  file: UUID

  """Checks for equality with the object’s `fileName` field."""
  fileName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input AttachmentFilter {
  """Checks for all expressions in this list."""
  and: [AttachmentFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `file` field."""
  file: UUIDFilter

  """Filter by the object’s `fileName` field."""
  fileName: StringFilter

  """Negates the expression."""
  not: AttachmentFilter

  """Checks for any expressions in this list."""
  or: [AttachmentFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `Attachment`"""
input AttachmentInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: Upload

  """Original uploaded filename"""
  fileName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `Attachment`. Fields that are set will be updated.
"""
input AttachmentPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: Upload

  """Original uploaded filename"""
  fileName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `Attachment` values."""
type AttachmentsConnection {
  """
  A list of edges which contains the `Attachment` and cursor to aid in pagination.
  """
  edges: [AttachmentsEdge!]!

  """A list of `Attachment` objects."""
  nodes: [Attachment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attachment` you could get from the connection."""
  totalCount: Int!
}

"""A `Attachment` edge in the connection."""
type AttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attachment` at the end of the edge."""
  node: Attachment
}

"""Methods to use when ordering `Attachment`."""
enum AttachmentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FILE_ASC
  FILE_DESC
  FILE_NAME_ASC
  FILE_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value."""
  equalTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """Not included in the specified list."""
  notIn: [BigFloat!]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""Table containing the different status that a change can have"""
type ChangeStatus implements Node {
  """Whether that status is active"""
  active: Boolean

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeChangeStatusAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeChangeStatusAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionChangeStatusAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionChangeStatusAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByFormChangeChangeStatusAndPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusFormChangesByFormChangeChangeStatusAndPreviousFormChangeIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeChangeStatusAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionChangeStatusAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyConnection!

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A condition to be used against `ChangeStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChangeStatusCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `triggersCommit` field."""
  triggersCommit: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ChangeStatus` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusFilter {
  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Checks for all expressions in this list."""
  and: [ChangeStatusFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `formChangesByChangeStatus` relation."""
  formChangesByChangeStatus: ChangeStatusToManyFormChangeFilter

  """Some related `formChangesByChangeStatus` exist."""
  formChangesByChangeStatusExist: Boolean

  """Negates the expression."""
  not: ChangeStatusFilter

  """Checks for any expressions in this list."""
  or: [ChangeStatusFilter!]

  """Filter by the object’s `projectRevisionsByChangeStatus` relation."""
  projectRevisionsByChangeStatus: ChangeStatusToManyProjectRevisionFilter

  """Some related `projectRevisionsByChangeStatus` exist."""
  projectRevisionsByChangeStatusExist: Boolean

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `triggersCommit` field."""
  triggersCommit: BooleanFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FormChange` values, with data from `FormChange`.
"""
type ChangeStatusFormChangesByFormChangeChangeStatusAndPreviousFormChangeIdManyToManyConnection {
  """
  A list of edges which contains the `FormChange`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusFormChangesByFormChangeChangeStatusAndPreviousFormChangeIdManyToManyEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection, with data from `FormChange`."""
type ChangeStatusFormChangesByFormChangeChangeStatusAndPreviousFormChangeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""An input for mutations affecting `ChangeStatus`"""
input ChangeStatusInput {
  """Whether that status is active"""
  active: Boolean

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ChangeStatus`. Fields that are set will be updated.
"""
input ChangeStatusPatch {
  """Whether that status is active"""
  active: Boolean

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""A connection to a list of `ChangeStatus` values."""
type ChangeStatusesConnection {
  """
  A list of edges which contains the `ChangeStatus` and cursor to aid in pagination.
  """
  edges: [ChangeStatusesEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection."""
type ChangeStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""Methods to use when ordering `ChangeStatus`."""
enum ChangeStatusesOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FORM_CHANGES_BY_CHANGE_STATUS__COUNT_ASC
  FORM_CHANGES_BY_CHANGE_STATUS__COUNT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_REVISIONS_BY_CHANGE_STATUS__COUNT_ASC
  PROJECT_REVISIONS_BY_CHANGE_STATUS__COUNT_DESC
  STATUS_ASC
  STATUS_DESC
  TRIGGERS_COMMIT_ASC
  TRIGGERS_COMMIT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about the application's users """
type CifUser implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeCreatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeUpdatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionCreatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionUpdatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerArchivedByAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerArchivedByAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCifUserIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCifUserIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCifUserIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCifUserIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCreatedByAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerUpdatedByAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByProjectContactArchivedByAndContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserContactsByProjectContactArchivedByAndContactIdManyToManyConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByProjectContactCreatedByAndContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserContactsByProjectContactCreatedByAndContactIdManyToManyConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByProjectContactUpdatedByAndContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserContactsByProjectContactUpdatedByAndContactIdManyToManyConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """User's email address"""
  emailAddress: String

  """User's last name"""
  familyName: String

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByFormChangeCreatedByAndPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFormChangesByFormChangeCreatedByAndPreviousFormChangeIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByFormChangeUpdatedByAndPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFormChangesByFormChangeUpdatedByAndPreviousFormChangeIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """Displays a cif_user as: family_name, given_name"""
  fullName: String

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectArchivedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByProjectArchivedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectCreatedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByProjectCreatedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByFundingStreamRfpArchivedByAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamsByFundingStreamRfpArchivedByAndFundingStreamIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByFundingStreamRfpCreatedByAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamsByFundingStreamRfpCreatedByAndFundingStreamIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """User's first name"""
  givenName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectArchivedByAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserOperatorsByProjectArchivedByAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectCreatedByAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectUpdatedByAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeCreatedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeUpdatedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectArchivedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByProjectArchivedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectCreatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByProjectCreatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectUpdatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByProjectUpdatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectContactArchivedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectContactArchivedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectContactCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectContactCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectContactUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectContactUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerArchivedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerArchivedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerCifUserIdAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the user"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentArchivedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentArchivedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentCreatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentUpdatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusArchivedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusArchivedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusCreatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusUpdatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserArchivedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserArchivedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactArchivedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactArchivedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactCreatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactUpdatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerArchivedByAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerArchivedByAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerArchivedByAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCifUserIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCifUserIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCifUserIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `CifUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CifUserCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""
A connection to a list of `Contact` values, with data from `ProjectContact`.
"""
type CifUserContactsByProjectContactArchivedByAndContactIdManyToManyConnection {
  """
  A list of edges which contains the `Contact`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserContactsByProjectContactArchivedByAndContactIdManyToManyEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection, with data from `ProjectContact`."""
type CifUserContactsByProjectContactArchivedByAndContactIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Contact` values, with data from `ProjectContact`.
"""
type CifUserContactsByProjectContactCreatedByAndContactIdManyToManyConnection {
  """
  A list of edges which contains the `Contact`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserContactsByProjectContactCreatedByAndContactIdManyToManyEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection, with data from `ProjectContact`."""
type CifUserContactsByProjectContactCreatedByAndContactIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Contact` values, with data from `ProjectContact`.
"""
type CifUserContactsByProjectContactUpdatedByAndContactIdManyToManyConnection {
  """
  A list of edges which contains the `Contact`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserContactsByProjectContactUpdatedByAndContactIdManyToManyEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection, with data from `ProjectContact`."""
type CifUserContactsByProjectContactUpdatedByAndContactIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A filter to be used against `CifUser` object types. All fields are combined with a logical ‘and.’
"""
input CifUserFilter {
  """Checks for all expressions in this list."""
  and: [CifUserFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `attachmentsByArchivedBy` relation."""
  attachmentsByArchivedBy: CifUserToManyAttachmentFilter

  """Some related `attachmentsByArchivedBy` exist."""
  attachmentsByArchivedByExist: Boolean

  """Filter by the object’s `attachmentsByCreatedBy` relation."""
  attachmentsByCreatedBy: CifUserToManyAttachmentFilter

  """Some related `attachmentsByCreatedBy` exist."""
  attachmentsByCreatedByExist: Boolean

  """Filter by the object’s `attachmentsByUpdatedBy` relation."""
  attachmentsByUpdatedBy: CifUserToManyAttachmentFilter

  """Some related `attachmentsByUpdatedBy` exist."""
  attachmentsByUpdatedByExist: Boolean

  """Filter by the object’s `changeStatusesByArchivedBy` relation."""
  changeStatusesByArchivedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByArchivedBy` exist."""
  changeStatusesByArchivedByExist: Boolean

  """Filter by the object’s `changeStatusesByCreatedBy` relation."""
  changeStatusesByCreatedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByCreatedBy` exist."""
  changeStatusesByCreatedByExist: Boolean

  """Filter by the object’s `changeStatusesByUpdatedBy` relation."""
  changeStatusesByUpdatedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByUpdatedBy` exist."""
  changeStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `cifUsersByArchivedBy` relation."""
  cifUsersByArchivedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByArchivedBy` exist."""
  cifUsersByArchivedByExist: Boolean

  """Filter by the object’s `cifUsersByCreatedBy` relation."""
  cifUsersByCreatedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByCreatedBy` exist."""
  cifUsersByCreatedByExist: Boolean

  """Filter by the object’s `cifUsersByUpdatedBy` relation."""
  cifUsersByUpdatedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByUpdatedBy` exist."""
  cifUsersByUpdatedByExist: Boolean

  """Filter by the object’s `contactsByArchivedBy` relation."""
  contactsByArchivedBy: CifUserToManyContactFilter

  """Some related `contactsByArchivedBy` exist."""
  contactsByArchivedByExist: Boolean

  """Filter by the object’s `contactsByCreatedBy` relation."""
  contactsByCreatedBy: CifUserToManyContactFilter

  """Some related `contactsByCreatedBy` exist."""
  contactsByCreatedByExist: Boolean

  """Filter by the object’s `contactsByUpdatedBy` relation."""
  contactsByUpdatedBy: CifUserToManyContactFilter

  """Some related `contactsByUpdatedBy` exist."""
  contactsByUpdatedByExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `formChangesByCreatedBy` relation."""
  formChangesByCreatedBy: CifUserToManyFormChangeFilter

  """Some related `formChangesByCreatedBy` exist."""
  formChangesByCreatedByExist: Boolean

  """Filter by the object’s `formChangesByUpdatedBy` relation."""
  formChangesByUpdatedBy: CifUserToManyFormChangeFilter

  """Some related `formChangesByUpdatedBy` exist."""
  formChangesByUpdatedByExist: Boolean

  """Filter by the object’s `fullName` field."""
  fullName: StringFilter

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByArchivedBy` relation.
  """
  fundingStreamRfpProjectStatusesByArchivedBy: CifUserToManyFundingStreamRfpProjectStatusFilter

  """Some related `fundingStreamRfpProjectStatusesByArchivedBy` exist."""
  fundingStreamRfpProjectStatusesByArchivedByExist: Boolean

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByCreatedBy` relation.
  """
  fundingStreamRfpProjectStatusesByCreatedBy: CifUserToManyFundingStreamRfpProjectStatusFilter

  """Some related `fundingStreamRfpProjectStatusesByCreatedBy` exist."""
  fundingStreamRfpProjectStatusesByCreatedByExist: Boolean

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByUpdatedBy` relation.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy: CifUserToManyFundingStreamRfpProjectStatusFilter

  """Some related `fundingStreamRfpProjectStatusesByUpdatedBy` exist."""
  fundingStreamRfpProjectStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `fundingStreamRfpsByArchivedBy` relation."""
  fundingStreamRfpsByArchivedBy: CifUserToManyFundingStreamRfpFilter

  """Some related `fundingStreamRfpsByArchivedBy` exist."""
  fundingStreamRfpsByArchivedByExist: Boolean

  """Filter by the object’s `fundingStreamRfpsByCreatedBy` relation."""
  fundingStreamRfpsByCreatedBy: CifUserToManyFundingStreamRfpFilter

  """Some related `fundingStreamRfpsByCreatedBy` exist."""
  fundingStreamRfpsByCreatedByExist: Boolean

  """Filter by the object’s `fundingStreamRfpsByUpdatedBy` relation."""
  fundingStreamRfpsByUpdatedBy: CifUserToManyFundingStreamRfpFilter

  """Some related `fundingStreamRfpsByUpdatedBy` exist."""
  fundingStreamRfpsByUpdatedByExist: Boolean

  """Filter by the object’s `fundingStreamsByArchivedBy` relation."""
  fundingStreamsByArchivedBy: CifUserToManyFundingStreamFilter

  """Some related `fundingStreamsByArchivedBy` exist."""
  fundingStreamsByArchivedByExist: Boolean

  """Filter by the object’s `fundingStreamsByCreatedBy` relation."""
  fundingStreamsByCreatedBy: CifUserToManyFundingStreamFilter

  """Some related `fundingStreamsByCreatedBy` exist."""
  fundingStreamsByCreatedByExist: Boolean

  """Filter by the object’s `fundingStreamsByUpdatedBy` relation."""
  fundingStreamsByUpdatedBy: CifUserToManyFundingStreamFilter

  """Some related `fundingStreamsByUpdatedBy` exist."""
  fundingStreamsByUpdatedByExist: Boolean

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `keycloakJwtsBySub` relation."""
  keycloakJwtsBySub: CifUserToManyKeycloakJwtFilter

  """Some related `keycloakJwtsBySub` exist."""
  keycloakJwtsBySubExist: Boolean

  """Negates the expression."""
  not: CifUserFilter

  """Filter by the object’s `operatorsByArchivedBy` relation."""
  operatorsByArchivedBy: CifUserToManyOperatorFilter

  """Some related `operatorsByArchivedBy` exist."""
  operatorsByArchivedByExist: Boolean

  """Filter by the object’s `operatorsByCreatedBy` relation."""
  operatorsByCreatedBy: CifUserToManyOperatorFilter

  """Some related `operatorsByCreatedBy` exist."""
  operatorsByCreatedByExist: Boolean

  """Filter by the object’s `operatorsByUpdatedBy` relation."""
  operatorsByUpdatedBy: CifUserToManyOperatorFilter

  """Some related `operatorsByUpdatedBy` exist."""
  operatorsByUpdatedByExist: Boolean

  """Checks for any expressions in this list."""
  or: [CifUserFilter!]

  """Filter by the object’s `projectContactsByArchivedBy` relation."""
  projectContactsByArchivedBy: CifUserToManyProjectContactFilter

  """Some related `projectContactsByArchivedBy` exist."""
  projectContactsByArchivedByExist: Boolean

  """Filter by the object’s `projectContactsByCreatedBy` relation."""
  projectContactsByCreatedBy: CifUserToManyProjectContactFilter

  """Some related `projectContactsByCreatedBy` exist."""
  projectContactsByCreatedByExist: Boolean

  """Filter by the object’s `projectContactsByUpdatedBy` relation."""
  projectContactsByUpdatedBy: CifUserToManyProjectContactFilter

  """Some related `projectContactsByUpdatedBy` exist."""
  projectContactsByUpdatedByExist: Boolean

  """Filter by the object’s `projectManagerLabelsByArchivedBy` relation."""
  projectManagerLabelsByArchivedBy: CifUserToManyProjectManagerLabelFilter

  """Some related `projectManagerLabelsByArchivedBy` exist."""
  projectManagerLabelsByArchivedByExist: Boolean

  """Filter by the object’s `projectManagerLabelsByCreatedBy` relation."""
  projectManagerLabelsByCreatedBy: CifUserToManyProjectManagerLabelFilter

  """Some related `projectManagerLabelsByCreatedBy` exist."""
  projectManagerLabelsByCreatedByExist: Boolean

  """Filter by the object’s `projectManagerLabelsByUpdatedBy` relation."""
  projectManagerLabelsByUpdatedBy: CifUserToManyProjectManagerLabelFilter

  """Some related `projectManagerLabelsByUpdatedBy` exist."""
  projectManagerLabelsByUpdatedByExist: Boolean

  """Filter by the object’s `projectManagersByArchivedBy` relation."""
  projectManagersByArchivedBy: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByArchivedBy` exist."""
  projectManagersByArchivedByExist: Boolean

  """Filter by the object’s `projectManagersByCifUserId` relation."""
  projectManagersByCifUserId: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByCifUserId` exist."""
  projectManagersByCifUserIdExist: Boolean

  """Filter by the object’s `projectManagersByCreatedBy` relation."""
  projectManagersByCreatedBy: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByCreatedBy` exist."""
  projectManagersByCreatedByExist: Boolean

  """Filter by the object’s `projectManagersByUpdatedBy` relation."""
  projectManagersByUpdatedBy: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByUpdatedBy` exist."""
  projectManagersByUpdatedByExist: Boolean

  """Filter by the object’s `projectRevisionsByCreatedBy` relation."""
  projectRevisionsByCreatedBy: CifUserToManyProjectRevisionFilter

  """Some related `projectRevisionsByCreatedBy` exist."""
  projectRevisionsByCreatedByExist: Boolean

  """Filter by the object’s `projectRevisionsByUpdatedBy` relation."""
  projectRevisionsByUpdatedBy: CifUserToManyProjectRevisionFilter

  """Some related `projectRevisionsByUpdatedBy` exist."""
  projectRevisionsByUpdatedByExist: Boolean

  """Filter by the object’s `projectStatusesByArchivedBy` relation."""
  projectStatusesByArchivedBy: CifUserToManyProjectStatusFilter

  """Some related `projectStatusesByArchivedBy` exist."""
  projectStatusesByArchivedByExist: Boolean

  """Filter by the object’s `projectStatusesByCreatedBy` relation."""
  projectStatusesByCreatedBy: CifUserToManyProjectStatusFilter

  """Some related `projectStatusesByCreatedBy` exist."""
  projectStatusesByCreatedByExist: Boolean

  """Filter by the object’s `projectStatusesByUpdatedBy` relation."""
  projectStatusesByUpdatedBy: CifUserToManyProjectStatusFilter

  """Some related `projectStatusesByUpdatedBy` exist."""
  projectStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `projectsByArchivedBy` relation."""
  projectsByArchivedBy: CifUserToManyProjectFilter

  """Some related `projectsByArchivedBy` exist."""
  projectsByArchivedByExist: Boolean

  """Filter by the object’s `projectsByCreatedBy` relation."""
  projectsByCreatedBy: CifUserToManyProjectFilter

  """Some related `projectsByCreatedBy` exist."""
  projectsByCreatedByExist: Boolean

  """Filter by the object’s `projectsByUpdatedBy` relation."""
  projectsByUpdatedBy: CifUserToManyProjectFilter

  """Some related `projectsByUpdatedBy` exist."""
  projectsByUpdatedByExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter
}

"""
A connection to a list of `FormChange` values, with data from `FormChange`.
"""
type CifUserFormChangesByFormChangeCreatedByAndPreviousFormChangeIdManyToManyConnection {
  """
  A list of edges which contains the `FormChange`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserFormChangesByFormChangeCreatedByAndPreviousFormChangeIdManyToManyEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection, with data from `FormChange`."""
type CifUserFormChangesByFormChangeCreatedByAndPreviousFormChangeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""
A connection to a list of `FormChange` values, with data from `FormChange`.
"""
type CifUserFormChangesByFormChangeUpdatedByAndPreviousFormChangeIdManyToManyConnection {
  """
  A list of edges which contains the `FormChange`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserFormChangesByFormChangeUpdatedByAndPreviousFormChangeIdManyToManyEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection, with data from `FormChange`."""
type CifUserFormChangesByFormChangeUpdatedByAndPreviousFormChangeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FundingStreamRfp` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FundingStreamRfp` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FundingStreamRfp` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type CifUserFundingStreamRfpsByProjectArchivedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByProjectArchivedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type CifUserFundingStreamRfpsByProjectArchivedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type CifUserFundingStreamRfpsByProjectCreatedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByProjectCreatedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type CifUserFundingStreamRfpsByProjectCreatedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type CifUserFundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type CifUserFundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `FundingStream` values, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpArchivedByAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamsByFundingStreamRfpArchivedByAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""
A `FundingStream` edge in the connection, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpArchivedByAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `FundingStream` at the end of the edge."""
  node: FundingStream
}

"""
A connection to a list of `FundingStream` values, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpCreatedByAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamsByFundingStreamRfpCreatedByAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""
A `FundingStream` edge in the connection, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpCreatedByAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `FundingStream` at the end of the edge."""
  node: FundingStream
}

"""
A connection to a list of `FundingStream` values, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""
A `FundingStream` edge in the connection, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `FundingStream` at the end of the edge."""
  node: FundingStream
}

"""An input for mutations affecting `CifUser`"""
input CifUserInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """User's email address"""
  emailAddress: String

  """User's last name"""
  familyName: String

  """User's first name"""
  givenName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type CifUserOperatorsByProjectArchivedByAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserOperatorsByProjectArchivedByAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type CifUserOperatorsByProjectArchivedByAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `CifUser`. Fields that are set will be updated.
"""
input CifUserPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """User's email address"""
  emailAddress: String

  """User's last name"""
  familyName: String

  """User's first name"""
  givenName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  uuid: UUID
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `ProjectStatus` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ProjectStatus` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ProjectStatus` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ProjectStatus` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type CifUserProjectStatusesByProjectArchivedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByProjectArchivedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type CifUserProjectStatusesByProjectArchivedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type CifUserProjectStatusesByProjectCreatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByProjectCreatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type CifUserProjectStatusesByProjectCreatedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type CifUserProjectStatusesByProjectUpdatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByProjectUpdatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type CifUserProjectStatusesByProjectUpdatedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectContact`.
"""
type CifUserProjectsByProjectContactArchivedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectContactArchivedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectContact`."""
type CifUserProjectsByProjectContactArchivedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectContact`.
"""
type CifUserProjectsByProjectContactCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectContactCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectContact`."""
type CifUserProjectsByProjectContactCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectContact`.
"""
type CifUserProjectsByProjectContactUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectContactUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectContact`."""
type CifUserProjectsByProjectContactUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerArchivedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerArchivedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerArchivedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A filter to be used against many `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyAttachmentFilter {
  """
  Every related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttachmentFilter

  """
  No related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttachmentFilter

  """
  Some related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttachmentFilter
}

"""
A filter to be used against many `ChangeStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyChangeStatusFilter {
  """
  Every related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ChangeStatusFilter

  """
  No related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ChangeStatusFilter

  """
  Some related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ChangeStatusFilter
}

"""
A filter to be used against many `CifUser` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyCifUserFilter {
  """
  Every related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CifUserFilter

  """
  No related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CifUserFilter

  """
  Some related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CifUserFilter
}

"""
A filter to be used against many `Contact` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyContactFilter {
  """
  Every related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContactFilter

  """
  No related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContactFilter

  """
  Some related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContactFilter
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""
A filter to be used against many `FundingStream` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFundingStreamFilter {
  """
  Every related `FundingStream` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamFilter

  """
  No related `FundingStream` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamFilter

  """
  Some related `FundingStream` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamFilter
}

"""
A filter to be used against many `FundingStreamRfp` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFundingStreamRfpFilter {
  """
  Every related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpFilter

  """
  No related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpFilter

  """
  Some related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpFilter
}

"""
A filter to be used against many `FundingStreamRfpProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFundingStreamRfpProjectStatusFilter {
  """
  Every related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpProjectStatusFilter

  """
  No related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpProjectStatusFilter

  """
  Some related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpProjectStatusFilter
}

"""
A filter to be used against many `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyKeycloakJwtFilter {
  """
  Every related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: KeycloakJwtFilter

  """
  No related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: KeycloakJwtFilter

  """
  Some related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: KeycloakJwtFilter
}

"""
A filter to be used against many `Operator` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyOperatorFilter {
  """
  Every related `Operator` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OperatorFilter

  """
  No related `Operator` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OperatorFilter

  """
  Some related `Operator` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OperatorFilter
}

"""
A filter to be used against many `ProjectContact` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectContactFilter {
  """
  Every related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectContactFilter

  """
  No related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectContactFilter

  """
  Some related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectContactFilter
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""
A filter to be used against many `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectManagerFilter {
  """
  Every related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerFilter

  """
  No related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerFilter

  """
  Some related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerFilter
}

"""
A filter to be used against many `ProjectManagerLabel` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectManagerLabelFilter {
  """
  Every related `ProjectManagerLabel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerLabelFilter

  """
  No related `ProjectManagerLabel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerLabelFilter

  """
  Some related `ProjectManagerLabel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerLabelFilter
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""
A filter to be used against many `ProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectStatusFilter {
  """
  Every related `ProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectStatusFilter

  """
  No related `ProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectStatusFilter

  """
  Some related `ProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectStatusFilter
}

"""A connection to a list of `CifUser` values."""
type CifUsersConnection {
  """
  A list of edges which contains the `CifUser` and cursor to aid in pagination.
  """
  edges: [CifUsersEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection."""
type CifUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""Methods to use when ordering `CifUser`."""
enum CifUsersOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ATTACHMENTS_BY_ARCHIVED_BY__COUNT_ASC
  ATTACHMENTS_BY_ARCHIVED_BY__COUNT_DESC
  ATTACHMENTS_BY_CREATED_BY__COUNT_ASC
  ATTACHMENTS_BY_CREATED_BY__COUNT_DESC
  ATTACHMENTS_BY_UPDATED_BY__COUNT_ASC
  ATTACHMENTS_BY_UPDATED_BY__COUNT_DESC
  CHANGE_STATUSES_BY_ARCHIVED_BY__COUNT_ASC
  CHANGE_STATUSES_BY_ARCHIVED_BY__COUNT_DESC
  CHANGE_STATUSES_BY_CREATED_BY__COUNT_ASC
  CHANGE_STATUSES_BY_CREATED_BY__COUNT_DESC
  CHANGE_STATUSES_BY_UPDATED_BY__COUNT_ASC
  CHANGE_STATUSES_BY_UPDATED_BY__COUNT_DESC
  CIF_USERS_BY_ARCHIVED_BY__COUNT_ASC
  CIF_USERS_BY_ARCHIVED_BY__COUNT_DESC
  CIF_USERS_BY_CREATED_BY__COUNT_ASC
  CIF_USERS_BY_CREATED_BY__COUNT_DESC
  CIF_USERS_BY_UPDATED_BY__COUNT_ASC
  CIF_USERS_BY_UPDATED_BY__COUNT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CONTACTS_BY_ARCHIVED_BY__COUNT_ASC
  CONTACTS_BY_ARCHIVED_BY__COUNT_DESC
  CONTACTS_BY_CREATED_BY__COUNT_ASC
  CONTACTS_BY_CREATED_BY__COUNT_DESC
  CONTACTS_BY_UPDATED_BY__COUNT_ASC
  CONTACTS_BY_UPDATED_BY__COUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  FORM_CHANGES_BY_CREATED_BY__COUNT_ASC
  FORM_CHANGES_BY_CREATED_BY__COUNT_DESC
  FORM_CHANGES_BY_UPDATED_BY__COUNT_ASC
  FORM_CHANGES_BY_UPDATED_BY__COUNT_DESC
  FUNDING_STREAMS_BY_ARCHIVED_BY__COUNT_ASC
  FUNDING_STREAMS_BY_ARCHIVED_BY__COUNT_DESC
  FUNDING_STREAMS_BY_CREATED_BY__COUNT_ASC
  FUNDING_STREAMS_BY_CREATED_BY__COUNT_DESC
  FUNDING_STREAMS_BY_UPDATED_BY__COUNT_ASC
  FUNDING_STREAMS_BY_UPDATED_BY__COUNT_DESC
  FUNDING_STREAM_RFPS_BY_ARCHIVED_BY__COUNT_ASC
  FUNDING_STREAM_RFPS_BY_ARCHIVED_BY__COUNT_DESC
  FUNDING_STREAM_RFPS_BY_CREATED_BY__COUNT_ASC
  FUNDING_STREAM_RFPS_BY_CREATED_BY__COUNT_DESC
  FUNDING_STREAM_RFPS_BY_UPDATED_BY__COUNT_ASC
  FUNDING_STREAM_RFPS_BY_UPDATED_BY__COUNT_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_ARCHIVED_BY__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_ARCHIVED_BY__COUNT_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_CREATED_BY__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_CREATED_BY__COUNT_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_UPDATED_BY__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_UPDATED_BY__COUNT_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  ID_ASC
  ID_DESC
  KEYCLOAK_JWTS_BY_SUB__COUNT_ASC
  KEYCLOAK_JWTS_BY_SUB__COUNT_DESC
  NATURAL
  OPERATORS_BY_ARCHIVED_BY__COUNT_ASC
  OPERATORS_BY_ARCHIVED_BY__COUNT_DESC
  OPERATORS_BY_CREATED_BY__COUNT_ASC
  OPERATORS_BY_CREATED_BY__COUNT_DESC
  OPERATORS_BY_UPDATED_BY__COUNT_ASC
  OPERATORS_BY_UPDATED_BY__COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_ARCHIVED_BY__COUNT_ASC
  PROJECTS_BY_ARCHIVED_BY__COUNT_DESC
  PROJECTS_BY_CREATED_BY__COUNT_ASC
  PROJECTS_BY_CREATED_BY__COUNT_DESC
  PROJECTS_BY_UPDATED_BY__COUNT_ASC
  PROJECTS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_CONTACTS_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_CONTACTS_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_CONTACTS_BY_CREATED_BY__COUNT_ASC
  PROJECT_CONTACTS_BY_CREATED_BY__COUNT_DESC
  PROJECT_CONTACTS_BY_UPDATED_BY__COUNT_ASC
  PROJECT_CONTACTS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_MANAGERS_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_MANAGERS_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_MANAGERS_BY_CIF_USER_ID__COUNT_ASC
  PROJECT_MANAGERS_BY_CIF_USER_ID__COUNT_DESC
  PROJECT_MANAGERS_BY_CREATED_BY__COUNT_ASC
  PROJECT_MANAGERS_BY_CREATED_BY__COUNT_DESC
  PROJECT_MANAGERS_BY_UPDATED_BY__COUNT_ASC
  PROJECT_MANAGERS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_MANAGER_LABELS_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_MANAGER_LABELS_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_MANAGER_LABELS_BY_CREATED_BY__COUNT_ASC
  PROJECT_MANAGER_LABELS_BY_CREATED_BY__COUNT_DESC
  PROJECT_MANAGER_LABELS_BY_UPDATED_BY__COUNT_ASC
  PROJECT_MANAGER_LABELS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_REVISIONS_BY_CREATED_BY__COUNT_ASC
  PROJECT_REVISIONS_BY_CREATED_BY__COUNT_DESC
  PROJECT_REVISIONS_BY_UPDATED_BY__COUNT_ASC
  PROJECT_REVISIONS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_STATUSES_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_STATUSES_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_STATUSES_BY_CREATED_BY__COUNT_ASC
  PROJECT_STATUSES_BY_CREATED_BY__COUNT_DESC
  PROJECT_STATUSES_BY_UPDATED_BY__COUNT_ASC
  PROJECT_STATUSES_BY_UPDATED_BY__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UUID_ASC
  UUID_DESC
}

"""Table containing information about a CIF contact"""
type Contact implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `Contact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Contact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Contact`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactContactIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactCifUsersByProjectContactContactIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactContactIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactCifUsersByProjectContactContactIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactContactIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactCifUsersByProjectContactContactIdAndUpdatedByManyToManyConnection!

  """Any comments about this contact"""
  comments: String

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """The email address of this contact"""
  email: String

  """The family name of this contact"""
  familyName: String

  """
  Computed column for graphql to retrieve the full formatted phone of a contact
  """
  fullName: String
  fullPhone: String

  """The given name of this contact"""
  givenName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Returns the pending form change editing the contact created by the current user, if it exists.
  """
  pendingFormChange: FormChange

  """The phone number of this contact, stored in E.164 format"""
  phone: String

  """The phone extension of this contact"""
  phoneExt: String

  """The position of this contact"""
  position: String

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectContactContactIdAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactProjectsByProjectContactContactIdAndProjectIdManyToManyConnection!

  """Unique ID for the contact"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ContactCifUsersByProjectContactContactIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ContactCifUsersByProjectContactContactIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ContactCifUsersByProjectContactContactIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ContactCifUsersByProjectContactContactIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ContactCifUsersByProjectContactContactIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ContactCifUsersByProjectContactContactIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ContactCifUsersByProjectContactContactIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ContactCifUsersByProjectContactContactIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ContactCifUsersByProjectContactContactIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A condition to be used against `Contact` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ContactCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `phoneExt` field."""
  phoneExt: String

  """Checks for equality with the object’s `position` field."""
  position: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Contact` object types. All fields are combined with a logical ‘and.’
"""
input ContactFilter {
  """Checks for all expressions in this list."""
  and: [ContactFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `comments` field."""
  comments: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `fullName` field."""
  fullName: StringFilter

  """Filter by the object’s `fullPhone` field."""
  fullPhone: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Negates the expression."""
  not: ContactFilter

  """Checks for any expressions in this list."""
  or: [ContactFilter!]

  """Filter by the object’s `phone` field."""
  phone: StringFilter

  """Filter by the object’s `phoneExt` field."""
  phoneExt: StringFilter

  """Filter by the object’s `position` field."""
  position: StringFilter

  """Filter by the object’s `projectContactsByContactId` relation."""
  projectContactsByContactId: ContactToManyProjectContactFilter

  """Some related `projectContactsByContactId` exist."""
  projectContactsByContactIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `Project` values, with data from `ProjectContact`.
"""
type ContactProjectsByProjectContactContactIdAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ContactProjectsByProjectContactContactIdAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectContact`."""
type ContactProjectsByProjectContactContactIdAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A filter to be used against many `ProjectContact` object types. All fields are combined with a logical ‘and.’
"""
input ContactToManyProjectContactFilter {
  """
  Every related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectContactFilter

  """
  No related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectContactFilter

  """
  Some related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectContactFilter
}

"""A connection to a list of `Contact` values."""
type ContactsConnection {
  """
  A list of edges which contains the `Contact` and cursor to aid in pagination.
  """
  edges: [ContactsEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection."""
type ContactsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact
}

"""Methods to use when ordering `Contact`."""
enum ContactsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  EMAIL_ASC
  EMAIL_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  FULL_NAME_ASC
  FULL_NAME_DESC
  FULL_PHONE_ASC
  FULL_PHONE_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PHONE_ASC
  PHONE_DESC
  PHONE_EXT_ASC
  PHONE_EXT_DESC
  POSITION_ASC
  POSITION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_CONTACTS_BY_CONTACT_ID__COUNT_ASC
  PROJECT_CONTACTS_BY_CONTACT_ID__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the create `Attachment` mutation."""
input CreateAttachmentInput {
  """The `Attachment` to be created by this mutation."""
  attachment: AttachmentInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Attachment` mutation."""
type CreateAttachmentPayload {
  """The `Attachment` that was created by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ChangeStatus` mutation."""
input CreateChangeStatusInput {
  """The `ChangeStatus` to be created by this mutation."""
  changeStatus: ChangeStatusInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ChangeStatus` mutation."""
type CreateChangeStatusPayload {
  """The `ChangeStatus` that was created by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CifUser` mutation."""
input CreateCifUserInput {
  """The `CifUser` to be created by this mutation."""
  cifUser: CifUserInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CifUser` mutation."""
type CreateCifUserPayload {
  """The `CifUser` that was created by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createFormChange` mutation."""
input CreateFormChangeInput {
  changeStatus: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formDataRecordId: Int
  formDataSchemaName: String!
  formDataTableName: String!
  jsonSchemaName: String!
  newFormData: JSON
  operation: FormChangeOperation!
  projectRevisionId: Int
  validationErrors: JSON
}

"""The output of our `createFormChange` mutation."""
type CreateFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FundingStream` mutation."""
input CreateFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FundingStream` to be created by this mutation."""
  fundingStream: FundingStreamInput!
}

"""The output of our create `FundingStream` mutation."""
type CreateFundingStreamPayload {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FundingStream` that was created by this mutation."""
  fundingStream: FundingStream

  """An edge for our `FundingStream`. May be used by Relay 1."""
  fundingStreamEdge(
    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FundingStreamRfp` mutation."""
input CreateFundingStreamRfpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FundingStreamRfp` to be created by this mutation."""
  fundingStreamRfp: FundingStreamRfpInput!
}

"""The output of our create `FundingStreamRfp` mutation."""
type CreateFundingStreamRfpPayload {
  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """The `FundingStreamRfp` that was created by this mutation."""
  fundingStreamRfp: FundingStreamRfp

  """An edge for our `FundingStreamRfp`. May be used by Relay 1."""
  fundingStreamRfpEdge(
    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FundingStreamRfpProjectStatus` mutation."""
input CreateFundingStreamRfpProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FundingStreamRfpProjectStatus` to be created by this mutation."""
  fundingStreamRfpProjectStatus: FundingStreamRfpProjectStatusInput!
}

"""The output of our create `FundingStreamRfpProjectStatus` mutation."""
type CreateFundingStreamRfpProjectStatusPayload {
  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FundingStreamRfp` that is related to this `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """The `FundingStreamRfpProjectStatus` that was created by this mutation."""
  fundingStreamRfpProjectStatus: FundingStreamRfpProjectStatus

  """
  An edge for our `FundingStreamRfpProjectStatus`. May be used by Relay 1.
  """
  fundingStreamRfpProjectStatusEdge(
    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesEdge

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamRfpProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ProjectContact` mutation."""
input CreateProjectContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectContact` to be created by this mutation."""
  projectContact: ProjectContactInput!
}

"""The output of our create `ProjectContact` mutation."""
type CreateProjectContactPayload {
  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Contact` that is related to this `ProjectContact`."""
  contactByContactId: Contact

  """Reads a single `Project` that is related to this `ProjectContact`."""
  projectByProjectId: Project

  """The `ProjectContact` that was created by this mutation."""
  projectContact: ProjectContact

  """An edge for our `ProjectContact`. May be used by Relay 1."""
  projectContactEdge(
    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createProject` mutation."""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the create `ProjectManager` mutation."""
input CreateProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectManager` to be created by this mutation."""
  projectManager: ProjectManagerInput!
}

"""All input for the create `ProjectManagerLabel` mutation."""
input CreateProjectManagerLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectManagerLabel` to be created by this mutation."""
  projectManagerLabel: ProjectManagerLabelInput!
}

"""The output of our create `ProjectManagerLabel` mutation."""
type CreateProjectManagerLabelPayload {
  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectManagerLabel` that was created by this mutation."""
  projectManagerLabel: ProjectManagerLabel

  """An edge for our `ProjectManagerLabel`. May be used by Relay 1."""
  projectManagerLabelEdge(
    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `ProjectManager` mutation."""
type CreateProjectManagerPayload {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """The `ProjectManager` that was created by this mutation."""
  projectManager: ProjectManager

  """An edge for our `ProjectManager`. May be used by Relay 1."""
  projectManagerEdge(
    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our `createProject` mutation."""
type CreateProjectPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createProjectRevision` mutation."""
input CreateProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
}

"""The output of our `createProjectRevision` mutation."""
type CreateProjectRevisionPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ProjectStatus` mutation."""
input CreateProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectStatus` to be created by this mutation."""
  projectStatus: ProjectStatusInput!
}

"""The output of our create `ProjectStatus` mutation."""
type CreateProjectStatusPayload {
  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectStatus` that was created by this mutation."""
  projectStatus: ProjectStatus

  """An edge for our `ProjectStatus`. May be used by Relay 1."""
  projectStatusEdge(
    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createUserFromSession` mutation."""
input CreateUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `createUserFromSession` mutation."""
type CreateUserFromSessionPayload {
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteAttachmentByRowId` mutation."""
input DeleteAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the attachment"""
  rowId: Int!
}

"""All input for the `deleteAttachment` mutation."""
input DeleteAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Attachment` mutation."""
type DeleteAttachmentPayload {
  """The `Attachment` that was deleted by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAttachmentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteChangeStatusByStatus` mutation."""
input DeleteChangeStatusByStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!
}

"""All input for the `deleteChangeStatus` mutation."""
input DeleteChangeStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ChangeStatus` mutation."""
type DeleteChangeStatusPayload {
  """The `ChangeStatus` that was deleted by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChangeStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCifUserByRowId` mutation."""
input DeleteCifUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteCifUser` mutation."""
input DeleteCifUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CifUser` mutation."""
type DeleteCifUserPayload {
  """The `CifUser` that was deleted by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCifUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFormChangeByRowId` mutation."""
input DeleteFormChangeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form_change"""
  rowId: Int!
}

"""All input for the `deleteFormChange` mutation."""
input DeleteFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormChange` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormChange` mutation."""
type DeleteFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormChangeId: ID

  """The `FormChange` that was deleted by this mutation."""
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFundingStreamByRowId` mutation."""
input DeleteFundingStreamByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the funding_stream"""
  rowId: Int!
}

"""All input for the `deleteFundingStream` mutation."""
input DeleteFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStream` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FundingStream` mutation."""
type DeleteFundingStreamPayload {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFundingStreamId: ID

  """The `FundingStream` that was deleted by this mutation."""
  fundingStream: FundingStream

  """An edge for our `FundingStream`. May be used by Relay 1."""
  fundingStreamEdge(
    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFundingStreamRfpByRowId` mutation."""
input DeleteFundingStreamRfpByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the funding_stream_rfp"""
  rowId: Int!
}

"""All input for the `deleteFundingStreamRfp` mutation."""
input DeleteFundingStreamRfpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStreamRfp` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FundingStreamRfp` mutation."""
type DeleteFundingStreamRfpPayload {
  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFundingStreamRfpId: ID

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """The `FundingStreamRfp` that was deleted by this mutation."""
  fundingStreamRfp: FundingStreamRfp

  """An edge for our `FundingStreamRfp`. May be used by Relay 1."""
  fundingStreamRfpEdge(
    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteFundingStreamRfpProjectStatusByRowId` mutation.
"""
input DeleteFundingStreamRfpProjectStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key for funding_stream_rfp_project_status table"""
  rowId: Int!
}

"""All input for the `deleteFundingStreamRfpProjectStatus` mutation."""
input DeleteFundingStreamRfpProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStreamRfpProjectStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FundingStreamRfpProjectStatus` mutation."""
type DeleteFundingStreamRfpProjectStatusPayload {
  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFundingStreamRfpProjectStatusId: ID

  """
  Reads a single `FundingStreamRfp` that is related to this `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """The `FundingStreamRfpProjectStatus` that was deleted by this mutation."""
  fundingStreamRfpProjectStatus: FundingStreamRfpProjectStatus

  """
  An edge for our `FundingStreamRfpProjectStatus`. May be used by Relay 1.
  """
  fundingStreamRfpProjectStatusEdge(
    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesEdge

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamRfpProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectContactByRowId` mutation."""
input DeleteProjectContactByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project contact record"""
  rowId: Int!
}

"""All input for the `deleteProjectContact` mutation."""
input DeleteProjectContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectContact` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectContact` mutation."""
type DeleteProjectContactPayload {
  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Contact` that is related to this `ProjectContact`."""
  contactByContactId: Contact
  deletedProjectContactId: ID

  """Reads a single `Project` that is related to this `ProjectContact`."""
  projectByProjectId: Project

  """The `ProjectContact` that was deleted by this mutation."""
  projectContact: ProjectContact

  """An edge for our `ProjectContact`. May be used by Relay 1."""
  projectContactEdge(
    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectManagerByRowId` mutation."""
input DeleteProjectManagerByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project manager record"""
  rowId: Int!
}

"""All input for the `deleteProjectManager` mutation."""
input DeleteProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManager` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteProjectManagerLabelByLabel` mutation."""
input DeleteProjectManagerLabelByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The label that project managers can be assigned to a project as"""
  label: String!
}

"""All input for the `deleteProjectManagerLabelByRowId` mutation."""
input DeleteProjectManagerLabelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project_manager_label record"""
  rowId: Int!
}

"""All input for the `deleteProjectManagerLabel` mutation."""
input DeleteProjectManagerLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManagerLabel` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectManagerLabel` mutation."""
type DeleteProjectManagerLabelPayload {
  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectManagerLabelId: ID

  """The `ProjectManagerLabel` that was deleted by this mutation."""
  projectManagerLabel: ProjectManagerLabel

  """An edge for our `ProjectManagerLabel`. May be used by Relay 1."""
  projectManagerLabelEdge(
    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `ProjectManager` mutation."""
type DeleteProjectManagerPayload {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectManagerId: ID

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """The `ProjectManager` that was deleted by this mutation."""
  projectManager: ProjectManager

  """An edge for our `ProjectManager`. May be used by Relay 1."""
  projectManagerEdge(
    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectRevisionByRowId` mutation."""
input DeleteProjectRevisionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project revision"""
  rowId: Int!
}

"""All input for the `deleteProjectRevision` mutation."""
input DeleteProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevision` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectRevision` mutation."""
type DeleteProjectRevisionPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectRevisionId: ID

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project

  """The `ProjectRevision` that was deleted by this mutation."""
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectStatusByRowId` mutation."""
input DeleteProjectStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project_status"""
  rowId: Int!
}

"""All input for the `deleteProjectStatus` mutation."""
input DeleteProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectStatus` mutation."""
type DeleteProjectStatusPayload {
  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectStatusId: ID

  """The `ProjectStatus` that was deleted by this mutation."""
  projectStatus: ProjectStatus

  """An edge for our `ProjectStatus`. May be used by Relay 1."""
  projectStatusEdge(
    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""Table tracking individual changes to database records"""
type FormChange implements Node {
  """
  The change status of this form change, foreign key to cif.change_status.
  """
  changeStatus: String!

  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangePreviousFormChangeIdAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeChangeStatusesByFormChangePreviousFormChangeIdAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangePreviousFormChangeIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeCifUsersByFormChangePreviousFormChangeIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangePreviousFormChangeIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeCifUsersByFormChangePreviousFormChangeIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The id of the record on which this form change applies"""
  formDataRecordId: Int

  """The schema on which this form change applies"""
  formDataSchemaName: String!

  """The table on which this form change applies"""
  formDataTableName: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  isUniqueValue(columnName: String!): Boolean

  """The name of the JSON schema to use for validation of this form data"""
  jsonSchemaName: String!

  """Unique ID for the form_change"""
  newFormData: JSON

  """The operation this form change describes: create, update or archive"""
  operation: FormChangeOperation!

  """
  returns an ancestor form_change from a specific revision for the form_change id passed in as a parameter
  """
  parentFormChangeFromRevision(projectRevisionId: Int!): FormChange

  """The id of the form_change record that preceded this one"""
  previousFormChangeId: Int

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """The project revision this change might be associated with (if known)"""
  projectRevisionId: Int

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeProjectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionIdManyToManyConnection!

  """Unique ID for the form_change"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """
  The validation errors computed for this record's new_form_data and the json_schema_name schema
  """
  validationErrors: JSON
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type FormChangeChangeStatusesByFormChangePreviousFormChangeIdAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeChangeStatusesByFormChangePreviousFormChangeIdAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type FormChangeChangeStatusesByFormChangePreviousFormChangeIdAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type FormChangeCifUsersByFormChangePreviousFormChangeIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeCifUsersByFormChangePreviousFormChangeIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type FormChangeCifUsersByFormChangePreviousFormChangeIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type FormChangeCifUsersByFormChangePreviousFormChangeIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeCifUsersByFormChangePreviousFormChangeIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type FormChangeCifUsersByFormChangePreviousFormChangeIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A condition to be used against `FormChange` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormChangeCondition {
  """Checks for equality with the object’s `changeStatus` field."""
  changeStatus: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `formDataRecordId` field."""
  formDataRecordId: Int

  """Checks for equality with the object’s `formDataSchemaName` field."""
  formDataSchemaName: String

  """Checks for equality with the object’s `formDataTableName` field."""
  formDataTableName: String

  """Checks for equality with the object’s `jsonSchemaName` field."""
  jsonSchemaName: String

  """Checks for equality with the object’s `newFormData` field."""
  newFormData: JSON

  """Checks for equality with the object’s `operation` field."""
  operation: FormChangeOperation

  """Checks for equality with the object’s `previousFormChangeId` field."""
  previousFormChangeId: Int

  """Checks for equality with the object’s `projectRevisionId` field."""
  projectRevisionId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `validationErrors` field."""
  validationErrors: JSON
}

"""
A filter to be used against `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input FormChangeFilter {
  """Checks for all expressions in this list."""
  and: [FormChangeFilter!]

  """Filter by the object’s `changeStatus` field."""
  changeStatus: StringFilter

  """Filter by the object’s `changeStatusByChangeStatus` relation."""
  changeStatusByChangeStatus: ChangeStatusFilter

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `formChangeByPreviousFormChangeId` relation."""
  formChangeByPreviousFormChangeId: FormChangeFilter

  """A related `formChangeByPreviousFormChangeId` exists."""
  formChangeByPreviousFormChangeIdExists: Boolean

  """Filter by the object’s `formChangesByPreviousFormChangeId` relation."""
  formChangesByPreviousFormChangeId: FormChangeToManyFormChangeFilter

  """Some related `formChangesByPreviousFormChangeId` exist."""
  formChangesByPreviousFormChangeIdExist: Boolean

  """Filter by the object’s `formDataRecordId` field."""
  formDataRecordId: IntFilter

  """Filter by the object’s `formDataSchemaName` field."""
  formDataSchemaName: StringFilter

  """Filter by the object’s `formDataTableName` field."""
  formDataTableName: StringFilter

  """Filter by the object’s `jsonSchemaName` field."""
  jsonSchemaName: StringFilter

  """Filter by the object’s `newFormData` field."""
  newFormData: JSONFilter

  """Negates the expression."""
  not: FormChangeFilter

  """Filter by the object’s `operation` field."""
  operation: FormChangeOperationFilter

  """Checks for any expressions in this list."""
  or: [FormChangeFilter!]

  """Filter by the object’s `previousFormChangeId` field."""
  previousFormChangeId: IntFilter

  """Filter by the object’s `projectRevisionByProjectRevisionId` relation."""
  projectRevisionByProjectRevisionId: ProjectRevisionFilter

  """A related `projectRevisionByProjectRevisionId` exists."""
  projectRevisionByProjectRevisionIdExists: Boolean

  """Filter by the object’s `projectRevisionId` field."""
  projectRevisionId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `validationErrors` field."""
  validationErrors: JSONFilter
}

"""
The type of change operation, defining the action taken when the form_change is committed.
"""
enum FormChangeOperation {
  ARCHIVE
  CREATE
  UPDATE
}

"""
A filter to be used against FormChangeOperation fields. All fields are combined with a logical ‘and.’
"""
input FormChangeOperationFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: FormChangeOperation

  """Equal to the specified value."""
  equalTo: FormChangeOperation

  """Greater than the specified value."""
  greaterThan: FormChangeOperation

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: FormChangeOperation

  """Included in the specified list."""
  in: [FormChangeOperation!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: FormChangeOperation

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: FormChangeOperation

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: FormChangeOperation

  """Not equal to the specified value."""
  notEqualTo: FormChangeOperation

  """Not included in the specified list."""
  notIn: [FormChangeOperation!]
}

"""
Represents an update to a `FormChange`. Fields that are set will be updated.
"""
input FormChangePatch {
  """
  The change status of this form change, foreign key to cif.change_status.
  """
  changeStatus: String

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The id of the record on which this form change applies"""
  formDataRecordId: Int

  """The schema on which this form change applies"""
  formDataSchemaName: String

  """The table on which this form change applies"""
  formDataTableName: String

  """The name of the JSON schema to use for validation of this form data"""
  jsonSchemaName: String

  """Unique ID for the form_change"""
  newFormData: JSON

  """The operation this form change describes: create, update or archive"""
  operation: FormChangeOperation

  """The id of the form_change record that preceded this one"""
  previousFormChangeId: Int

  """The project revision this change might be associated with (if known)"""
  projectRevisionId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """
  The validation errors computed for this record's new_form_data and the json_schema_name schema
  """
  validationErrors: JSON
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type FormChangeProjectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeProjectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type FormChangeProjectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input FormChangeToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""A connection to a list of `FormChange` values."""
type FormChangesConnection {
  """
  A list of edges which contains the `FormChange` and cursor to aid in pagination.
  """
  edges: [FormChangesEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection."""
type FormChangesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""Methods to use when ordering `FormChange`."""
enum FormChangesOrderBy {
  CHANGE_STATUS_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ACTIVE_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ACTIVE_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_BY_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_BY_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__STATUS_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__STATUS_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__TRIGGERS_COMMIT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__TRIGGERS_COMMIT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_BY_DESC
  CHANGE_STATUS_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FORM_CHANGES_BY_PREVIOUS_FORM_CHANGE_ID__COUNT_ASC
  FORM_CHANGES_BY_PREVIOUS_FORM_CHANGE_ID__COUNT_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CHANGE_STATUS_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CHANGE_STATUS_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CREATED_AT_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CREATED_AT_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CREATED_BY_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CREATED_BY_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_RECORD_ID_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_RECORD_ID_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_SCHEMA_NAME_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_SCHEMA_NAME_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_TABLE_NAME_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_TABLE_NAME_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__ID_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__ID_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__JSON_SCHEMA_NAME_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__JSON_SCHEMA_NAME_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__NEW_FORM_DATA_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__NEW_FORM_DATA_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__OPERATION_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__OPERATION_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__PREVIOUS_FORM_CHANGE_ID_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__PREVIOUS_FORM_CHANGE_ID_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__PROJECT_REVISION_ID_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__PROJECT_REVISION_ID_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__UPDATED_AT_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__UPDATED_AT_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__UPDATED_BY_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__UPDATED_BY_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__VALIDATION_ERRORS_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__VALIDATION_ERRORS_DESC
  FORM_DATA_RECORD_ID_ASC
  FORM_DATA_RECORD_ID_DESC
  FORM_DATA_SCHEMA_NAME_ASC
  FORM_DATA_SCHEMA_NAME_DESC
  FORM_DATA_TABLE_NAME_ASC
  FORM_DATA_TABLE_NAME_DESC
  ID_ASC
  ID_DESC
  JSON_SCHEMA_NAME_ASC
  JSON_SCHEMA_NAME_DESC
  NATURAL
  NEW_FORM_DATA_ASC
  NEW_FORM_DATA_DESC
  OPERATION_ASC
  OPERATION_DESC
  PREVIOUS_FORM_CHANGE_ID_ASC
  PREVIOUS_FORM_CHANGE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_STATUS_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_STATUS_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_AT_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_AT_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_BY_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_BY_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__ID_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__ID_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__PROJECT_ID_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__PROJECT_ID_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_AT_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_AT_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_BY_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_BY_DESC
  PROJECT_REVISION_ID_ASC
  PROJECT_REVISION_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  VALIDATION_ERRORS_ASC
  VALIDATION_ERRORS_DESC
}

"""Table containing information about a CIF funding_stream"""
type FundingStream implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpFundingStreamIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpFundingStreamIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpFundingStreamIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Description of the funding_stream"""
  description: String!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Shortname of the funding stream program"""
  name: String!

  """Unique ID for the funding_stream"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A condition to be used against `FundingStream` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FundingStreamCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `FundingStream` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamFilter {
  """Checks for all expressions in this list."""
  and: [FundingStreamFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `fundingStreamRfpsByFundingStreamId` relation."""
  fundingStreamRfpsByFundingStreamId: FundingStreamToManyFundingStreamRfpFilter

  """Some related `fundingStreamRfpsByFundingStreamId` exist."""
  fundingStreamRfpsByFundingStreamIdExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: FundingStreamFilter

  """Checks for any expressions in this list."""
  or: [FundingStreamFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `FundingStream`"""
input FundingStreamInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the funding_stream"""
  description: String!

  """Shortname of the funding stream program"""
  name: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `FundingStream`. Fields that are set will be updated.
"""
input FundingStreamPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the funding_stream"""
  description: String

  """Shortname of the funding stream program"""
  name: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""Table containing information about a CIF funding_stream_rfp"""
type FundingStreamRfp implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectFundingStreamRfpIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectFundingStreamRfpIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectFundingStreamRfpIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  The id of the funding_stream (cif.funding_stream.id) this rfp year is associated with
  """
  fundingStreamId: Int!

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectFundingStreamRfpIdAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpOperatorsByProjectFundingStreamRfpIdAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectFundingStreamRfpIdAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesByProjectFundingStreamRfpIdAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the funding_stream_rfp"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """The year this funding stream rfp is associated with"""
  year: Int!
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `FundingStreamRfp` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FundingStreamRfpCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `fundingStreamId` field."""
  fundingStreamId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""
A filter to be used against `FundingStreamRfp` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamRfpFilter {
  """Checks for all expressions in this list."""
  and: [FundingStreamRfpFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `fundingStreamByFundingStreamId` relation."""
  fundingStreamByFundingStreamId: FundingStreamFilter

  """Filter by the object’s `fundingStreamId` field."""
  fundingStreamId: IntFilter

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByFundingStreamRfpId` relation.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId: FundingStreamRfpToManyFundingStreamRfpProjectStatusFilter

  """
  Some related `fundingStreamRfpProjectStatusesByFundingStreamRfpId` exist.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpIdExist: Boolean

  """Negates the expression."""
  not: FundingStreamRfpFilter

  """Checks for any expressions in this list."""
  or: [FundingStreamRfpFilter!]

  """Filter by the object’s `projectsByFundingStreamRfpId` relation."""
  projectsByFundingStreamRfpId: FundingStreamRfpToManyProjectFilter

  """Some related `projectsByFundingStreamRfpId` exist."""
  projectsByFundingStreamRfpIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `year` field."""
  year: IntFilter
}

"""An input for mutations affecting `FundingStreamRfp`"""
input FundingStreamRfpInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  The id of the funding_stream (cif.funding_stream.id) this rfp year is associated with
  """
  fundingStreamId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """The year this funding stream rfp is associated with"""
  year: Int!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type FundingStreamRfpOperatorsByProjectFundingStreamRfpIdAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpOperatorsByProjectFundingStreamRfpIdAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type FundingStreamRfpOperatorsByProjectFundingStreamRfpIdAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `FundingStreamRfp`. Fields that are set will be updated.
"""
input FundingStreamRfpPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  The id of the funding_stream (cif.funding_stream.id) this rfp year is associated with
  """
  fundingStreamId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """The year this funding stream rfp is associated with"""
  year: Int
}

"""
Defines which project states a funding_stream_rfp can be set to for a given year.
"""
type FundingStreamRfpProjectStatus implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  Reads a single `FundingStreamRfp` that is related to this `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """The id referencing the funding_stream_rfp table"""
  fundingStreamRfpId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamRfpProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """The id refrencing the project_status table"""
  projectStatusId: Int!

  """Primary key for funding_stream_rfp_project_status table"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `FundingStreamRfpProjectStatus` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FundingStreamRfpProjectStatusCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `fundingStreamRfpId` field."""
  fundingStreamRfpId: Int

  """Checks for equality with the object’s `projectStatusId` field."""
  projectStatusId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `FundingStreamRfpProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamRfpProjectStatusFilter {
  """Checks for all expressions in this list."""
  and: [FundingStreamRfpProjectStatusFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """
  Filter by the object’s `fundingStreamRfpByFundingStreamRfpId` relation.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfpFilter

  """Filter by the object’s `fundingStreamRfpId` field."""
  fundingStreamRfpId: IntFilter

  """Negates the expression."""
  not: FundingStreamRfpProjectStatusFilter

  """Checks for any expressions in this list."""
  or: [FundingStreamRfpProjectStatusFilter!]

  """Filter by the object’s `projectStatusByProjectStatusId` relation."""
  projectStatusByProjectStatusId: ProjectStatusFilter

  """Filter by the object’s `projectStatusId` field."""
  projectStatusId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `FundingStreamRfpProjectStatus`"""
input FundingStreamRfpProjectStatusInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The id referencing the funding_stream_rfp table"""
  fundingStreamRfpId: Int!

  """The id refrencing the project_status table"""
  projectStatusId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `FundingStreamRfpProjectStatus`. Fields that are set will be updated.
"""
input FundingStreamRfpProjectStatusPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The id referencing the funding_stream_rfp table"""
  fundingStreamRfpId: Int

  """The id refrencing the project_status table"""
  projectStatusId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectStatus` values, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpProjectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpProjectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ProjectStatus` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpProjectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type FundingStreamRfpProjectStatusesByProjectFundingStreamRfpIdAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpProjectStatusesByProjectFundingStreamRfpIdAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type FundingStreamRfpProjectStatusesByProjectFundingStreamRfpIdAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `FundingStreamRfpProjectStatus` values."""
type FundingStreamRfpProjectStatusesConnection {
  """
  A list of edges which contains the `FundingStreamRfpProjectStatus` and cursor to aid in pagination.
  """
  edges: [FundingStreamRfpProjectStatusesEdge!]!

  """A list of `FundingStreamRfpProjectStatus` objects."""
  nodes: [FundingStreamRfpProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfpProjectStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfpProjectStatus` edge in the connection."""
type FundingStreamRfpProjectStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfpProjectStatus` at the end of the edge."""
  node: FundingStreamRfpProjectStatus
}

"""Methods to use when ordering `FundingStreamRfpProjectStatus`."""
enum FundingStreamRfpProjectStatusesOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__FUNDING_STREAM_ID_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__FUNDING_STREAM_ID_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ID_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ID_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__YEAR_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__YEAR_DESC
  FUNDING_STREAM_RFP_ID_ASC
  FUNDING_STREAM_RFP_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_DESC
  PROJECT_STATUS_ID_ASC
  PROJECT_STATUS_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against many `FundingStreamRfpProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamRfpToManyFundingStreamRfpProjectStatusFilter {
  """
  Every related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpProjectStatusFilter

  """
  No related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpProjectStatusFilter

  """
  Some related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpProjectStatusFilter
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamRfpToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `FundingStreamRfp` values."""
type FundingStreamRfpsConnection {
  """
  A list of edges which contains the `FundingStreamRfp` and cursor to aid in pagination.
  """
  edges: [FundingStreamRfpsEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection."""
type FundingStreamRfpsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""Methods to use when ordering `FundingStreamRfp`."""
enum FundingStreamRfpsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ARCHIVED_AT_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ARCHIVED_AT_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ARCHIVED_BY_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ARCHIVED_BY_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__CREATED_AT_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__CREATED_AT_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__CREATED_BY_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__CREATED_BY_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__DESCRIPTION_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__DESCRIPTION_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ID_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ID_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__NAME_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__NAME_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__UPDATED_AT_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__UPDATED_AT_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__UPDATED_BY_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__UPDATED_BY_DESC
  FUNDING_STREAM_ID_ASC
  FUNDING_STREAM_ID_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_FUNDING_STREAM_RFP_ID__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_FUNDING_STREAM_RFP_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_FUNDING_STREAM_RFP_ID__COUNT_ASC
  PROJECTS_BY_FUNDING_STREAM_RFP_ID__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  YEAR_ASC
  YEAR_DESC
}

"""
A filter to be used against many `FundingStreamRfp` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamToManyFundingStreamRfpFilter {
  """
  Every related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpFilter

  """
  No related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpFilter

  """
  Some related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpFilter
}

"""A connection to a list of `FundingStream` values."""
type FundingStreamsConnection {
  """
  A list of edges which contains the `FundingStream` and cursor to aid in pagination.
  """
  edges: [FundingStreamsEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""A `FundingStream` edge in the connection."""
type FundingStreamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStream` at the end of the edge."""
  node: FundingStream
}

"""Methods to use when ordering `FundingStream`."""
enum FundingStreamsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FUNDING_STREAM_RFPS_BY_FUNDING_STREAM_ID__COUNT_ASC
  FUNDING_STREAM_RFPS_BY_FUNDING_STREAM_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
Indicates whether archived items should be included in the results or not.
"""
enum IncludeArchivedOption {
  """Only include archived items (i.e. exclude non-archived items)."""
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is archived then this is equivalent to YES, in all other cases this is equivalent to NO.
  """
  INHERIT

  """Exclude archived items."""
  NO

  """Include archived items."""
  YES
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type KeycloakJwt {
  acr: String
  aud: String
  authTime: Int
  azp: String
  brokerSessionId: String

  """Reads a single `CifUser` that is related to this `KeycloakJwt`."""
  cifUserBySub: CifUser
  email: String
  emailVerified: Boolean
  exp: Int
  familyName: String
  givenName: String
  iat: Int
  iss: String
  jti: UUID
  name: String
  nbf: Int
  preferredUsername: String
  priorityGroup: String
  sessionState: UUID
  sub: UUID
  typ: String
  userGroups: [String]
}

"""
A filter to be used against `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input KeycloakJwtFilter {
  """Filter by the object’s `acr` field."""
  acr: StringFilter

  """Checks for all expressions in this list."""
  and: [KeycloakJwtFilter!]

  """Filter by the object’s `aud` field."""
  aud: StringFilter

  """Filter by the object’s `authTime` field."""
  authTime: IntFilter

  """Filter by the object’s `azp` field."""
  azp: StringFilter

  """Filter by the object’s `brokerSessionId` field."""
  brokerSessionId: StringFilter

  """Filter by the object’s `cifUserBySub` relation."""
  cifUserBySub: CifUserFilter

  """A related `cifUserBySub` exists."""
  cifUserBySubExists: Boolean

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `emailVerified` field."""
  emailVerified: BooleanFilter

  """Filter by the object’s `exp` field."""
  exp: IntFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `iat` field."""
  iat: IntFilter

  """Filter by the object’s `iss` field."""
  iss: StringFilter

  """Filter by the object’s `jti` field."""
  jti: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `nbf` field."""
  nbf: IntFilter

  """Negates the expression."""
  not: KeycloakJwtFilter

  """Checks for any expressions in this list."""
  or: [KeycloakJwtFilter!]

  """Filter by the object’s `preferredUsername` field."""
  preferredUsername: StringFilter

  """Filter by the object’s `priorityGroup` field."""
  priorityGroup: StringFilter

  """Filter by the object’s `sessionState` field."""
  sessionState: UUIDFilter

  """Filter by the object’s `sub` field."""
  sub: UUIDFilter

  """Filter by the object’s `typ` field."""
  typ: StringFilter

  """Filter by the object’s `userGroups` field."""
  userGroups: StringListFilter
}

"""
A composite return type for the project_revision_project_manager_form_changes_by_label computed column. Returns a record for each active label and the last related form_change if it exists.
"""
type ManagerFormChangesByLabelCompositeReturn {
  formChange: FormChange
  projectManagerLabel: ProjectManagerLabel
}

"""
A connection to a list of `ManagerFormChangesByLabelCompositeReturn` values.
"""
type ManagerFormChangesByLabelCompositeReturnsConnection {
  """
  A list of edges which contains the `ManagerFormChangesByLabelCompositeReturn` and cursor to aid in pagination.
  """
  edges: [ManagerFormChangesByLabelCompositeReturnsEdge!]!

  """A list of `ManagerFormChangesByLabelCompositeReturn` objects."""
  nodes: [ManagerFormChangesByLabelCompositeReturn]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ManagerFormChangesByLabelCompositeReturn` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ManagerFormChangesByLabelCompositeReturn` edge in the connection."""
type ManagerFormChangesByLabelCompositeReturnsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ManagerFormChangesByLabelCompositeReturn` at the end of the edge."""
  node: ManagerFormChangesByLabelCompositeReturn
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  addContactToRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddContactToRevisionInput!
  ): AddContactToRevisionPayload

  """Creates a single `Attachment`."""
  createAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload

  """Creates a single `ChangeStatus`."""
  createChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChangeStatusInput!
  ): CreateChangeStatusPayload

  """Creates a single `CifUser`."""
  createCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCifUserInput!
  ): CreateCifUserPayload

  """
  Creates a new form_change record.
  If new_form_data is not provided, the latest committed form_data record for the same table and record id will be used.
  """
  createFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormChangeInput!
  ): CreateFormChangePayload

  """Creates a single `FundingStream`."""
  createFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamInput!
  ): CreateFundingStreamPayload

  """Creates a single `FundingStreamRfp`."""
  createFundingStreamRfp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamRfpInput!
  ): CreateFundingStreamRfpPayload

  """Creates a single `FundingStreamRfpProjectStatus`."""
  createFundingStreamRfpProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamRfpProjectStatusInput!
  ): CreateFundingStreamRfpProjectStatusPayload
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """Creates a single `ProjectContact`."""
  createProjectContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectContactInput!
  ): CreateProjectContactPayload

  """Creates a single `ProjectManager`."""
  createProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectManagerInput!
  ): CreateProjectManagerPayload

  """Creates a single `ProjectManagerLabel`."""
  createProjectManagerLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectManagerLabelInput!
  ): CreateProjectManagerLabelPayload
  createProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectRevisionInput!
  ): CreateProjectRevisionPayload

  """Creates a single `ProjectStatus`."""
  createProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectStatusInput!
  ): CreateProjectStatusPayload
  createUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserFromSessionInput!
  ): CreateUserFromSessionPayload

  """Deletes a single `Attachment` using its globally unique id."""
  deleteAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload

  """Deletes a single `Attachment` using a unique key."""
  deleteAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentByRowIdInput!
  ): DeleteAttachmentPayload

  """Deletes a single `ChangeStatus` using its globally unique id."""
  deleteChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusInput!
  ): DeleteChangeStatusPayload

  """Deletes a single `ChangeStatus` using a unique key."""
  deleteChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusByStatusInput!
  ): DeleteChangeStatusPayload

  """Deletes a single `CifUser` using its globally unique id."""
  deleteCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserInput!
  ): DeleteCifUserPayload

  """Deletes a single `CifUser` using a unique key."""
  deleteCifUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserByRowIdInput!
  ): DeleteCifUserPayload

  """Deletes a single `FormChange` using its globally unique id."""
  deleteFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeInput!
  ): DeleteFormChangePayload

  """Deletes a single `FormChange` using a unique key."""
  deleteFormChangeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeByRowIdInput!
  ): DeleteFormChangePayload

  """Deletes a single `FundingStream` using its globally unique id."""
  deleteFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamInput!
  ): DeleteFundingStreamPayload

  """Deletes a single `FundingStream` using a unique key."""
  deleteFundingStreamByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamByRowIdInput!
  ): DeleteFundingStreamPayload

  """Deletes a single `FundingStreamRfp` using its globally unique id."""
  deleteFundingStreamRfp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpInput!
  ): DeleteFundingStreamRfpPayload

  """Deletes a single `FundingStreamRfp` using a unique key."""
  deleteFundingStreamRfpByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpByRowIdInput!
  ): DeleteFundingStreamRfpPayload

  """
  Deletes a single `FundingStreamRfpProjectStatus` using its globally unique id.
  """
  deleteFundingStreamRfpProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpProjectStatusInput!
  ): DeleteFundingStreamRfpProjectStatusPayload

  """Deletes a single `FundingStreamRfpProjectStatus` using a unique key."""
  deleteFundingStreamRfpProjectStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpProjectStatusByRowIdInput!
  ): DeleteFundingStreamRfpProjectStatusPayload

  """Deletes a single `ProjectContact` using its globally unique id."""
  deleteProjectContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectContactInput!
  ): DeleteProjectContactPayload

  """Deletes a single `ProjectContact` using a unique key."""
  deleteProjectContactByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectContactByRowIdInput!
  ): DeleteProjectContactPayload

  """Deletes a single `ProjectManager` using its globally unique id."""
  deleteProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerInput!
  ): DeleteProjectManagerPayload

  """Deletes a single `ProjectManager` using a unique key."""
  deleteProjectManagerByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerByRowIdInput!
  ): DeleteProjectManagerPayload

  """Deletes a single `ProjectManagerLabel` using its globally unique id."""
  deleteProjectManagerLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerLabelInput!
  ): DeleteProjectManagerLabelPayload

  """Deletes a single `ProjectManagerLabel` using a unique key."""
  deleteProjectManagerLabelByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerLabelByLabelInput!
  ): DeleteProjectManagerLabelPayload

  """Deletes a single `ProjectManagerLabel` using a unique key."""
  deleteProjectManagerLabelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerLabelByRowIdInput!
  ): DeleteProjectManagerLabelPayload

  """Deletes a single `ProjectRevision` using its globally unique id."""
  deleteProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionInput!
  ): DeleteProjectRevisionPayload

  """Deletes a single `ProjectRevision` using a unique key."""
  deleteProjectRevisionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionByRowIdInput!
  ): DeleteProjectRevisionPayload

  """Deletes a single `ProjectStatus` using its globally unique id."""
  deleteProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectStatusInput!
  ): DeleteProjectStatusPayload

  """Deletes a single `ProjectStatus` using a unique key."""
  deleteProjectStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectStatusByRowIdInput!
  ): DeleteProjectStatusPayload

  """
  Updates a single `Attachment` using its globally unique id and a patch.
  """
  updateAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentInput!
  ): UpdateAttachmentPayload

  """Updates a single `Attachment` using a unique key and a patch."""
  updateAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentByRowIdInput!
  ): UpdateAttachmentPayload

  """
  Updates a single `ChangeStatus` using its globally unique id and a patch.
  """
  updateChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusInput!
  ): UpdateChangeStatusPayload

  """Updates a single `ChangeStatus` using a unique key and a patch."""
  updateChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusByStatusInput!
  ): UpdateChangeStatusPayload

  """Updates a single `CifUser` using its globally unique id and a patch."""
  updateCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserInput!
  ): UpdateCifUserPayload

  """Updates a single `CifUser` using a unique key and a patch."""
  updateCifUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserByRowIdInput!
  ): UpdateCifUserPayload

  """
  Updates a single `FormChange` using its globally unique id and a patch.
  """
  updateFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormChangeInput!
  ): UpdateFormChangePayload

  """Updates a single `FormChange` using a unique key and a patch."""
  updateFormChangeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormChangeByRowIdInput!
  ): UpdateFormChangePayload

  """
  Updates a single `FundingStream` using its globally unique id and a patch.
  """
  updateFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamInput!
  ): UpdateFundingStreamPayload

  """Updates a single `FundingStream` using a unique key and a patch."""
  updateFundingStreamByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamByRowIdInput!
  ): UpdateFundingStreamPayload

  """
  Updates a single `FundingStreamRfp` using its globally unique id and a patch.
  """
  updateFundingStreamRfp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpInput!
  ): UpdateFundingStreamRfpPayload

  """Updates a single `FundingStreamRfp` using a unique key and a patch."""
  updateFundingStreamRfpByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpByRowIdInput!
  ): UpdateFundingStreamRfpPayload

  """
  Updates a single `FundingStreamRfpProjectStatus` using its globally unique id and a patch.
  """
  updateFundingStreamRfpProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpProjectStatusInput!
  ): UpdateFundingStreamRfpProjectStatusPayload

  """
  Updates a single `FundingStreamRfpProjectStatus` using a unique key and a patch.
  """
  updateFundingStreamRfpProjectStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpProjectStatusByRowIdInput!
  ): UpdateFundingStreamRfpProjectStatusPayload

  """
  Updates a single `ProjectContact` using its globally unique id and a patch.
  """
  updateProjectContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectContactInput!
  ): UpdateProjectContactPayload

  """Updates a single `ProjectContact` using a unique key and a patch."""
  updateProjectContactByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectContactByRowIdInput!
  ): UpdateProjectContactPayload

  """
  Updates a single `ProjectManager` using its globally unique id and a patch.
  """
  updateProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerInput!
  ): UpdateProjectManagerPayload

  """Updates a single `ProjectManager` using a unique key and a patch."""
  updateProjectManagerByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerByRowIdInput!
  ): UpdateProjectManagerPayload

  """
  Updates a single `ProjectManagerLabel` using its globally unique id and a patch.
  """
  updateProjectManagerLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerLabelInput!
  ): UpdateProjectManagerLabelPayload

  """Updates a single `ProjectManagerLabel` using a unique key and a patch."""
  updateProjectManagerLabelByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerLabelByLabelInput!
  ): UpdateProjectManagerLabelPayload

  """Updates a single `ProjectManagerLabel` using a unique key and a patch."""
  updateProjectManagerLabelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerLabelByRowIdInput!
  ): UpdateProjectManagerLabelPayload

  """
  Updates a single `ProjectRevision` using its globally unique id and a patch.
  """
  updateProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionInput!
  ): UpdateProjectRevisionPayload

  """Updates a single `ProjectRevision` using a unique key and a patch."""
  updateProjectRevisionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionByRowIdInput!
  ): UpdateProjectRevisionPayload

  """
  Updates a single `ProjectStatus` using its globally unique id and a patch.
  """
  updateProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectStatusInput!
  ): UpdateProjectStatusPayload

  """Updates a single `ProjectStatus` using a unique key and a patch."""
  updateProjectStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectStatusByRowIdInput!
  ): UpdateProjectStatusPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Table containing information about a CIF operator"""
type Operator implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """The bc registry id assigned to this operator"""
  bcRegistryId: String

  """Reads a single `CifUser` that is related to this `Operator`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Operator`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Operator`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectOperatorIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorCifUsersByProjectOperatorIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectOperatorIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectOperatorIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorFundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The legal name of this operator"""
  legalName: String

  """
  The operator code is a set of characters that uniquely identifies the operator and is used in the cif.project table as part of the propsal_reference
  """
  operatorCode: String

  """
  Returns the pending form change editing the operator created by the current user, if it exists.
  """
  pendingFormChange: FormChange

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectOperatorIdAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorProjectStatusesByProjectOperatorIdAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the operator"""
  rowId: Int!

  """The legal name of this operator as last imported from SWRS"""
  swrsLegalName: String

  """
  The organisation ID from the ggircs database as assigned by the federal Single Window Reporting System
  """
  swrsOrganisationId: Int

  """The trade name of this operator as last imported from SWRS"""
  swrsTradeName: String

  """The trade name of this operator"""
  tradeName: String

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorCifUsersByProjectOperatorIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `Operator` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OperatorCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `bcRegistryId` field."""
  bcRegistryId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `legalName` field."""
  legalName: String

  """Checks for equality with the object’s `operatorCode` field."""
  operatorCode: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsLegalName` field."""
  swrsLegalName: String

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsTradeName` field."""
  swrsTradeName: String

  """Checks for equality with the object’s `tradeName` field."""
  tradeName: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Operator` object types. All fields are combined with a logical ‘and.’
"""
input OperatorFilter {
  """Checks for all expressions in this list."""
  and: [OperatorFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `bcRegistryId` field."""
  bcRegistryId: StringFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `legalName` field."""
  legalName: StringFilter

  """Negates the expression."""
  not: OperatorFilter

  """Filter by the object’s `operatorCode` field."""
  operatorCode: StringFilter

  """Checks for any expressions in this list."""
  or: [OperatorFilter!]

  """Filter by the object’s `projectsByOperatorId` relation."""
  projectsByOperatorId: OperatorToManyProjectFilter

  """Some related `projectsByOperatorId` exist."""
  projectsByOperatorIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsLegalName` field."""
  swrsLegalName: StringFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `swrsTradeName` field."""
  swrsTradeName: StringFilter

  """Filter by the object’s `tradeName` field."""
  tradeName: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type OperatorFundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorFundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type OperatorFundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type OperatorProjectStatusesByProjectOperatorIdAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorProjectStatusesByProjectOperatorIdAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type OperatorProjectStatusesByProjectOperatorIdAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input OperatorToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `Operator` values."""
type OperatorsConnection {
  """
  A list of edges which contains the `Operator` and cursor to aid in pagination.
  """
  edges: [OperatorsEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection."""
type OperatorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator
}

"""Methods to use when ordering `Operator`."""
enum OperatorsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  BC_REGISTRY_ID_ASC
  BC_REGISTRY_ID_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  LEGAL_NAME_ASC
  LEGAL_NAME_DESC
  NATURAL
  OPERATOR_CODE_ASC
  OPERATOR_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_OPERATOR_ID__COUNT_ASC
  PROJECTS_BY_OPERATOR_ID__COUNT_DESC
  SWRS_LEGAL_NAME_ASC
  SWRS_LEGAL_NAME_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_TRADE_NAME_ASC
  SWRS_TRADE_NAME_DESC
  TRADE_NAME_ASC
  TRADE_NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""Table containing information about a CIF Project"""
type Project implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionProjectIdAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactProjectIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectContactProjectIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectContactProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectContactProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByProjectContactProjectIdAndContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsByProjectContactProjectIdAndContactIdManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads a single `FundingStreamRfp` that is related to this `Project`."""
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """
  The id of the funding_stream_rfp (cif.funding_stream_rfp.id) that was selected when creating the project
  """
  fundingStreamRfpId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Operator` that is related to this `Project`."""
  operatorByOperatorId: Operator

  """Foreign key references the cif.operator table"""
  operatorId: Int!

  """
  Returns the pending project revision for the project, created by the current user
  """
  pendingProjectRevision: ProjectRevision

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectProjectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """The name of the project"""
  projectName: String!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads a single `ProjectStatus` that is related to this `Project`."""
  projectStatusByProjectStatusId: ProjectStatus

  """
  The id of the project_status (cif.project_status.id) that the project is currently in
  """
  projectStatusId: Int!

  """
  Unique identifier internal to the CIF team. As of the 2022 RFPs, the current format is YYYY-RFP-0-ABCD-000. Projects for the 2019 and 2020 RFPs may use a different format.
  """
  proposalReference: String!

  """Unique ID for the project"""
  rowId: Int!

  """Summary of the project"""
  summary: String!

  """The total amount of funding requested for the project"""
  totalFundingRequest: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ProjectCifUsersByProjectContactProjectIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectContactProjectIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ProjectCifUsersByProjectContactProjectIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ProjectCifUsersByProjectContactProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectContactProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ProjectCifUsersByProjectContactProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ProjectCifUsersByProjectContactProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectContactProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ProjectCifUsersByProjectContactProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `fundingStreamRfpId` field."""
  fundingStreamRfpId: Int

  """Checks for equality with the object’s `operatorId` field."""
  operatorId: Int

  """Checks for equality with the object’s `projectName` field."""
  projectName: String

  """Checks for equality with the object’s `projectStatusId` field."""
  projectStatusId: Int

  """Checks for equality with the object’s `proposalReference` field."""
  proposalReference: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `totalFundingRequest` field."""
  totalFundingRequest: BigFloat

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""Join table to track assignment of contacts to projects"""
type ProjectContact implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByUpdatedBy: CifUser

  """Reads a single `Contact` that is related to this `ProjectContact`."""
  contactByContactId: Contact

  """Foreign key to the contact"""
  contactId: Int!

  """The zero-based index of the contact in the project"""
  contactIndex: Int!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Project` that is related to this `ProjectContact`."""
  projectByProjectId: Project

  """Foreign key to the project"""
  projectId: Int!

  """Unique ID for the project contact record"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `ProjectContact` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectContactCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `contactId` field."""
  contactId: Int

  """Checks for equality with the object’s `contactIndex` field."""
  contactIndex: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectContact` object types. All fields are combined with a logical ‘and.’
"""
input ProjectContactFilter {
  """Checks for all expressions in this list."""
  and: [ProjectContactFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `contactByContactId` relation."""
  contactByContactId: ContactFilter

  """Filter by the object’s `contactId` field."""
  contactId: IntFilter

  """Filter by the object’s `contactIndex` field."""
  contactIndex: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Negates the expression."""
  not: ProjectContactFilter

  """Checks for any expressions in this list."""
  or: [ProjectContactFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ProjectContact`"""
input ProjectContactInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Foreign key to the contact"""
  contactId: Int!

  """The zero-based index of the contact in the project"""
  contactIndex: Int!

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ProjectContact`. Fields that are set will be updated.
"""
input ProjectContactPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Foreign key to the contact"""
  contactId: Int

  """The zero-based index of the contact in the project"""
  contactIndex: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `Contact` values, with data from `ProjectContact`.
"""
type ProjectContactsByProjectContactProjectIdAndContactIdManyToManyConnection {
  """
  A list of edges which contains the `Contact`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ProjectContactsByProjectContactProjectIdAndContactIdManyToManyEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection, with data from `ProjectContact`."""
type ProjectContactsByProjectContactProjectIdAndContactIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""A connection to a list of `ProjectContact` values."""
type ProjectContactsConnection {
  """
  A list of edges which contains the `ProjectContact` and cursor to aid in pagination.
  """
  edges: [ProjectContactsEdge!]!

  """A list of `ProjectContact` objects."""
  nodes: [ProjectContact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectContact` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectContact` edge in the connection."""
type ProjectContactsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectContact` at the end of the edge."""
  node: ProjectContact
}

"""Methods to use when ordering `ProjectContact`."""
enum ProjectContactsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CONTACT_BY_CONTACT_ID__ARCHIVED_AT_ASC
  CONTACT_BY_CONTACT_ID__ARCHIVED_AT_DESC
  CONTACT_BY_CONTACT_ID__ARCHIVED_BY_ASC
  CONTACT_BY_CONTACT_ID__ARCHIVED_BY_DESC
  CONTACT_BY_CONTACT_ID__COMMENTS_ASC
  CONTACT_BY_CONTACT_ID__COMMENTS_DESC
  CONTACT_BY_CONTACT_ID__CREATED_AT_ASC
  CONTACT_BY_CONTACT_ID__CREATED_AT_DESC
  CONTACT_BY_CONTACT_ID__CREATED_BY_ASC
  CONTACT_BY_CONTACT_ID__CREATED_BY_DESC
  CONTACT_BY_CONTACT_ID__EMAIL_ASC
  CONTACT_BY_CONTACT_ID__EMAIL_DESC
  CONTACT_BY_CONTACT_ID__FAMILY_NAME_ASC
  CONTACT_BY_CONTACT_ID__FAMILY_NAME_DESC
  CONTACT_BY_CONTACT_ID__FULL_NAME_ASC
  CONTACT_BY_CONTACT_ID__FULL_NAME_DESC
  CONTACT_BY_CONTACT_ID__FULL_PHONE_ASC
  CONTACT_BY_CONTACT_ID__FULL_PHONE_DESC
  CONTACT_BY_CONTACT_ID__GIVEN_NAME_ASC
  CONTACT_BY_CONTACT_ID__GIVEN_NAME_DESC
  CONTACT_BY_CONTACT_ID__ID_ASC
  CONTACT_BY_CONTACT_ID__ID_DESC
  CONTACT_BY_CONTACT_ID__PHONE_ASC
  CONTACT_BY_CONTACT_ID__PHONE_DESC
  CONTACT_BY_CONTACT_ID__PHONE_EXT_ASC
  CONTACT_BY_CONTACT_ID__PHONE_EXT_DESC
  CONTACT_BY_CONTACT_ID__POSITION_ASC
  CONTACT_BY_CONTACT_ID__POSITION_DESC
  CONTACT_BY_CONTACT_ID__UPDATED_AT_ASC
  CONTACT_BY_CONTACT_ID__UPDATED_AT_DESC
  CONTACT_BY_CONTACT_ID__UPDATED_BY_ASC
  CONTACT_BY_CONTACT_ID__UPDATED_BY_DESC
  CONTACT_ID_ASC
  CONTACT_ID_DESC
  CONTACT_INDEX_ASC
  CONTACT_INDEX_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against `Project` object types. All fields are combined with a logical ‘and.’
"""
input ProjectFilter {
  """Checks for all expressions in this list."""
  and: [ProjectFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """
  Filter by the object’s `fundingStreamRfpByFundingStreamRfpId` relation.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfpFilter

  """Filter by the object’s `fundingStreamRfpId` field."""
  fundingStreamRfpId: IntFilter

  """Negates the expression."""
  not: ProjectFilter

  """Filter by the object’s `operatorByOperatorId` relation."""
  operatorByOperatorId: OperatorFilter

  """Filter by the object’s `operatorId` field."""
  operatorId: IntFilter

  """Checks for any expressions in this list."""
  or: [ProjectFilter!]

  """Filter by the object’s `projectContactsByProjectId` relation."""
  projectContactsByProjectId: ProjectToManyProjectContactFilter

  """Some related `projectContactsByProjectId` exist."""
  projectContactsByProjectIdExist: Boolean

  """Filter by the object’s `projectManagersByProjectId` relation."""
  projectManagersByProjectId: ProjectToManyProjectManagerFilter

  """Some related `projectManagersByProjectId` exist."""
  projectManagersByProjectIdExist: Boolean

  """Filter by the object’s `projectName` field."""
  projectName: StringFilter

  """Filter by the object’s `projectRevisionsByProjectId` relation."""
  projectRevisionsByProjectId: ProjectToManyProjectRevisionFilter

  """Some related `projectRevisionsByProjectId` exist."""
  projectRevisionsByProjectIdExist: Boolean

  """Filter by the object’s `projectStatusByProjectStatusId` relation."""
  projectStatusByProjectStatusId: ProjectStatusFilter

  """Filter by the object’s `projectStatusId` field."""
  projectStatusId: IntFilter

  """Filter by the object’s `proposalReference` field."""
  proposalReference: StringFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `summary` field."""
  summary: StringFilter

  """Filter by the object’s `totalFundingRequest` field."""
  totalFundingRequest: BigFloatFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
Join table to track assignment of cif users to projects, as project managers
"""
type ProjectManager implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """Foreign key to the cif user"""
  cifUserId: Int!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """Foreign key to the project"""
  projectId: Int!

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Foreign key to the project_manager_label table. Defines the list of labels that cif_users can be assigned to as a manager of a project
  """
  projectManagerLabelId: Int!

  """Unique ID for the project manager record"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `ProjectManager` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectManagerCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `cifUserId` field."""
  cifUserId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `projectManagerLabelId` field."""
  projectManagerLabelId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input ProjectManagerFilter {
  """Checks for all expressions in this list."""
  and: [ProjectManagerFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCifUserId` relation."""
  cifUserByCifUserId: CifUserFilter

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `cifUserId` field."""
  cifUserId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Negates the expression."""
  not: ProjectManagerFilter

  """Checks for any expressions in this list."""
  or: [ProjectManagerFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """
  Filter by the object’s `projectManagerLabelByProjectManagerLabelId` relation.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabelFilter

  """Filter by the object’s `projectManagerLabelId` field."""
  projectManagerLabelId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ProjectManager`"""
input ProjectManagerInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Foreign key to the cif user"""
  cifUserId: Int!

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int!

  """
  Foreign key to the project_manager_label table. Defines the list of labels that cif_users can be assigned to as a manager of a project
  """
  projectManagerLabelId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Lookup table for project manager labels. Records define the labels that project managers can be assigned to a project as
"""
type ProjectManagerLabel implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectManagerLabelIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectManagerLabelIdAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectManagerLabelIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectManagerLabelIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The label that project managers can be assigned to a project as"""
  label: String!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerProjectManagerLabelIdAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelProjectsByProjectManagerProjectManagerLabelIdAndProjectIdManyToManyConnection!

  """Unique ID for the project_manager_label record"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A condition to be used against `ProjectManagerLabel` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProjectManagerLabelCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectManagerLabel` object types. All fields are combined with a logical ‘and.’
"""
input ProjectManagerLabelFilter {
  """Checks for all expressions in this list."""
  and: [ProjectManagerLabelFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Negates the expression."""
  not: ProjectManagerLabelFilter

  """Checks for any expressions in this list."""
  or: [ProjectManagerLabelFilter!]

  """
  Filter by the object’s `projectManagersByProjectManagerLabelId` relation.
  """
  projectManagersByProjectManagerLabelId: ProjectManagerLabelToManyProjectManagerFilter

  """Some related `projectManagersByProjectManagerLabelId` exist."""
  projectManagersByProjectManagerLabelIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ProjectManagerLabel`"""
input ProjectManagerLabelInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The label that project managers can be assigned to a project as"""
  label: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ProjectManagerLabel`. Fields that are set will be updated.
"""
input ProjectManagerLabelPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The label that project managers can be assigned to a project as"""
  label: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelProjectsByProjectManagerProjectManagerLabelIdAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelProjectsByProjectManagerProjectManagerLabelIdAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelProjectsByProjectManagerProjectManagerLabelIdAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A filter to be used against many `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input ProjectManagerLabelToManyProjectManagerFilter {
  """
  Every related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerFilter

  """
  No related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerFilter

  """
  Some related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerFilter
}

"""A connection to a list of `ProjectManagerLabel` values."""
type ProjectManagerLabelsConnection {
  """
  A list of edges which contains the `ProjectManagerLabel` and cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelsEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectManagerLabel` edge in the connection."""
type ProjectManagerLabelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel
}

"""Methods to use when ordering `ProjectManagerLabel`."""
enum ProjectManagerLabelsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  LABEL_ASC
  LABEL_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_MANAGERS_BY_PROJECT_MANAGER_LABEL_ID__COUNT_ASC
  PROJECT_MANAGERS_BY_PROJECT_MANAGER_LABEL_ID__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
Represents an update to a `ProjectManager`. Fields that are set will be updated.
"""
input ProjectManagerPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Foreign key to the cif user"""
  cifUserId: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int

  """
  Foreign key to the project_manager_label table. Defines the list of labels that cif_users can be assigned to as a manager of a project
  """
  projectManagerLabelId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `ProjectManager` values."""
type ProjectManagersConnection {
  """
  A list of edges which contains the `ProjectManager` and cursor to aid in pagination.
  """
  edges: [ProjectManagersEdge!]!

  """A list of `ProjectManager` objects."""
  nodes: [ProjectManager]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectManager` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectManager` edge in the connection."""
type ProjectManagersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManager` at the end of the edge."""
  node: ProjectManager
}

"""Methods to use when ordering `ProjectManager`."""
enum ProjectManagersOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CIF_USER_ID__ARCHIVED_AT_ASC
  CIF_USER_BY_CIF_USER_ID__ARCHIVED_AT_DESC
  CIF_USER_BY_CIF_USER_ID__ARCHIVED_BY_ASC
  CIF_USER_BY_CIF_USER_ID__ARCHIVED_BY_DESC
  CIF_USER_BY_CIF_USER_ID__CREATED_AT_ASC
  CIF_USER_BY_CIF_USER_ID__CREATED_AT_DESC
  CIF_USER_BY_CIF_USER_ID__CREATED_BY_ASC
  CIF_USER_BY_CIF_USER_ID__CREATED_BY_DESC
  CIF_USER_BY_CIF_USER_ID__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CIF_USER_ID__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CIF_USER_ID__FAMILY_NAME_ASC
  CIF_USER_BY_CIF_USER_ID__FAMILY_NAME_DESC
  CIF_USER_BY_CIF_USER_ID__GIVEN_NAME_ASC
  CIF_USER_BY_CIF_USER_ID__GIVEN_NAME_DESC
  CIF_USER_BY_CIF_USER_ID__ID_ASC
  CIF_USER_BY_CIF_USER_ID__ID_DESC
  CIF_USER_BY_CIF_USER_ID__UPDATED_AT_ASC
  CIF_USER_BY_CIF_USER_ID__UPDATED_AT_DESC
  CIF_USER_BY_CIF_USER_ID__UPDATED_BY_ASC
  CIF_USER_BY_CIF_USER_ID__UPDATED_BY_DESC
  CIF_USER_BY_CIF_USER_ID__UUID_ASC
  CIF_USER_BY_CIF_USER_ID__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CIF_USER_ID_ASC
  CIF_USER_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ARCHIVED_AT_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ARCHIVED_AT_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ARCHIVED_BY_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ARCHIVED_BY_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__CREATED_AT_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__CREATED_AT_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__CREATED_BY_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__CREATED_BY_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ID_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ID_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__LABEL_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__LABEL_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__UPDATED_AT_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__UPDATED_AT_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__UPDATED_BY_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__UPDATED_BY_DESC
  PROJECT_MANAGER_LABEL_ID_ASC
  PROJECT_MANAGER_LABEL_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type ProjectProjectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectProjectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type ProjectProjectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""Table containing all the changes for a project revision"""
type ProjectRevision implements Node {
  """Foreign key to the status of the project revision"""
  changeStatus: String

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeProjectRevisionIdAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeProjectRevisionIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeProjectRevisionIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByFormChangeProjectRevisionIdAndPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionFormChangesByFormChangeProjectRevisionIdAndPreviousFormChangeIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project

  """
  Computed column for graphql to retrieve the change related to the project_contact records, within a project revision
  """
  projectContactFormChanges(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): FormChangesConnection!

  """
  Computed column for graphql to retrieve the change related to the project record, within a project revision
  """
  projectFormChange: FormChange

  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int

  """
  Computed column returns a composite value for each record in project_manager_label and the last related form_change if it exists
  """
  projectManagerFormChangesByLabel(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): ManagerFormChangesByLabelCompositeReturnsConnection!

  """Unique ID for the project revision"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A condition to be used against `ProjectRevision` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectRevisionCondition {
  """Checks for equality with the object’s `changeStatus` field."""
  changeStatus: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input ProjectRevisionFilter {
  """Checks for all expressions in this list."""
  and: [ProjectRevisionFilter!]

  """Filter by the object’s `changeStatus` field."""
  changeStatus: StringFilter

  """Filter by the object’s `changeStatusByChangeStatus` relation."""
  changeStatusByChangeStatus: ChangeStatusFilter

  """A related `changeStatusByChangeStatus` exists."""
  changeStatusByChangeStatusExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `formChangesByProjectRevisionId` relation."""
  formChangesByProjectRevisionId: ProjectRevisionToManyFormChangeFilter

  """Some related `formChangesByProjectRevisionId` exist."""
  formChangesByProjectRevisionIdExist: Boolean

  """Negates the expression."""
  not: ProjectRevisionFilter

  """Checks for any expressions in this list."""
  or: [ProjectRevisionFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """A related `projectByProjectId` exists."""
  projectByProjectIdExists: Boolean

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FormChange` values, with data from `FormChange`.
"""
type ProjectRevisionFormChangesByFormChangeProjectRevisionIdAndPreviousFormChangeIdManyToManyConnection {
  """
  A list of edges which contains the `FormChange`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionFormChangesByFormChangeProjectRevisionIdAndPreviousFormChangeIdManyToManyEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection, with data from `FormChange`."""
type ProjectRevisionFormChangesByFormChangeProjectRevisionIdAndPreviousFormChangeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""
Represents an update to a `ProjectRevision`. Fields that are set will be updated.
"""
input ProjectRevisionPatch {
  """Foreign key to the status of the project revision"""
  changeStatus: String

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input ProjectRevisionToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""A connection to a list of `ProjectRevision` values."""
type ProjectRevisionsConnection {
  """
  A list of edges which contains the `ProjectRevision` and cursor to aid in pagination.
  """
  edges: [ProjectRevisionsEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectRevision` edge in the connection."""
type ProjectRevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""Methods to use when ordering `ProjectRevision`."""
enum ProjectRevisionsOrderBy {
  CHANGE_STATUS_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ACTIVE_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ACTIVE_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_BY_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_BY_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__STATUS_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__STATUS_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__TRIGGERS_COMMIT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__TRIGGERS_COMMIT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_BY_DESC
  CHANGE_STATUS_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FORM_CHANGES_BY_PROJECT_REVISION_ID__COUNT_ASC
  FORM_CHANGES_BY_PROJECT_REVISION_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about possible project statuses"""
type ProjectStatus implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectProjectStatusIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByProjectProjectStatusIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectProjectStatusIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByProjectProjectStatusIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectProjectStatusIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByProjectProjectStatusIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Description of the project_status"""
  description: String

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusFundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusFundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Name of the project_status"""
  name: String!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectProjectStatusIdAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusOperatorsByProjectProjectStatusIdAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the project_status"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByProjectProjectStatusIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByProjectProjectStatusIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByProjectProjectStatusIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `ProjectStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectStatusCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input ProjectStatusFilter {
  """Checks for all expressions in this list."""
  and: [ProjectStatusFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByProjectStatusId` relation.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId: ProjectStatusToManyFundingStreamRfpProjectStatusFilter

  """Some related `fundingStreamRfpProjectStatusesByProjectStatusId` exist."""
  fundingStreamRfpProjectStatusesByProjectStatusIdExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ProjectStatusFilter

  """Checks for any expressions in this list."""
  or: [ProjectStatusFilter!]

  """Filter by the object’s `projectsByProjectStatusId` relation."""
  projectsByProjectStatusId: ProjectStatusToManyProjectFilter

  """Some related `projectsByProjectStatusId` exist."""
  projectsByProjectStatusIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusFundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusFundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FundingStreamRfp` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusFundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type ProjectStatusFundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusFundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type ProjectStatusFundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""An input for mutations affecting `ProjectStatus`"""
input ProjectStatusInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the project_status"""
  description: String

  """Name of the project_status"""
  name: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type ProjectStatusOperatorsByProjectProjectStatusIdAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusOperatorsByProjectProjectStatusIdAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type ProjectStatusOperatorsByProjectProjectStatusIdAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `ProjectStatus`. Fields that are set will be updated.
"""
input ProjectStatusPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the project_status"""
  description: String

  """Name of the project_status"""
  name: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A filter to be used against many `FundingStreamRfpProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input ProjectStatusToManyFundingStreamRfpProjectStatusFilter {
  """
  Every related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpProjectStatusFilter

  """
  No related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpProjectStatusFilter

  """
  Some related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpProjectStatusFilter
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input ProjectStatusToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `ProjectStatus` values."""
type ProjectStatusesConnection {
  """
  A list of edges which contains the `ProjectStatus` and cursor to aid in pagination.
  """
  edges: [ProjectStatusesEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection."""
type ProjectStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""Methods to use when ordering `ProjectStatus`."""
enum ProjectStatusesOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_PROJECT_STATUS_ID__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_PROJECT_STATUS_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_PROJECT_STATUS_ID__COUNT_ASC
  PROJECTS_BY_PROJECT_STATUS_ID__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against many `ProjectContact` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyProjectContactFilter {
  """
  Every related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectContactFilter

  """
  No related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectContactFilter

  """
  Some related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectContactFilter
}

"""
A filter to be used against many `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyProjectManagerFilter {
  """
  Every related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerFilter

  """
  No related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerFilter

  """
  Some related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerFilter
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__UUID_ASC
  CIF_USER_BY_ARCHIVED_BY__UUID_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__UUID_ASC
  CIF_USER_BY_CREATED_BY__UUID_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__UUID_ASC
  CIF_USER_BY_UPDATED_BY__UUID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__FUNDING_STREAM_ID_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__FUNDING_STREAM_ID_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ID_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ID_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__YEAR_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__YEAR_DESC
  FUNDING_STREAM_RFP_ID_ASC
  FUNDING_STREAM_RFP_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OPERATOR_BY_OPERATOR_ID__ARCHIVED_AT_ASC
  OPERATOR_BY_OPERATOR_ID__ARCHIVED_AT_DESC
  OPERATOR_BY_OPERATOR_ID__ARCHIVED_BY_ASC
  OPERATOR_BY_OPERATOR_ID__ARCHIVED_BY_DESC
  OPERATOR_BY_OPERATOR_ID__BC_REGISTRY_ID_ASC
  OPERATOR_BY_OPERATOR_ID__BC_REGISTRY_ID_DESC
  OPERATOR_BY_OPERATOR_ID__CREATED_AT_ASC
  OPERATOR_BY_OPERATOR_ID__CREATED_AT_DESC
  OPERATOR_BY_OPERATOR_ID__CREATED_BY_ASC
  OPERATOR_BY_OPERATOR_ID__CREATED_BY_DESC
  OPERATOR_BY_OPERATOR_ID__ID_ASC
  OPERATOR_BY_OPERATOR_ID__ID_DESC
  OPERATOR_BY_OPERATOR_ID__LEGAL_NAME_ASC
  OPERATOR_BY_OPERATOR_ID__LEGAL_NAME_DESC
  OPERATOR_BY_OPERATOR_ID__OPERATOR_CODE_ASC
  OPERATOR_BY_OPERATOR_ID__OPERATOR_CODE_DESC
  OPERATOR_BY_OPERATOR_ID__SWRS_LEGAL_NAME_ASC
  OPERATOR_BY_OPERATOR_ID__SWRS_LEGAL_NAME_DESC
  OPERATOR_BY_OPERATOR_ID__SWRS_ORGANISATION_ID_ASC
  OPERATOR_BY_OPERATOR_ID__SWRS_ORGANISATION_ID_DESC
  OPERATOR_BY_OPERATOR_ID__SWRS_TRADE_NAME_ASC
  OPERATOR_BY_OPERATOR_ID__SWRS_TRADE_NAME_DESC
  OPERATOR_BY_OPERATOR_ID__TRADE_NAME_ASC
  OPERATOR_BY_OPERATOR_ID__TRADE_NAME_DESC
  OPERATOR_BY_OPERATOR_ID__UPDATED_AT_ASC
  OPERATOR_BY_OPERATOR_ID__UPDATED_AT_DESC
  OPERATOR_BY_OPERATOR_ID__UPDATED_BY_ASC
  OPERATOR_BY_OPERATOR_ID__UPDATED_BY_DESC
  OPERATOR_ID_ASC
  OPERATOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_CONTACTS_BY_PROJECT_ID__COUNT_ASC
  PROJECT_CONTACTS_BY_PROJECT_ID__COUNT_DESC
  PROJECT_MANAGERS_BY_PROJECT_ID__COUNT_ASC
  PROJECT_MANAGERS_BY_PROJECT_ID__COUNT_DESC
  PROJECT_NAME_ASC
  PROJECT_NAME_DESC
  PROJECT_REVISIONS_BY_PROJECT_ID__COUNT_ASC
  PROJECT_REVISIONS_BY_PROJECT_ID__COUNT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_DESC
  PROJECT_STATUS_ID_ASC
  PROJECT_STATUS_ID_DESC
  PROPOSAL_REFERENCE_ASC
  PROPOSAL_REFERENCE_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  TOTAL_FUNDING_REQUEST_ASC
  TOTAL_FUNDING_REQUEST_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """Reads and enables pagination through a set of `Attachment`."""
  allAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection

  """Reads and enables pagination through a set of `ChangeStatus`."""
  allChangeStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection

  """Reads and enables pagination through a set of `CifUser`."""
  allCifUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection

  """Reads and enables pagination through a set of `Contact`."""
  allContacts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection

  """Reads and enables pagination through a set of `FormChange`."""
  allFormChanges(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  allFundingStreamRfpProjectStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  allFundingStreamRfps(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection

  """Reads and enables pagination through a set of `FundingStream`."""
  allFundingStreams(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection

  """Reads and enables pagination through a set of `Operator`."""
  allOperators(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection

  """Reads and enables pagination through a set of `ProjectContact`."""
  allProjectContacts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  allProjectManagerLabels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection

  """Reads and enables pagination through a set of `ProjectManager`."""
  allProjectManagers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection

  """Reads and enables pagination through a set of `ProjectRevision`."""
  allProjectRevisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection

  """Reads and enables pagination through a set of `ProjectStatus`."""
  allProjectStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection

  """Reads and enables pagination through a set of `Project`."""
  allProjects(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection

  """Reads a single `Attachment` using its globally unique `ID`."""
  attachment(
    """
    The globally unique `ID` to be used in selecting a single `Attachment`.
    """
    id: ID!
  ): Attachment
  attachmentByRowId(rowId: Int!): Attachment

  """Reads a single `ChangeStatus` using its globally unique `ID`."""
  changeStatus(
    """
    The globally unique `ID` to be used in selecting a single `ChangeStatus`.
    """
    id: ID!
  ): ChangeStatus
  changeStatusByStatus(status: String!): ChangeStatus

  """Reads a single `CifUser` using its globally unique `ID`."""
  cifUser(
    """The globally unique `ID` to be used in selecting a single `CifUser`."""
    id: ID!
  ): CifUser
  cifUserByRowId(rowId: Int!): CifUser

  """Reads a single `Contact` using its globally unique `ID`."""
  contact(
    """The globally unique `ID` to be used in selecting a single `Contact`."""
    id: ID!
  ): Contact
  contactByRowId(rowId: Int!): Contact

  """Reads a single `FormChange` using its globally unique `ID`."""
  formChange(
    """
    The globally unique `ID` to be used in selecting a single `FormChange`.
    """
    id: ID!
  ): FormChange
  formChangeByRowId(rowId: Int!): FormChange

  """Reads a single `FundingStream` using its globally unique `ID`."""
  fundingStream(
    """
    The globally unique `ID` to be used in selecting a single `FundingStream`.
    """
    id: ID!
  ): FundingStream
  fundingStreamByRowId(rowId: Int!): FundingStream

  """Reads a single `FundingStreamRfp` using its globally unique `ID`."""
  fundingStreamRfp(
    """
    The globally unique `ID` to be used in selecting a single `FundingStreamRfp`.
    """
    id: ID!
  ): FundingStreamRfp
  fundingStreamRfpByRowId(rowId: Int!): FundingStreamRfp

  """
  Reads a single `FundingStreamRfpProjectStatus` using its globally unique `ID`.
  """
  fundingStreamRfpProjectStatus(
    """
    The globally unique `ID` to be used in selecting a single `FundingStreamRfpProjectStatus`.
    """
    id: ID!
  ): FundingStreamRfpProjectStatus
  fundingStreamRfpProjectStatusByRowId(rowId: Int!): FundingStreamRfpProjectStatus

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads a single `Operator` using its globally unique `ID`."""
  operator(
    """The globally unique `ID` to be used in selecting a single `Operator`."""
    id: ID!
  ): Operator
  operatorByRowId(rowId: Int!): Operator
  operatorBySwrsOrganisationId(swrsOrganisationId: Int!): Operator

  """
  returns a form_change for a table in the pending state for the current user, i.e. allows to resume the creation of any table row
  """
  pendingNewFormChangeForTable(tableName: String!): FormChange

  """
  returns a project_revision for a new project in the pending state for the current user, i.e. allows to resume a project creation
  """
  pendingNewProjectRevision: ProjectRevision

  """Reads a single `Project` using its globally unique `ID`."""
  project(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    id: ID!
  ): Project
  projectByProposalReference(proposalReference: String!): Project
  projectByRowId(rowId: Int!): Project

  """Reads a single `ProjectContact` using its globally unique `ID`."""
  projectContact(
    """
    The globally unique `ID` to be used in selecting a single `ProjectContact`.
    """
    id: ID!
  ): ProjectContact
  projectContactByRowId(rowId: Int!): ProjectContact

  """Reads a single `ProjectManager` using its globally unique `ID`."""
  projectManager(
    """
    The globally unique `ID` to be used in selecting a single `ProjectManager`.
    """
    id: ID!
  ): ProjectManager
  projectManagerByRowId(rowId: Int!): ProjectManager

  """Reads a single `ProjectManagerLabel` using its globally unique `ID`."""
  projectManagerLabel(
    """
    The globally unique `ID` to be used in selecting a single `ProjectManagerLabel`.
    """
    id: ID!
  ): ProjectManagerLabel
  projectManagerLabelByLabel(label: String!): ProjectManagerLabel
  projectManagerLabelByRowId(rowId: Int!): ProjectManagerLabel

  """Reads a single `ProjectRevision` using its globally unique `ID`."""
  projectRevision(
    """
    The globally unique `ID` to be used in selecting a single `ProjectRevision`.
    """
    id: ID!
  ): ProjectRevision
  projectRevisionByRowId(rowId: Int!): ProjectRevision

  """Reads a single `ProjectStatus` using its globally unique `ID`."""
  projectStatus(
    """
    The globally unique `ID` to be used in selecting a single `ProjectStatus`.
    """
    id: ID!
  ): ProjectStatus
  projectStatusByRowId(rowId: Int!): ProjectStatus

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  session: KeycloakJwt
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateAttachmentByRowId` mutation."""
input UpdateAttachmentByRowIdInput {
  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the attachment"""
  rowId: Int!
}

"""All input for the `updateAttachment` mutation."""
input UpdateAttachmentInput {
  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be updated.
  """
  id: ID!
}

"""The output of our update `Attachment` mutation."""
type UpdateAttachmentPayload {
  """The `Attachment` that was updated by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateChangeStatusByStatus` mutation."""
input UpdateChangeStatusByStatusInput {
  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!
}

"""All input for the `updateChangeStatus` mutation."""
input UpdateChangeStatusInput {
  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `ChangeStatus` mutation."""
type UpdateChangeStatusPayload {
  """The `ChangeStatus` that was updated by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCifUserByRowId` mutation."""
input UpdateCifUserByRowIdInput {
  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateCifUser` mutation."""
input UpdateCifUserInput {
  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be updated.
  """
  id: ID!
}

"""The output of our update `CifUser` mutation."""
type UpdateCifUserPayload {
  """The `CifUser` that was updated by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFormChangeByRowId` mutation."""
input UpdateFormChangeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormChange` being updated.
  """
  formChangePatch: FormChangePatch!

  """Unique ID for the form_change"""
  rowId: Int!
}

"""All input for the `updateFormChange` mutation."""
input UpdateFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormChange` being updated.
  """
  formChangePatch: FormChangePatch!

  """
  The globally unique `ID` which will identify a single `FormChange` to be updated.
  """
  id: ID!
}

"""The output of our update `FormChange` mutation."""
type UpdateFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FormChange` that was updated by this mutation."""
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFundingStreamByRowId` mutation."""
input UpdateFundingStreamByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStream` being updated.
  """
  fundingStreamPatch: FundingStreamPatch!

  """Unique ID for the funding_stream"""
  rowId: Int!
}

"""All input for the `updateFundingStream` mutation."""
input UpdateFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStream` being updated.
  """
  fundingStreamPatch: FundingStreamPatch!

  """
  The globally unique `ID` which will identify a single `FundingStream` to be updated.
  """
  id: ID!
}

"""The output of our update `FundingStream` mutation."""
type UpdateFundingStreamPayload {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FundingStream` that was updated by this mutation."""
  fundingStream: FundingStream

  """An edge for our `FundingStream`. May be used by Relay 1."""
  fundingStreamEdge(
    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFundingStreamRfpByRowId` mutation."""
input UpdateFundingStreamRfpByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamRfp` being updated.
  """
  fundingStreamRfpPatch: FundingStreamRfpPatch!

  """Unique ID for the funding_stream_rfp"""
  rowId: Int!
}

"""All input for the `updateFundingStreamRfp` mutation."""
input UpdateFundingStreamRfpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamRfp` being updated.
  """
  fundingStreamRfpPatch: FundingStreamRfpPatch!

  """
  The globally unique `ID` which will identify a single `FundingStreamRfp` to be updated.
  """
  id: ID!
}

"""The output of our update `FundingStreamRfp` mutation."""
type UpdateFundingStreamRfpPayload {
  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """The `FundingStreamRfp` that was updated by this mutation."""
  fundingStreamRfp: FundingStreamRfp

  """An edge for our `FundingStreamRfp`. May be used by Relay 1."""
  fundingStreamRfpEdge(
    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateFundingStreamRfpProjectStatusByRowId` mutation.
"""
input UpdateFundingStreamRfpProjectStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamRfpProjectStatus` being updated.
  """
  fundingStreamRfpProjectStatusPatch: FundingStreamRfpProjectStatusPatch!

  """Primary key for funding_stream_rfp_project_status table"""
  rowId: Int!
}

"""All input for the `updateFundingStreamRfpProjectStatus` mutation."""
input UpdateFundingStreamRfpProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamRfpProjectStatus` being updated.
  """
  fundingStreamRfpProjectStatusPatch: FundingStreamRfpProjectStatusPatch!

  """
  The globally unique `ID` which will identify a single `FundingStreamRfpProjectStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `FundingStreamRfpProjectStatus` mutation."""
type UpdateFundingStreamRfpProjectStatusPayload {
  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FundingStreamRfp` that is related to this `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """The `FundingStreamRfpProjectStatus` that was updated by this mutation."""
  fundingStreamRfpProjectStatus: FundingStreamRfpProjectStatus

  """
  An edge for our `FundingStreamRfpProjectStatus`. May be used by Relay 1.
  """
  fundingStreamRfpProjectStatusEdge(
    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesEdge

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamRfpProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectContactByRowId` mutation."""
input UpdateProjectContactByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectContact` being updated.
  """
  projectContactPatch: ProjectContactPatch!

  """Unique ID for the project contact record"""
  rowId: Int!
}

"""All input for the `updateProjectContact` mutation."""
input UpdateProjectContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectContact` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectContact` being updated.
  """
  projectContactPatch: ProjectContactPatch!
}

"""The output of our update `ProjectContact` mutation."""
type UpdateProjectContactPayload {
  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Contact` that is related to this `ProjectContact`."""
  contactByContactId: Contact

  """Reads a single `Project` that is related to this `ProjectContact`."""
  projectByProjectId: Project

  """The `ProjectContact` that was updated by this mutation."""
  projectContact: ProjectContact

  """An edge for our `ProjectContact`. May be used by Relay 1."""
  projectContactEdge(
    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectManagerByRowId` mutation."""
input UpdateProjectManagerByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectManager` being updated.
  """
  projectManagerPatch: ProjectManagerPatch!

  """Unique ID for the project manager record"""
  rowId: Int!
}

"""All input for the `updateProjectManager` mutation."""
input UpdateProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManager` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectManager` being updated.
  """
  projectManagerPatch: ProjectManagerPatch!
}

"""All input for the `updateProjectManagerLabelByLabel` mutation."""
input UpdateProjectManagerLabelByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The label that project managers can be assigned to a project as"""
  label: String!

  """
  An object where the defined keys will be set on the `ProjectManagerLabel` being updated.
  """
  projectManagerLabelPatch: ProjectManagerLabelPatch!
}

"""All input for the `updateProjectManagerLabelByRowId` mutation."""
input UpdateProjectManagerLabelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectManagerLabel` being updated.
  """
  projectManagerLabelPatch: ProjectManagerLabelPatch!

  """Unique ID for the project_manager_label record"""
  rowId: Int!
}

"""All input for the `updateProjectManagerLabel` mutation."""
input UpdateProjectManagerLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManagerLabel` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectManagerLabel` being updated.
  """
  projectManagerLabelPatch: ProjectManagerLabelPatch!
}

"""The output of our update `ProjectManagerLabel` mutation."""
type UpdateProjectManagerLabelPayload {
  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectManagerLabel` that was updated by this mutation."""
  projectManagerLabel: ProjectManagerLabel

  """An edge for our `ProjectManagerLabel`. May be used by Relay 1."""
  projectManagerLabelEdge(
    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `ProjectManager` mutation."""
type UpdateProjectManagerPayload {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """The `ProjectManager` that was updated by this mutation."""
  projectManager: ProjectManager

  """An edge for our `ProjectManager`. May be used by Relay 1."""
  projectManagerEdge(
    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectRevisionByRowId` mutation."""
input UpdateProjectRevisionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectRevision` being updated.
  """
  projectRevisionPatch: ProjectRevisionPatch!

  """Unique ID for the project revision"""
  rowId: Int!
}

"""All input for the `updateProjectRevision` mutation."""
input UpdateProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevision` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectRevision` being updated.
  """
  projectRevisionPatch: ProjectRevisionPatch!
}

"""The output of our update `ProjectRevision` mutation."""
type UpdateProjectRevisionPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project

  """The `ProjectRevision` that was updated by this mutation."""
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectStatusByRowId` mutation."""
input UpdateProjectStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectStatus` being updated.
  """
  projectStatusPatch: ProjectStatusPatch!

  """Unique ID for the project_status"""
  rowId: Int!
}

"""All input for the `updateProjectStatus` mutation."""
input UpdateProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectStatus` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectStatus` being updated.
  """
  projectStatusPatch: ProjectStatusPatch!
}

"""The output of our update `ProjectStatus` mutation."""
type UpdateProjectStatusPayload {
  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectStatus` that was updated by this mutation."""
  projectStatus: ProjectStatus

  """An edge for our `ProjectStatus`. May be used by Relay 1."""
  projectStatusEdge(
    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
