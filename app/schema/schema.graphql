"""All input for the `addAdditionalFundingSourceToRevision` mutation."""
input AddAdditionalFundingSourceToRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int!
  sourceIndex: Int!
}

"""The output of our `addAdditionalFundingSourceToRevision` mutation."""
type AddAdditionalFundingSourceToRevisionPayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Form` that is related to this `FormChange`."""
  formByJsonSchemaName: Form
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `addContactToRevision` mutation."""
input AddContactToRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  contactId: Int
  contactIndex: Int!
  revisionId: Int!
}

"""The output of our `addContactToRevision` mutation."""
type AddContactToRevisionPayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Form` that is related to this `FormChange`."""
  formByJsonSchemaName: Form
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `addEmissionIntensityReportToRevision` mutation."""
input AddEmissionIntensityReportToRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int!
}

"""The output of our `addEmissionIntensityReportToRevision` mutation."""
type AddEmissionIntensityReportToRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
Table containing information about funding provided through sources other than CIF and the proponent; often needed for program review and data request purposes.
"""
type AdditionalFundingSource implements Node {
  """
  Reads a single `AdditionalFundingSourceStatus` that is related to this `AdditionalFundingSource`.
  """
  additionalFundingSourceStatusByStatus: AdditionalFundingSourceStatus

  """The amount of the additional funding source"""
  amount: BigFloat

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `Project` that is related to this `AdditionalFundingSource`.
  """
  projectByProjectId: Project

  """Foreign key to the project"""
  projectId: Int!

  """Unique ID for the additional funding source"""
  rowId: Int!

  """The source of the additional funding source"""
  source: String

  """The zero-based index of the source in the project"""
  sourceIndex: Int!

  """
  The status of the additional funding source request(e.g. awaiting approval, approved, denied)
  """
  status: String

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `AdditionalFundingSource` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input AdditionalFundingSourceCondition {
  """Checks for equality with the object’s `amount` field."""
  amount: BigFloat

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `source` field."""
  source: String

  """Checks for equality with the object’s `sourceIndex` field."""
  sourceIndex: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `AdditionalFundingSource` object types. All fields are combined with a logical ‘and.’
"""
input AdditionalFundingSourceFilter {
  """
  Filter by the object’s `additionalFundingSourceStatusByStatus` relation.
  """
  additionalFundingSourceStatusByStatus: AdditionalFundingSourceStatusFilter

  """A related `additionalFundingSourceStatusByStatus` exists."""
  additionalFundingSourceStatusByStatusExists: Boolean

  """Filter by the object’s `amount` field."""
  amount: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [AdditionalFundingSourceFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Negates the expression."""
  not: AdditionalFundingSourceFilter

  """Checks for any expressions in this list."""
  or: [AdditionalFundingSourceFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `source` field."""
  source: StringFilter

  """Filter by the object’s `sourceIndex` field."""
  sourceIndex: IntFilter

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `AdditionalFundingSource`"""
input AdditionalFundingSourceInput {
  """The amount of the additional funding source"""
  amount: BigFloat

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int!

  """The source of the additional funding source"""
  source: String

  """The zero-based index of the source in the project"""
  sourceIndex: Int!

  """
  The status of the additional funding source request(e.g. awaiting approval, approved, denied)
  """
  status: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `AdditionalFundingSource`. Fields that are set will be updated.
"""
input AdditionalFundingSourcePatch {
  """The amount of the additional funding source"""
  amount: BigFloat

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int

  """The source of the additional funding source"""
  source: String

  """The zero-based index of the source in the project"""
  sourceIndex: Int

  """
  The status of the additional funding source request(e.g. awaiting approval, approved, denied)
  """
  status: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""Lookup table for additional funding source statuses"""
type AdditionalFundingSourceStatus implements Node {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceStatusAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceStatusAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceStatusAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `Project`."""
  projectsByAdditionalFundingSourceStatusAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusProjectsByAdditionalFundingSourceStatusAndProjectIdManyToManyConnection!

  """The name of the status as the primary key"""
  statusName: String!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndArchivedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndCreatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type AdditionalFundingSourceStatusCifUsersByAdditionalFundingSourceStatusAndUpdatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A condition to be used against `AdditionalFundingSourceStatus` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input AdditionalFundingSourceStatusCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `statusName` field."""
  statusName: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `AdditionalFundingSourceStatus` object types. All fields are combined with a logical ‘and.’
"""
input AdditionalFundingSourceStatusFilter {
  """Filter by the object’s `additionalFundingSourcesByStatus` relation."""
  additionalFundingSourcesByStatus: AdditionalFundingSourceStatusToManyAdditionalFundingSourceFilter

  """Some related `additionalFundingSourcesByStatus` exist."""
  additionalFundingSourcesByStatusExist: Boolean

  """Checks for all expressions in this list."""
  and: [AdditionalFundingSourceStatusFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Negates the expression."""
  not: AdditionalFundingSourceStatusFilter

  """Checks for any expressions in this list."""
  or: [AdditionalFundingSourceStatusFilter!]

  """Filter by the object’s `statusName` field."""
  statusName: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `AdditionalFundingSourceStatus`"""
input AdditionalFundingSourceStatusInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the status as the primary key"""
  statusName: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `AdditionalFundingSourceStatus`. Fields that are set will be updated.
"""
input AdditionalFundingSourceStatusPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the status as the primary key"""
  statusName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `Project` values, with data from `AdditionalFundingSource`.
"""
type AdditionalFundingSourceStatusProjectsByAdditionalFundingSourceStatusAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [AdditionalFundingSourceStatusProjectsByAdditionalFundingSourceStatusAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""
A `Project` edge in the connection, with data from `AdditionalFundingSource`.
"""
type AdditionalFundingSourceStatusProjectsByAdditionalFundingSourceStatusAndProjectIdManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A filter to be used against many `AdditionalFundingSource` object types. All fields are combined with a logical ‘and.’
"""
input AdditionalFundingSourceStatusToManyAdditionalFundingSourceFilter {
  """
  Every related `AdditionalFundingSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AdditionalFundingSourceFilter

  """
  No related `AdditionalFundingSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AdditionalFundingSourceFilter

  """
  Some related `AdditionalFundingSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AdditionalFundingSourceFilter
}

"""A connection to a list of `AdditionalFundingSourceStatus` values."""
type AdditionalFundingSourceStatusesConnection {
  """
  A list of edges which contains the `AdditionalFundingSourceStatus` and cursor to aid in pagination.
  """
  edges: [AdditionalFundingSourceStatusesEdge!]!

  """A list of `AdditionalFundingSourceStatus` objects."""
  nodes: [AdditionalFundingSourceStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AdditionalFundingSourceStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""A `AdditionalFundingSourceStatus` edge in the connection."""
type AdditionalFundingSourceStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AdditionalFundingSourceStatus` at the end of the edge."""
  node: AdditionalFundingSourceStatus
}

"""Methods to use when ordering `AdditionalFundingSourceStatus`."""
enum AdditionalFundingSourceStatusesOrderBy {
  ADDITIONAL_FUNDING_SOURCES_BY_STATUS__COUNT_ASC
  ADDITIONAL_FUNDING_SOURCES_BY_STATUS__COUNT_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_NAME_ASC
  STATUS_NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""A connection to a list of `AdditionalFundingSource` values."""
type AdditionalFundingSourcesConnection {
  """
  A list of edges which contains the `AdditionalFundingSource` and cursor to aid in pagination.
  """
  edges: [AdditionalFundingSourcesEdge!]!

  """A list of `AdditionalFundingSource` objects."""
  nodes: [AdditionalFundingSource]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AdditionalFundingSource` you could get from the connection.
  """
  totalCount: Int!
}

"""A `AdditionalFundingSource` edge in the connection."""
type AdditionalFundingSourcesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AdditionalFundingSource` at the end of the edge."""
  node: AdditionalFundingSource
}

"""Methods to use when ordering `AdditionalFundingSource`."""
enum AdditionalFundingSourcesOrderBy {
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__ARCHIVED_AT_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__ARCHIVED_AT_DESC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__ARCHIVED_BY_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__ARCHIVED_BY_DESC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__CREATED_AT_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__CREATED_AT_DESC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__CREATED_BY_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__CREATED_BY_DESC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__STATUS_NAME_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__STATUS_NAME_DESC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__UPDATED_AT_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__UPDATED_AT_DESC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__UPDATED_BY_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUS_BY_STATUS__UPDATED_BY_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_ASC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__COMMENTS_ASC
  PROJECT_BY_PROJECT_ID__COMMENTS_DESC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_ASC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SCORE_ASC
  PROJECT_BY_PROJECT_ID__SCORE_DESC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_ASC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  SOURCE_ASC
  SOURCE_DESC
  SOURCE_INDEX_ASC
  SOURCE_INDEX_DESC
  STATUS_ASC
  STATUS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Lookup table for amendment types"""
type AmendmentType implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the amendment type as the primary key"""
  name: String!

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByAmendmentType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectRevisionAmendmentTypeAmendmentTypeAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypeProjectRevisionsByProjectRevisionAmendmentTypeAmendmentTypeAndProjectRevisionIdManyToManyConnection!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type AmendmentTypeCifUsersByProjectRevisionAmendmentTypeAmendmentTypeAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A condition to be used against `AmendmentType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AmendmentTypeCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `AmendmentType` object types. All fields are combined with a logical ‘and.’
"""
input AmendmentTypeFilter {
  """Checks for all expressions in this list."""
  and: [AmendmentTypeFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: AmendmentTypeFilter

  """Checks for any expressions in this list."""
  or: [AmendmentTypeFilter!]

  """
  Filter by the object’s `projectRevisionAmendmentTypesByAmendmentType` relation.
  """
  projectRevisionAmendmentTypesByAmendmentType: AmendmentTypeToManyProjectRevisionAmendmentTypeFilter

  """Some related `projectRevisionAmendmentTypesByAmendmentType` exist."""
  projectRevisionAmendmentTypesByAmendmentTypeExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `AmendmentType`"""
input AmendmentTypeInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the amendment type as the primary key"""
  name: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `AmendmentType`. Fields that are set will be updated.
"""
input AmendmentTypePatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the amendment type as the primary key"""
  name: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectRevision` values, with data from `ProjectRevisionAmendmentType`.
"""
type AmendmentTypeProjectRevisionsByProjectRevisionAmendmentTypeAmendmentTypeAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [AmendmentTypeProjectRevisionsByProjectRevisionAmendmentTypeAmendmentTypeAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type AmendmentTypeProjectRevisionsByProjectRevisionAmendmentTypeAmendmentTypeAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A filter to be used against many `ProjectRevisionAmendmentType` object types. All fields are combined with a logical ‘and.’
"""
input AmendmentTypeToManyProjectRevisionAmendmentTypeFilter {
  """
  Every related `ProjectRevisionAmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionAmendmentTypeFilter

  """
  No related `ProjectRevisionAmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionAmendmentTypeFilter

  """
  Some related `ProjectRevisionAmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionAmendmentTypeFilter
}

"""A connection to a list of `AmendmentType` values."""
type AmendmentTypesConnection {
  """
  A list of edges which contains the `AmendmentType` and cursor to aid in pagination.
  """
  edges: [AmendmentTypesEdge!]!

  """A list of `AmendmentType` objects."""
  nodes: [AmendmentType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AmendmentType` you could get from the connection."""
  totalCount: Int!
}

"""A `AmendmentType` edge in the connection."""
type AmendmentTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AmendmentType` at the end of the edge."""
  node: AmendmentType
}

"""Methods to use when ordering `AmendmentType`."""
enum AmendmentTypesOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_AMENDMENT_TYPE__COUNT_ASC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_AMENDMENT_TYPE__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about uploaded attachments"""
type Attachment implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Description of the attachment"""
  description: String

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file size"""
  fileSize: String

  """Original uploaded file type"""
  fileType: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Project` that is related to this `Attachment`."""
  projectByProjectId: Project

  """
  The id of the project (cif.project.id) that the attachment was uploaded to
  """
  projectId: Int!

  """Reads a single `ProjectStatus` that is related to this `Attachment`."""
  projectStatusByProjectStatusId: ProjectStatus

  """
  The id of the project_status (cif.project_status.id) that the attachment references
  """
  projectStatusId: Int

  """Unique ID for the attachment"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `Attachment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttachmentCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `file` field."""
  file: UUID

  """Checks for equality with the object’s `fileName` field."""
  fileName: String

  """Checks for equality with the object’s `fileSize` field."""
  fileSize: String

  """Checks for equality with the object’s `fileType` field."""
  fileType: String

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `projectStatusId` field."""
  projectStatusId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input AttachmentFilter {
  """Checks for all expressions in this list."""
  and: [AttachmentFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `file` field."""
  file: UUIDFilter

  """Filter by the object’s `fileName` field."""
  fileName: StringFilter

  """Filter by the object’s `fileSize` field."""
  fileSize: StringFilter

  """Filter by the object’s `fileType` field."""
  fileType: StringFilter

  """Negates the expression."""
  not: AttachmentFilter

  """Checks for any expressions in this list."""
  or: [AttachmentFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """Filter by the object’s `projectStatusByProjectStatusId` relation."""
  projectStatusByProjectStatusId: ProjectStatusFilter

  """A related `projectStatusByProjectStatusId` exists."""
  projectStatusByProjectStatusIdExists: Boolean

  """Filter by the object’s `projectStatusId` field."""
  projectStatusId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `Attachment`"""
input AttachmentInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the attachment"""
  description: String

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: Upload

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file size"""
  fileSize: String

  """Original uploaded file type"""
  fileType: String

  """
  The id of the project (cif.project.id) that the attachment was uploaded to
  """
  projectId: Int!

  """
  The id of the project_status (cif.project_status.id) that the attachment references
  """
  projectStatusId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `Attachment`. Fields that are set will be updated.
"""
input AttachmentPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the attachment"""
  description: String

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: Upload

  """Original uploaded file name"""
  fileName: String

  """Original uploaded file size"""
  fileSize: String

  """Original uploaded file type"""
  fileType: String

  """
  The id of the project (cif.project.id) that the attachment was uploaded to
  """
  projectId: Int

  """
  The id of the project_status (cif.project_status.id) that the attachment references
  """
  projectStatusId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `Attachment` values."""
type AttachmentsConnection {
  """
  A list of edges which contains the `Attachment` and cursor to aid in pagination.
  """
  edges: [AttachmentsEdge!]!

  """A list of `Attachment` objects."""
  nodes: [Attachment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Attachment` you could get from the connection."""
  totalCount: Int!
}

"""A `Attachment` edge in the connection."""
type AttachmentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Attachment` at the end of the edge."""
  node: Attachment
}

"""Methods to use when ordering `Attachment`."""
enum AttachmentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FILE_ASC
  FILE_DESC
  FILE_NAME_ASC
  FILE_NAME_DESC
  FILE_SIZE_ASC
  FILE_SIZE_DESC
  FILE_TYPE_ASC
  FILE_TYPE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_ASC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__COMMENTS_ASC
  PROJECT_BY_PROJECT_ID__COMMENTS_DESC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_ASC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SCORE_ASC
  PROJECT_BY_PROJECT_ID__SCORE_DESC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_ASC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_DESC
  PROJECT_STATUS_ID_ASC
  PROJECT_STATUS_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value."""
  equalTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """Not included in the specified list."""
  notIn: [BigFloat!]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""Table containing the different status that a change can have"""
type ChangeStatus implements Node {
  """Whether that status is active"""
  active: Boolean

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeChangeStatusAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeChangeStatusAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionChangeStatusAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionChangeStatusAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByFormChangeChangeStatusAndPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusFormChangesByFormChangeChangeStatusAndPreviousFormChangeIdManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormChangeChangeStatusAndJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusFormsByFormChangeChangeStatusAndJsonSchemaNameManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeChangeStatusAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionChangeStatusAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByProjectRevisionChangeStatusAndRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusRevisionStatusesByProjectRevisionChangeStatusAndRevisionStatusManyToManyConnection!

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByProjectRevisionChangeStatusAndRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusRevisionTypesByProjectRevisionChangeStatusAndRevisionTypeManyToManyConnection!

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ChangeStatusCifUsersByFormChangeChangeStatusAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ChangeStatusCifUsersByFormChangeChangeStatusAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusCifUsersByProjectRevisionChangeStatusAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A condition to be used against `ChangeStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChangeStatusCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `status` field."""
  status: String

  """Checks for equality with the object’s `triggersCommit` field."""
  triggersCommit: Boolean

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ChangeStatus` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusFilter {
  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Checks for all expressions in this list."""
  and: [ChangeStatusFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `formChangesByChangeStatus` relation."""
  formChangesByChangeStatus: ChangeStatusToManyFormChangeFilter

  """Some related `formChangesByChangeStatus` exist."""
  formChangesByChangeStatusExist: Boolean

  """Negates the expression."""
  not: ChangeStatusFilter

  """Checks for any expressions in this list."""
  or: [ChangeStatusFilter!]

  """Filter by the object’s `projectRevisionsByChangeStatus` relation."""
  projectRevisionsByChangeStatus: ChangeStatusToManyProjectRevisionFilter

  """Some related `projectRevisionsByChangeStatus` exist."""
  projectRevisionsByChangeStatusExist: Boolean

  """Filter by the object’s `status` field."""
  status: StringFilter

  """Filter by the object’s `triggersCommit` field."""
  triggersCommit: BooleanFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FormChange` values, with data from `FormChange`.
"""
type ChangeStatusFormChangesByFormChangeChangeStatusAndPreviousFormChangeIdManyToManyConnection {
  """
  A list of edges which contains the `FormChange`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusFormChangesByFormChangeChangeStatusAndPreviousFormChangeIdManyToManyEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection, with data from `FormChange`."""
type ChangeStatusFormChangesByFormChangeChangeStatusAndPreviousFormChangeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""A connection to a list of `Form` values, with data from `FormChange`."""
type ChangeStatusFormsByFormChangeChangeStatusAndJsonSchemaNameManyToManyConnection {
  """
  A list of edges which contains the `Form`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusFormsByFormChangeChangeStatusAndJsonSchemaNameManyToManyEdge!]!

  """A list of `Form` objects."""
  nodes: [Form]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormChange`."""
type ChangeStatusFormsByFormChangeChangeStatusAndJsonSchemaNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `Form` at the end of the edge."""
  node: Form
}

"""An input for mutations affecting `ChangeStatus`"""
input ChangeStatusInput {
  """Whether that status is active"""
  active: Boolean

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ChangeStatus`. Fields that are set will be updated.
"""
input ChangeStatusPatch {
  """Whether that status is active"""
  active: Boolean

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type ChangeStatusProjectRevisionsByFormChangeChangeStatusAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type ChangeStatusProjectsByProjectRevisionChangeStatusAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `RevisionStatus` values, with data from `ProjectRevision`.
"""
type ChangeStatusRevisionStatusesByProjectRevisionChangeStatusAndRevisionStatusManyToManyConnection {
  """
  A list of edges which contains the `RevisionStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusRevisionStatusesByProjectRevisionChangeStatusAndRevisionStatusManyToManyEdge!]!

  """A list of `RevisionStatus` objects."""
  nodes: [RevisionStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionStatus` edge in the connection, with data from `ProjectRevision`.
"""
type ChangeStatusRevisionStatusesByProjectRevisionChangeStatusAndRevisionStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionStatus` at the end of the edge."""
  node: RevisionStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `RevisionType` values, with data from `ProjectRevision`.
"""
type ChangeStatusRevisionTypesByProjectRevisionChangeStatusAndRevisionTypeManyToManyConnection {
  """
  A list of edges which contains the `RevisionType`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ChangeStatusRevisionTypesByProjectRevisionChangeStatusAndRevisionTypeManyToManyEdge!]!

  """A list of `RevisionType` objects."""
  nodes: [RevisionType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionType` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionType` edge in the connection, with data from `ProjectRevision`.
"""
type ChangeStatusRevisionTypesByProjectRevisionChangeStatusAndRevisionTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionType` at the end of the edge."""
  node: RevisionType

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input ChangeStatusToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""A connection to a list of `ChangeStatus` values."""
type ChangeStatusesConnection {
  """
  A list of edges which contains the `ChangeStatus` and cursor to aid in pagination.
  """
  edges: [ChangeStatusesEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection."""
type ChangeStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""Methods to use when ordering `ChangeStatus`."""
enum ChangeStatusesOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FORM_CHANGES_BY_CHANGE_STATUS__COUNT_ASC
  FORM_CHANGES_BY_CHANGE_STATUS__COUNT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_REVISIONS_BY_CHANGE_STATUS__COUNT_ASC
  PROJECT_REVISIONS_BY_CHANGE_STATUS__COUNT_DESC
  STATUS_ASC
  STATUS_DESC
  TRIGGERS_COMMIT_ASC
  TRIGGERS_COMMIT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about the application's users """
type CifUser implements Node {
  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByAdditionalFundingSourceArchivedByAndStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceArchivedByAndStatusManyToManyConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByAdditionalFundingSourceCreatedByAndStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceCreatedByAndStatusManyToManyConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByAdditionalFundingSourceUpdatedByAndStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceUpdatedByAndStatusManyToManyConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """
  Boolean value determines whether a legacy user can be updated. Legacy users may be updated only once.
  """
  allowSubUpdate: Boolean!

  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection!

  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection!

  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByProjectRevisionAmendmentTypeArchivedByAndAmendmentType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserAmendmentTypesByProjectRevisionAmendmentTypeArchivedByAndAmendmentTypeManyToManyConnection!

  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByProjectRevisionAmendmentTypeCreatedByAndAmendmentType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserAmendmentTypesByProjectRevisionAmendmentTypeCreatedByAndAmendmentTypeManyToManyConnection!

  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByProjectRevisionAmendmentTypeUpdatedByAndAmendmentType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserAmendmentTypesByProjectRevisionAmendmentTypeUpdatedByAndAmendmentTypeManyToManyConnection!

  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection!

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeCreatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeUpdatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionCreatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionUpdatedByAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceStatusArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceStatusArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceStatusArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceStatusArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceStatusCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceStatusCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceStatusUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceStatusUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAdditionalFundingSourceUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAmendmentTypeArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAmendmentTypeArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAmendmentTypeArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAmendmentTypeArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAmendmentTypeCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAmendmentTypeCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAmendmentTypeCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAmendmentTypeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAmendmentTypeUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAmendmentTypeUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAmendmentTypeUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAmendmentTypeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByChangeStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCifUserUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByContactUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByContactUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityPaymentPercentArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityPaymentPercentArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityPaymentPercentArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityPaymentPercentArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityPaymentPercentCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityPaymentPercentCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityPaymentPercentCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityPaymentPercentCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityPaymentPercentUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityPaymentPercentUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityPaymentPercentUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityPaymentPercentUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityReportArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityReportArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityReportArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityReportArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityReportCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityReportCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityReportCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityReportCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityReportUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityReportUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityReportUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByEmissionIntensityReportUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFormUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingParameterArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingParameterArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingParameterArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingParameterArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingParameterCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingParameterCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingParameterCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingParameterCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingParameterUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingParameterUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingParameterUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingParameterUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamRfpUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByMilestoneReportArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByMilestoneReportArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByMilestoneReportArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByMilestoneReportArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByMilestoneReportCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByMilestoneReportCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByMilestoneReportCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByMilestoneReportCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByMilestoneReportUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByMilestoneReportUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByMilestoneReportUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByMilestoneReportUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByOperatorUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByPaymentArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByPaymentArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByPaymentArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByPaymentArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByPaymentCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByPaymentCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByPaymentCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByPaymentCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByPaymentUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByPaymentUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByPaymentUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByPaymentUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectContactUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerArchivedByAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerArchivedByAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCifUserIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCifUserIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCifUserIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCifUserIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCreatedByAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerLabelUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerLabelUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerUpdatedByAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionAmendmentTypeArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionAmendmentTypeArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionAmendmentTypeCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionAmendmentTypeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionAmendmentTypeUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionAmendmentTypeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectTypeArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectTypeArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectTypeArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectTypeArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectTypeCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectTypeCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectTypeCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectTypeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectTypeUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectTypeUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectTypeUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectTypeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportTypeArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportTypeArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportTypeArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportTypeArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportTypeCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportTypeCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportTypeCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportTypeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportTypeUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportTypeUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportTypeUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportTypeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportingRequirementArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportingRequirementArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportingRequirementCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportingRequirementCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportingRequirementUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByReportingRequirementUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionStatusArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionStatusArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionStatusArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionStatusArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionStatusCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionStatusCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionStatusCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionStatusCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionStatusUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionStatusUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionStatusUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionStatusUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionTypeArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionTypeArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionTypeArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionTypeArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionTypeCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionTypeCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionTypeCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionTypeCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionTypeUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionTypeUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByRevisionTypeUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersByRevisionTypeUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersBySectorArchivedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersBySectorArchivedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersBySectorArchivedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersBySectorArchivedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersBySectorCreatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersBySectorCreatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersBySectorCreatedByAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersBySectorCreatedByAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersBySectorUpdatedByAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersBySectorUpdatedByAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersBySectorUpdatedByAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserCifUsersBySectorUpdatedByAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByProjectContactArchivedByAndContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserContactsByProjectContactArchivedByAndContactIdManyToManyConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByProjectContactCreatedByAndContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserContactsByProjectContactCreatedByAndContactIdManyToManyConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByProjectContactUpdatedByAndContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserContactsByProjectContactUpdatedByAndContactIdManyToManyConnection!

  """Reads and enables pagination through a set of `Contact`."""
  contactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """User's email address"""
  emailAddress: String

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """User's last name"""
  familyName: String

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByFormChangeCreatedByAndPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFormChangesByFormChangeCreatedByAndPreviousFormChangeIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByFormChangeUpdatedByAndPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFormChangesByFormChangeUpdatedByAndPreviousFormChangeIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormChangeCreatedByAndJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFormsByFormChangeCreatedByAndJsonSchemaNameManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormChangeUpdatedByAndJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFormsByFormChangeUpdatedByAndJsonSchemaNameManyToManyConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection!

  """Displays a cif_user as: given_name family_name"""
  fullName: String

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectArchivedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByProjectArchivedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectCreatedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByProjectCreatedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByFundingStreamRfpArchivedByAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamsByFundingStreamRfpArchivedByAndFundingStreamIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByFundingStreamRfpCreatedByAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamsByFundingStreamRfpCreatedByAndFundingStreamIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserFundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """User's first name"""
  givenName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectArchivedByAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserOperatorsByProjectArchivedByAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectCreatedByAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectUpdatedByAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeCreatedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeUpdatedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectRevisionAmendmentTypeArchivedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByProjectRevisionAmendmentTypeArchivedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectRevisionAmendmentTypeCreatedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByProjectRevisionAmendmentTypeCreatedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectRevisionAmendmentTypeUpdatedByAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectRevisionsByProjectRevisionAmendmentTypeUpdatedByAndProjectRevisionIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByAttachmentArchivedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByAttachmentArchivedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByAttachmentCreatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByAttachmentCreatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByAttachmentUpdatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByAttachmentUpdatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectArchivedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByProjectArchivedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectCreatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByProjectCreatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectUpdatedByAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectStatusesByProjectUpdatedByAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByProjectArchivedByAndProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectTypesByProjectArchivedByAndProjectTypeManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByProjectCreatedByAndProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectTypesByProjectCreatedByAndProjectTypeManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByProjectUpdatedByAndProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectTypesByProjectUpdatedByAndProjectTypeManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByAdditionalFundingSourceArchivedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByAdditionalFundingSourceArchivedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByAdditionalFundingSourceCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByAdditionalFundingSourceCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByAdditionalFundingSourceUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByAdditionalFundingSourceUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByAttachmentArchivedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByAttachmentArchivedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByAttachmentCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByAttachmentCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByAttachmentUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByAttachmentUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingParameterArchivedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByFundingParameterArchivedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingParameterCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByFundingParameterCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingParameterUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByFundingParameterUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectContactArchivedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectContactArchivedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectContactCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectContactCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectContactUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectContactUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerArchivedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerArchivedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerCifUserIdAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByReportingRequirementArchivedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByReportingRequirementArchivedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByReportingRequirementCreatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByReportingRequirementCreatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByReportingRequirementUpdatedByAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserProjectsByReportingRequirementUpdatedByAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection!

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection!

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByReportingRequirementArchivedByAndReportType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportTypesByReportingRequirementArchivedByAndReportTypeManyToManyConnection!

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByReportingRequirementCreatedByAndReportType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportTypesByReportingRequirementCreatedByAndReportTypeManyToManyConnection!

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByReportingRequirementUpdatedByAndReportType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportTypesByReportingRequirementUpdatedByAndReportTypeManyToManyConnection!

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByEmissionIntensityReportArchivedByAndReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportingRequirementsByEmissionIntensityReportArchivedByAndReportingRequirementIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByEmissionIntensityReportCreatedByAndReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportingRequirementsByEmissionIntensityReportCreatedByAndReportingRequirementIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByEmissionIntensityReportUpdatedByAndReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportingRequirementsByEmissionIntensityReportUpdatedByAndReportingRequirementIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByMilestoneReportArchivedByAndReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportingRequirementsByMilestoneReportArchivedByAndReportingRequirementIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByMilestoneReportCreatedByAndReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportingRequirementsByMilestoneReportCreatedByAndReportingRequirementIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByMilestoneReportUpdatedByAndReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportingRequirementsByMilestoneReportUpdatedByAndReportingRequirementIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByPaymentArchivedByAndReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportingRequirementsByPaymentArchivedByAndReportingRequirementIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByPaymentCreatedByAndReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportingRequirementsByPaymentCreatedByAndReportingRequirementIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByPaymentUpdatedByAndReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserReportingRequirementsByPaymentUpdatedByAndReportingRequirementIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection!

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection!

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByProjectRevisionCreatedByAndRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserRevisionStatusesByProjectRevisionCreatedByAndRevisionStatusManyToManyConnection!

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByProjectRevisionUpdatedByAndRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserRevisionStatusesByProjectRevisionUpdatedByAndRevisionStatusManyToManyConnection!

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection!

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection!

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection!

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByProjectRevisionCreatedByAndRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserRevisionTypesByProjectRevisionCreatedByAndRevisionTypeManyToManyConnection!

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByProjectRevisionUpdatedByAndRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserRevisionTypesByProjectRevisionUpdatedByAndRevisionTypeManyToManyConnection!

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection!

  """Unique ID for the user"""
  rowId: Int!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByProjectArchivedByAndSectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserSectorsByProjectArchivedByAndSectorNameManyToManyConnection!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByProjectCreatedByAndSectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserSectorsByProjectCreatedByAndSectorNameManyToManyConnection!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByProjectUpdatedByAndSectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUserSectorsByProjectUpdatedByAndSectorNameManyToManyConnection!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection!

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `AdditionalFundingSourceStatus` values, with data from `AdditionalFundingSource`.
"""
type CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceArchivedByAndStatusManyToManyConnection {
  """
  A list of edges which contains the `AdditionalFundingSourceStatus`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceArchivedByAndStatusManyToManyEdge!]!

  """A list of `AdditionalFundingSourceStatus` objects."""
  nodes: [AdditionalFundingSourceStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AdditionalFundingSourceStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `AdditionalFundingSourceStatus` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceArchivedByAndStatusManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AdditionalFundingSourceStatus` at the end of the edge."""
  node: AdditionalFundingSourceStatus
}

"""
A connection to a list of `AdditionalFundingSourceStatus` values, with data from `AdditionalFundingSource`.
"""
type CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceCreatedByAndStatusManyToManyConnection {
  """
  A list of edges which contains the `AdditionalFundingSourceStatus`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceCreatedByAndStatusManyToManyEdge!]!

  """A list of `AdditionalFundingSourceStatus` objects."""
  nodes: [AdditionalFundingSourceStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AdditionalFundingSourceStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `AdditionalFundingSourceStatus` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceCreatedByAndStatusManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AdditionalFundingSourceStatus` at the end of the edge."""
  node: AdditionalFundingSourceStatus
}

"""
A connection to a list of `AdditionalFundingSourceStatus` values, with data from `AdditionalFundingSource`.
"""
type CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceUpdatedByAndStatusManyToManyConnection {
  """
  A list of edges which contains the `AdditionalFundingSourceStatus`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceUpdatedByAndStatusManyToManyEdge!]!

  """A list of `AdditionalFundingSourceStatus` objects."""
  nodes: [AdditionalFundingSourceStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AdditionalFundingSourceStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `AdditionalFundingSourceStatus` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserAdditionalFundingSourceStatusesByAdditionalFundingSourceUpdatedByAndStatusManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AdditionalFundingSourceStatus` at the end of the edge."""
  node: AdditionalFundingSourceStatus
}

"""
A connection to a list of `AmendmentType` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserAmendmentTypesByProjectRevisionAmendmentTypeArchivedByAndAmendmentTypeManyToManyConnection {
  """
  A list of edges which contains the `AmendmentType`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserAmendmentTypesByProjectRevisionAmendmentTypeArchivedByAndAmendmentTypeManyToManyEdge!]!

  """A list of `AmendmentType` objects."""
  nodes: [AmendmentType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AmendmentType` you could get from the connection."""
  totalCount: Int!
}

"""
A `AmendmentType` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserAmendmentTypesByProjectRevisionAmendmentTypeArchivedByAndAmendmentTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AmendmentType` at the end of the edge."""
  node: AmendmentType

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByAmendmentType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `AmendmentType` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserAmendmentTypesByProjectRevisionAmendmentTypeCreatedByAndAmendmentTypeManyToManyConnection {
  """
  A list of edges which contains the `AmendmentType`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserAmendmentTypesByProjectRevisionAmendmentTypeCreatedByAndAmendmentTypeManyToManyEdge!]!

  """A list of `AmendmentType` objects."""
  nodes: [AmendmentType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AmendmentType` you could get from the connection."""
  totalCount: Int!
}

"""
A `AmendmentType` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserAmendmentTypesByProjectRevisionAmendmentTypeCreatedByAndAmendmentTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AmendmentType` at the end of the edge."""
  node: AmendmentType

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByAmendmentType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `AmendmentType` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserAmendmentTypesByProjectRevisionAmendmentTypeUpdatedByAndAmendmentTypeManyToManyConnection {
  """
  A list of edges which contains the `AmendmentType`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserAmendmentTypesByProjectRevisionAmendmentTypeUpdatedByAndAmendmentTypeManyToManyEdge!]!

  """A list of `AmendmentType` objects."""
  nodes: [AmendmentType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AmendmentType` you could get from the connection."""
  totalCount: Int!
}

"""
A `AmendmentType` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserAmendmentTypesByProjectRevisionAmendmentTypeUpdatedByAndAmendmentTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AmendmentType` at the end of the edge."""
  node: AmendmentType

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByAmendmentType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type CifUserChangeStatusesByFormChangeCreatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type CifUserChangeStatusesByFormChangeUpdatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionCreatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserChangeStatusesByProjectRevisionUpdatedByAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceArchivedByAndCreatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceArchivedByAndUpdatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceCreatedByAndArchivedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceCreatedByAndUpdatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSourceStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceStatusArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusArchivedByAndCreatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSourceStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceStatusArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusArchivedByAndUpdatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSourceStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceStatusCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusCreatedByAndArchivedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSourceStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusCreatedByAndUpdatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSourceStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceStatusUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusUpdatedByAndArchivedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSourceStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSourceStatus`.
"""
type CifUserCifUsersByAdditionalFundingSourceStatusUpdatedByAndCreatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceUpdatedByAndArchivedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAdditionalFundingSourceUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserCifUsersByAdditionalFundingSourceUpdatedByAndCreatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AmendmentType`.
"""
type CifUserCifUsersByAmendmentTypeArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAmendmentTypeArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `AmendmentType`."""
type CifUserCifUsersByAmendmentTypeArchivedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AmendmentType`.
"""
type CifUserCifUsersByAmendmentTypeArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAmendmentTypeArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `AmendmentType`."""
type CifUserCifUsersByAmendmentTypeArchivedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AmendmentType`.
"""
type CifUserCifUsersByAmendmentTypeCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAmendmentTypeCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `AmendmentType`."""
type CifUserCifUsersByAmendmentTypeCreatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AmendmentType`.
"""
type CifUserCifUsersByAmendmentTypeCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAmendmentTypeCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `AmendmentType`."""
type CifUserCifUsersByAmendmentTypeCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AmendmentType`.
"""
type CifUserCifUsersByAmendmentTypeUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAmendmentTypeUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `AmendmentType`."""
type CifUserCifUsersByAmendmentTypeUpdatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AmendmentType`.
"""
type CifUserCifUsersByAmendmentTypeUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAmendmentTypeUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `AmendmentType`."""
type CifUserCifUsersByAmendmentTypeUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentArchivedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentArchivedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentCreatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentUpdatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type CifUserCifUsersByAttachmentUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusArchivedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusArchivedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusCreatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusUpdatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ChangeStatus`.
"""
type CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ChangeStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ChangeStatus`."""
type CifUserCifUsersByChangeStatusUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserArchivedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserArchivedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `CifUser`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `CifUser`."""
type CifUserCifUsersByCifUserUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactArchivedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactArchivedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactCreatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactCreatedByAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactUpdatedByAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Contact`."""
type CifUserCifUsersByContactUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Contact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByContactUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Contact`."""
type CifUserCifUsersByContactUpdatedByAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Contact`."""
  contactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityPaymentPercent`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityPaymentPercentArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityPaymentPercent`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityPaymentPercentArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityPaymentPercent`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityPaymentPercentCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityPaymentPercent`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityPaymentPercentCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityPaymentPercent`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityPaymentPercentUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityPaymentPercent`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityPaymentPercentUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityPaymentPercent`.
"""
type CifUserCifUsersByEmissionIntensityPaymentPercentUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityReportArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityReportArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityReportCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityReportCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityReportUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByEmissionIntensityReportUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityReport`.
"""
type CifUserCifUsersByEmissionIntensityReportUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Form`."""
type CifUserCifUsersByFormArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Form`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Form`."""
type CifUserCifUsersByFormArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Form`."""
  formsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Form`."""
type CifUserCifUsersByFormArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Form`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Form`."""
type CifUserCifUsersByFormArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Form`."""
  formsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type CifUserCifUsersByFormChangeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Form`."""
type CifUserCifUsersByFormCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Form`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Form`."""
type CifUserCifUsersByFormCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Form`."""
  formsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Form`."""
type CifUserCifUsersByFormCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Form`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Form`."""
type CifUserCifUsersByFormCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Form`."""
  formsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Form`."""
type CifUserCifUsersByFormUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Form`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Form`."""
type CifUserCifUsersByFormUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Form`."""
  formsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Form`."""
type CifUserCifUsersByFormUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Form`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFormUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Form`."""
type CifUserCifUsersByFormUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `Form`."""
  formsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingParameter`.
"""
type CifUserCifUsersByFundingParameterArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingParameterArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingParameter`."""
type CifUserCifUsersByFundingParameterArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingParameter`.
"""
type CifUserCifUsersByFundingParameterArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingParameterArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingParameter`."""
type CifUserCifUsersByFundingParameterArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingParameter`.
"""
type CifUserCifUsersByFundingParameterCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingParameterCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingParameter`."""
type CifUserCifUsersByFundingParameterCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingParameter`.
"""
type CifUserCifUsersByFundingParameterCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingParameterCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingParameter`."""
type CifUserCifUsersByFundingParameterCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingParameter`.
"""
type CifUserCifUsersByFundingParameterUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingParameterUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingParameter`."""
type CifUserCifUsersByFundingParameterUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingParameter`.
"""
type CifUserCifUsersByFundingParameterUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingParameterUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingParameter`."""
type CifUserCifUsersByFundingParameterUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserCifUsersByFundingStreamRfpProjectStatusUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type CifUserCifUsersByFundingStreamRfpUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamRfpUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type CifUserCifUsersByFundingStreamRfpUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStream`.
"""
type CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStream`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStream`."""
type CifUserCifUsersByFundingStreamUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStream`."""
  fundingStreamsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `MilestoneReport`.
"""
type CifUserCifUsersByMilestoneReportArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByMilestoneReportArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `MilestoneReport`."""
type CifUserCifUsersByMilestoneReportArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `MilestoneReport`.
"""
type CifUserCifUsersByMilestoneReportArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByMilestoneReportArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `MilestoneReport`."""
type CifUserCifUsersByMilestoneReportArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `MilestoneReport`.
"""
type CifUserCifUsersByMilestoneReportCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByMilestoneReportCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `MilestoneReport`."""
type CifUserCifUsersByMilestoneReportCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `MilestoneReport`.
"""
type CifUserCifUsersByMilestoneReportCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByMilestoneReportCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `MilestoneReport`."""
type CifUserCifUsersByMilestoneReportCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `MilestoneReport`.
"""
type CifUserCifUsersByMilestoneReportUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByMilestoneReportUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `MilestoneReport`."""
type CifUserCifUsersByMilestoneReportUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `MilestoneReport`.
"""
type CifUserCifUsersByMilestoneReportUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByMilestoneReportUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `MilestoneReport`."""
type CifUserCifUsersByMilestoneReportUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Operator`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Operator`."""
type CifUserCifUsersByOperatorUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Payment`."""
type CifUserCifUsersByPaymentArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByPaymentArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Payment`."""
type CifUserCifUsersByPaymentArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Payment`."""
type CifUserCifUsersByPaymentArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByPaymentArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Payment`."""
type CifUserCifUsersByPaymentArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Payment`."""
type CifUserCifUsersByPaymentCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByPaymentCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Payment`."""
type CifUserCifUsersByPaymentCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Payment`."""
type CifUserCifUsersByPaymentCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByPaymentCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Payment`."""
type CifUserCifUsersByPaymentCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Payment`."""
type CifUserCifUsersByPaymentUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByPaymentUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Payment`."""
type CifUserCifUsersByPaymentUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Payment`."""
type CifUserCifUsersByPaymentUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByPaymentUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Payment`."""
type CifUserCifUsersByPaymentUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type CifUserCifUsersByProjectContactUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectContactUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type CifUserCifUsersByProjectContactUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerArchivedByAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerArchivedByAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerArchivedByAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCifUserIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCifUserIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCifUserIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCifUserIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCifUserIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCreatedByAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManagerLabel`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerLabelUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectManagerLabel`.
"""
type CifUserCifUsersByProjectManagerLabelUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerUpdatedByAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type CifUserCifUsersByProjectManagerUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionAmendmentTypeArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionAmendmentTypeArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionAmendmentTypeCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionAmendmentTypeCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionAmendmentTypeUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionAmendmentTypeUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserCifUsersByProjectRevisionAmendmentTypeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type CifUserCifUsersByProjectRevisionUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectStatus`.
"""
type CifUserCifUsersByProjectStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectStatus`."""
type CifUserCifUsersByProjectStatusUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectType`.
"""
type CifUserCifUsersByProjectTypeArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectTypeArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectType`."""
type CifUserCifUsersByProjectTypeArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectType`.
"""
type CifUserCifUsersByProjectTypeArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectTypeArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectType`."""
type CifUserCifUsersByProjectTypeArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectType`.
"""
type CifUserCifUsersByProjectTypeCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectTypeCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectType`."""
type CifUserCifUsersByProjectTypeCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectType`.
"""
type CifUserCifUsersByProjectTypeCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectTypeCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectType`."""
type CifUserCifUsersByProjectTypeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectType`.
"""
type CifUserCifUsersByProjectTypeUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectTypeUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectType`."""
type CifUserCifUsersByProjectTypeUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectType`.
"""
type CifUserCifUsersByProjectTypeUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectTypeUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectType`."""
type CifUserCifUsersByProjectTypeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type CifUserCifUsersByProjectUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportType`.
"""
type CifUserCifUsersByReportTypeArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportTypeArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ReportType`."""
type CifUserCifUsersByReportTypeArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportType`.
"""
type CifUserCifUsersByReportTypeArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportTypeArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ReportType`."""
type CifUserCifUsersByReportTypeArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportType`.
"""
type CifUserCifUsersByReportTypeCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportTypeCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ReportType`."""
type CifUserCifUsersByReportTypeCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportType`.
"""
type CifUserCifUsersByReportTypeCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportTypeCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ReportType`."""
type CifUserCifUsersByReportTypeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportType`.
"""
type CifUserCifUsersByReportTypeUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportTypeUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ReportType`."""
type CifUserCifUsersByReportTypeUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportType`.
"""
type CifUserCifUsersByReportTypeUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportTypeUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ReportType`."""
type CifUserCifUsersByReportTypeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportingRequirementArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportingRequirementArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportingRequirementCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportingRequirementCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportingRequirementUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByReportingRequirementUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserCifUsersByReportingRequirementUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionStatus`.
"""
type CifUserCifUsersByRevisionStatusArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionStatusArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionStatus`."""
type CifUserCifUsersByRevisionStatusArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionStatus`.
"""
type CifUserCifUsersByRevisionStatusArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionStatusArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionStatus`."""
type CifUserCifUsersByRevisionStatusArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionStatus`.
"""
type CifUserCifUsersByRevisionStatusCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionStatusCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionStatus`."""
type CifUserCifUsersByRevisionStatusCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionStatus`.
"""
type CifUserCifUsersByRevisionStatusCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionStatusCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionStatus`."""
type CifUserCifUsersByRevisionStatusCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionStatus`.
"""
type CifUserCifUsersByRevisionStatusUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionStatusUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionStatus`."""
type CifUserCifUsersByRevisionStatusUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionStatus`.
"""
type CifUserCifUsersByRevisionStatusUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionStatusUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionStatus`."""
type CifUserCifUsersByRevisionStatusUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionType`.
"""
type CifUserCifUsersByRevisionTypeArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionTypeArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionType`."""
type CifUserCifUsersByRevisionTypeArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionType`.
"""
type CifUserCifUsersByRevisionTypeArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionTypeArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionType`."""
type CifUserCifUsersByRevisionTypeArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionType`.
"""
type CifUserCifUsersByRevisionTypeCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionTypeCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionType`."""
type CifUserCifUsersByRevisionTypeCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionType`.
"""
type CifUserCifUsersByRevisionTypeCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionTypeCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionType`."""
type CifUserCifUsersByRevisionTypeCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionType`.
"""
type CifUserCifUsersByRevisionTypeUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionTypeUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionType`."""
type CifUserCifUsersByRevisionTypeUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `RevisionType`.
"""
type CifUserCifUsersByRevisionTypeUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `RevisionType`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersByRevisionTypeUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `RevisionType`."""
type CifUserCifUsersByRevisionTypeUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection!
}

"""A connection to a list of `CifUser` values, with data from `Sector`."""
type CifUserCifUsersBySectorArchivedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Sector`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersBySectorArchivedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Sector`."""
type CifUserCifUsersBySectorArchivedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Sector`."""
type CifUserCifUsersBySectorArchivedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Sector`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersBySectorArchivedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Sector`."""
type CifUserCifUsersBySectorArchivedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Sector`."""
type CifUserCifUsersBySectorCreatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Sector`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersBySectorCreatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Sector`."""
type CifUserCifUsersBySectorCreatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Sector`."""
type CifUserCifUsersBySectorCreatedByAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Sector`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersBySectorCreatedByAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Sector`."""
type CifUserCifUsersBySectorCreatedByAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Sector`."""
type CifUserCifUsersBySectorUpdatedByAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Sector`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersBySectorUpdatedByAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Sector`."""
type CifUserCifUsersBySectorUpdatedByAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Sector`."""
type CifUserCifUsersBySectorUpdatedByAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Sector`, and the cursor to aid in pagination.
  """
  edges: [CifUserCifUsersBySectorUpdatedByAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Sector`."""
type CifUserCifUsersBySectorUpdatedByAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection!
}

"""
A condition to be used against `CifUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CifUserCondition {
  """Checks for equality with the object’s `allowSubUpdate` field."""
  allowSubUpdate: Boolean

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `emailAddress` field."""
  emailAddress: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `sessionSub` field."""
  sessionSub: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A connection to a list of `Contact` values, with data from `ProjectContact`.
"""
type CifUserContactsByProjectContactArchivedByAndContactIdManyToManyConnection {
  """
  A list of edges which contains the `Contact`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserContactsByProjectContactArchivedByAndContactIdManyToManyEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection, with data from `ProjectContact`."""
type CifUserContactsByProjectContactArchivedByAndContactIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Contact` values, with data from `ProjectContact`.
"""
type CifUserContactsByProjectContactCreatedByAndContactIdManyToManyConnection {
  """
  A list of edges which contains the `Contact`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserContactsByProjectContactCreatedByAndContactIdManyToManyEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection, with data from `ProjectContact`."""
type CifUserContactsByProjectContactCreatedByAndContactIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Contact` values, with data from `ProjectContact`.
"""
type CifUserContactsByProjectContactUpdatedByAndContactIdManyToManyConnection {
  """
  A list of edges which contains the `Contact`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserContactsByProjectContactUpdatedByAndContactIdManyToManyEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection, with data from `ProjectContact`."""
type CifUserContactsByProjectContactUpdatedByAndContactIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A filter to be used against `CifUser` object types. All fields are combined with a logical ‘and.’
"""
input CifUserFilter {
  """
  Filter by the object’s `additionalFundingSourceStatusesByArchivedBy` relation.
  """
  additionalFundingSourceStatusesByArchivedBy: CifUserToManyAdditionalFundingSourceStatusFilter

  """Some related `additionalFundingSourceStatusesByArchivedBy` exist."""
  additionalFundingSourceStatusesByArchivedByExist: Boolean

  """
  Filter by the object’s `additionalFundingSourceStatusesByCreatedBy` relation.
  """
  additionalFundingSourceStatusesByCreatedBy: CifUserToManyAdditionalFundingSourceStatusFilter

  """Some related `additionalFundingSourceStatusesByCreatedBy` exist."""
  additionalFundingSourceStatusesByCreatedByExist: Boolean

  """
  Filter by the object’s `additionalFundingSourceStatusesByUpdatedBy` relation.
  """
  additionalFundingSourceStatusesByUpdatedBy: CifUserToManyAdditionalFundingSourceStatusFilter

  """Some related `additionalFundingSourceStatusesByUpdatedBy` exist."""
  additionalFundingSourceStatusesByUpdatedByExist: Boolean

  """
  Filter by the object’s `additionalFundingSourcesByArchivedBy` relation.
  """
  additionalFundingSourcesByArchivedBy: CifUserToManyAdditionalFundingSourceFilter

  """Some related `additionalFundingSourcesByArchivedBy` exist."""
  additionalFundingSourcesByArchivedByExist: Boolean

  """Filter by the object’s `additionalFundingSourcesByCreatedBy` relation."""
  additionalFundingSourcesByCreatedBy: CifUserToManyAdditionalFundingSourceFilter

  """Some related `additionalFundingSourcesByCreatedBy` exist."""
  additionalFundingSourcesByCreatedByExist: Boolean

  """Filter by the object’s `additionalFundingSourcesByUpdatedBy` relation."""
  additionalFundingSourcesByUpdatedBy: CifUserToManyAdditionalFundingSourceFilter

  """Some related `additionalFundingSourcesByUpdatedBy` exist."""
  additionalFundingSourcesByUpdatedByExist: Boolean

  """Filter by the object’s `allowSubUpdate` field."""
  allowSubUpdate: BooleanFilter

  """Filter by the object’s `amendmentTypesByArchivedBy` relation."""
  amendmentTypesByArchivedBy: CifUserToManyAmendmentTypeFilter

  """Some related `amendmentTypesByArchivedBy` exist."""
  amendmentTypesByArchivedByExist: Boolean

  """Filter by the object’s `amendmentTypesByCreatedBy` relation."""
  amendmentTypesByCreatedBy: CifUserToManyAmendmentTypeFilter

  """Some related `amendmentTypesByCreatedBy` exist."""
  amendmentTypesByCreatedByExist: Boolean

  """Filter by the object’s `amendmentTypesByUpdatedBy` relation."""
  amendmentTypesByUpdatedBy: CifUserToManyAmendmentTypeFilter

  """Some related `amendmentTypesByUpdatedBy` exist."""
  amendmentTypesByUpdatedByExist: Boolean

  """Checks for all expressions in this list."""
  and: [CifUserFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `attachmentsByArchivedBy` relation."""
  attachmentsByArchivedBy: CifUserToManyAttachmentFilter

  """Some related `attachmentsByArchivedBy` exist."""
  attachmentsByArchivedByExist: Boolean

  """Filter by the object’s `attachmentsByCreatedBy` relation."""
  attachmentsByCreatedBy: CifUserToManyAttachmentFilter

  """Some related `attachmentsByCreatedBy` exist."""
  attachmentsByCreatedByExist: Boolean

  """Filter by the object’s `attachmentsByUpdatedBy` relation."""
  attachmentsByUpdatedBy: CifUserToManyAttachmentFilter

  """Some related `attachmentsByUpdatedBy` exist."""
  attachmentsByUpdatedByExist: Boolean

  """Filter by the object’s `changeStatusesByArchivedBy` relation."""
  changeStatusesByArchivedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByArchivedBy` exist."""
  changeStatusesByArchivedByExist: Boolean

  """Filter by the object’s `changeStatusesByCreatedBy` relation."""
  changeStatusesByCreatedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByCreatedBy` exist."""
  changeStatusesByCreatedByExist: Boolean

  """Filter by the object’s `changeStatusesByUpdatedBy` relation."""
  changeStatusesByUpdatedBy: CifUserToManyChangeStatusFilter

  """Some related `changeStatusesByUpdatedBy` exist."""
  changeStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `cifUsersByArchivedBy` relation."""
  cifUsersByArchivedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByArchivedBy` exist."""
  cifUsersByArchivedByExist: Boolean

  """Filter by the object’s `cifUsersByCreatedBy` relation."""
  cifUsersByCreatedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByCreatedBy` exist."""
  cifUsersByCreatedByExist: Boolean

  """Filter by the object’s `cifUsersByUpdatedBy` relation."""
  cifUsersByUpdatedBy: CifUserToManyCifUserFilter

  """Some related `cifUsersByUpdatedBy` exist."""
  cifUsersByUpdatedByExist: Boolean

  """Filter by the object’s `contactsByArchivedBy` relation."""
  contactsByArchivedBy: CifUserToManyContactFilter

  """Some related `contactsByArchivedBy` exist."""
  contactsByArchivedByExist: Boolean

  """Filter by the object’s `contactsByCreatedBy` relation."""
  contactsByCreatedBy: CifUserToManyContactFilter

  """Some related `contactsByCreatedBy` exist."""
  contactsByCreatedByExist: Boolean

  """Filter by the object’s `contactsByUpdatedBy` relation."""
  contactsByUpdatedBy: CifUserToManyContactFilter

  """Some related `contactsByUpdatedBy` exist."""
  contactsByUpdatedByExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `emailAddress` field."""
  emailAddress: StringFilter

  """
  Filter by the object’s `emissionIntensityPaymentPercentsByArchivedBy` relation.
  """
  emissionIntensityPaymentPercentsByArchivedBy: CifUserToManyEmissionIntensityPaymentPercentFilter

  """Some related `emissionIntensityPaymentPercentsByArchivedBy` exist."""
  emissionIntensityPaymentPercentsByArchivedByExist: Boolean

  """
  Filter by the object’s `emissionIntensityPaymentPercentsByCreatedBy` relation.
  """
  emissionIntensityPaymentPercentsByCreatedBy: CifUserToManyEmissionIntensityPaymentPercentFilter

  """Some related `emissionIntensityPaymentPercentsByCreatedBy` exist."""
  emissionIntensityPaymentPercentsByCreatedByExist: Boolean

  """
  Filter by the object’s `emissionIntensityPaymentPercentsByUpdatedBy` relation.
  """
  emissionIntensityPaymentPercentsByUpdatedBy: CifUserToManyEmissionIntensityPaymentPercentFilter

  """Some related `emissionIntensityPaymentPercentsByUpdatedBy` exist."""
  emissionIntensityPaymentPercentsByUpdatedByExist: Boolean

  """
  Filter by the object’s `emissionIntensityReportsByArchivedBy` relation.
  """
  emissionIntensityReportsByArchivedBy: CifUserToManyEmissionIntensityReportFilter

  """Some related `emissionIntensityReportsByArchivedBy` exist."""
  emissionIntensityReportsByArchivedByExist: Boolean

  """Filter by the object’s `emissionIntensityReportsByCreatedBy` relation."""
  emissionIntensityReportsByCreatedBy: CifUserToManyEmissionIntensityReportFilter

  """Some related `emissionIntensityReportsByCreatedBy` exist."""
  emissionIntensityReportsByCreatedByExist: Boolean

  """Filter by the object’s `emissionIntensityReportsByUpdatedBy` relation."""
  emissionIntensityReportsByUpdatedBy: CifUserToManyEmissionIntensityReportFilter

  """Some related `emissionIntensityReportsByUpdatedBy` exist."""
  emissionIntensityReportsByUpdatedByExist: Boolean

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `formChangesByCreatedBy` relation."""
  formChangesByCreatedBy: CifUserToManyFormChangeFilter

  """Some related `formChangesByCreatedBy` exist."""
  formChangesByCreatedByExist: Boolean

  """Filter by the object’s `formChangesByUpdatedBy` relation."""
  formChangesByUpdatedBy: CifUserToManyFormChangeFilter

  """Some related `formChangesByUpdatedBy` exist."""
  formChangesByUpdatedByExist: Boolean

  """Filter by the object’s `formsByArchivedBy` relation."""
  formsByArchivedBy: CifUserToManyFormFilter

  """Some related `formsByArchivedBy` exist."""
  formsByArchivedByExist: Boolean

  """Filter by the object’s `formsByCreatedBy` relation."""
  formsByCreatedBy: CifUserToManyFormFilter

  """Some related `formsByCreatedBy` exist."""
  formsByCreatedByExist: Boolean

  """Filter by the object’s `formsByUpdatedBy` relation."""
  formsByUpdatedBy: CifUserToManyFormFilter

  """Some related `formsByUpdatedBy` exist."""
  formsByUpdatedByExist: Boolean

  """Filter by the object’s `fullName` field."""
  fullName: StringFilter

  """Filter by the object’s `fundingParametersByArchivedBy` relation."""
  fundingParametersByArchivedBy: CifUserToManyFundingParameterFilter

  """Some related `fundingParametersByArchivedBy` exist."""
  fundingParametersByArchivedByExist: Boolean

  """Filter by the object’s `fundingParametersByCreatedBy` relation."""
  fundingParametersByCreatedBy: CifUserToManyFundingParameterFilter

  """Some related `fundingParametersByCreatedBy` exist."""
  fundingParametersByCreatedByExist: Boolean

  """Filter by the object’s `fundingParametersByUpdatedBy` relation."""
  fundingParametersByUpdatedBy: CifUserToManyFundingParameterFilter

  """Some related `fundingParametersByUpdatedBy` exist."""
  fundingParametersByUpdatedByExist: Boolean

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByArchivedBy` relation.
  """
  fundingStreamRfpProjectStatusesByArchivedBy: CifUserToManyFundingStreamRfpProjectStatusFilter

  """Some related `fundingStreamRfpProjectStatusesByArchivedBy` exist."""
  fundingStreamRfpProjectStatusesByArchivedByExist: Boolean

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByCreatedBy` relation.
  """
  fundingStreamRfpProjectStatusesByCreatedBy: CifUserToManyFundingStreamRfpProjectStatusFilter

  """Some related `fundingStreamRfpProjectStatusesByCreatedBy` exist."""
  fundingStreamRfpProjectStatusesByCreatedByExist: Boolean

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByUpdatedBy` relation.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy: CifUserToManyFundingStreamRfpProjectStatusFilter

  """Some related `fundingStreamRfpProjectStatusesByUpdatedBy` exist."""
  fundingStreamRfpProjectStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `fundingStreamRfpsByArchivedBy` relation."""
  fundingStreamRfpsByArchivedBy: CifUserToManyFundingStreamRfpFilter

  """Some related `fundingStreamRfpsByArchivedBy` exist."""
  fundingStreamRfpsByArchivedByExist: Boolean

  """Filter by the object’s `fundingStreamRfpsByCreatedBy` relation."""
  fundingStreamRfpsByCreatedBy: CifUserToManyFundingStreamRfpFilter

  """Some related `fundingStreamRfpsByCreatedBy` exist."""
  fundingStreamRfpsByCreatedByExist: Boolean

  """Filter by the object’s `fundingStreamRfpsByUpdatedBy` relation."""
  fundingStreamRfpsByUpdatedBy: CifUserToManyFundingStreamRfpFilter

  """Some related `fundingStreamRfpsByUpdatedBy` exist."""
  fundingStreamRfpsByUpdatedByExist: Boolean

  """Filter by the object’s `fundingStreamsByArchivedBy` relation."""
  fundingStreamsByArchivedBy: CifUserToManyFundingStreamFilter

  """Some related `fundingStreamsByArchivedBy` exist."""
  fundingStreamsByArchivedByExist: Boolean

  """Filter by the object’s `fundingStreamsByCreatedBy` relation."""
  fundingStreamsByCreatedBy: CifUserToManyFundingStreamFilter

  """Some related `fundingStreamsByCreatedBy` exist."""
  fundingStreamsByCreatedByExist: Boolean

  """Filter by the object’s `fundingStreamsByUpdatedBy` relation."""
  fundingStreamsByUpdatedBy: CifUserToManyFundingStreamFilter

  """Some related `fundingStreamsByUpdatedBy` exist."""
  fundingStreamsByUpdatedByExist: Boolean

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `keycloakJwtsBySub` relation."""
  keycloakJwtsBySub: CifUserToManyKeycloakJwtFilter

  """Some related `keycloakJwtsBySub` exist."""
  keycloakJwtsBySubExist: Boolean

  """Filter by the object’s `milestoneReportsByArchivedBy` relation."""
  milestoneReportsByArchivedBy: CifUserToManyMilestoneReportFilter

  """Some related `milestoneReportsByArchivedBy` exist."""
  milestoneReportsByArchivedByExist: Boolean

  """Filter by the object’s `milestoneReportsByCreatedBy` relation."""
  milestoneReportsByCreatedBy: CifUserToManyMilestoneReportFilter

  """Some related `milestoneReportsByCreatedBy` exist."""
  milestoneReportsByCreatedByExist: Boolean

  """Filter by the object’s `milestoneReportsByUpdatedBy` relation."""
  milestoneReportsByUpdatedBy: CifUserToManyMilestoneReportFilter

  """Some related `milestoneReportsByUpdatedBy` exist."""
  milestoneReportsByUpdatedByExist: Boolean

  """Negates the expression."""
  not: CifUserFilter

  """Filter by the object’s `operatorsByArchivedBy` relation."""
  operatorsByArchivedBy: CifUserToManyOperatorFilter

  """Some related `operatorsByArchivedBy` exist."""
  operatorsByArchivedByExist: Boolean

  """Filter by the object’s `operatorsByCreatedBy` relation."""
  operatorsByCreatedBy: CifUserToManyOperatorFilter

  """Some related `operatorsByCreatedBy` exist."""
  operatorsByCreatedByExist: Boolean

  """Filter by the object’s `operatorsByUpdatedBy` relation."""
  operatorsByUpdatedBy: CifUserToManyOperatorFilter

  """Some related `operatorsByUpdatedBy` exist."""
  operatorsByUpdatedByExist: Boolean

  """Checks for any expressions in this list."""
  or: [CifUserFilter!]

  """Filter by the object’s `paymentsByArchivedBy` relation."""
  paymentsByArchivedBy: CifUserToManyPaymentFilter

  """Some related `paymentsByArchivedBy` exist."""
  paymentsByArchivedByExist: Boolean

  """Filter by the object’s `paymentsByCreatedBy` relation."""
  paymentsByCreatedBy: CifUserToManyPaymentFilter

  """Some related `paymentsByCreatedBy` exist."""
  paymentsByCreatedByExist: Boolean

  """Filter by the object’s `paymentsByUpdatedBy` relation."""
  paymentsByUpdatedBy: CifUserToManyPaymentFilter

  """Some related `paymentsByUpdatedBy` exist."""
  paymentsByUpdatedByExist: Boolean

  """Filter by the object’s `projectContactsByArchivedBy` relation."""
  projectContactsByArchivedBy: CifUserToManyProjectContactFilter

  """Some related `projectContactsByArchivedBy` exist."""
  projectContactsByArchivedByExist: Boolean

  """Filter by the object’s `projectContactsByCreatedBy` relation."""
  projectContactsByCreatedBy: CifUserToManyProjectContactFilter

  """Some related `projectContactsByCreatedBy` exist."""
  projectContactsByCreatedByExist: Boolean

  """Filter by the object’s `projectContactsByUpdatedBy` relation."""
  projectContactsByUpdatedBy: CifUserToManyProjectContactFilter

  """Some related `projectContactsByUpdatedBy` exist."""
  projectContactsByUpdatedByExist: Boolean

  """Filter by the object’s `projectManagerLabelsByArchivedBy` relation."""
  projectManagerLabelsByArchivedBy: CifUserToManyProjectManagerLabelFilter

  """Some related `projectManagerLabelsByArchivedBy` exist."""
  projectManagerLabelsByArchivedByExist: Boolean

  """Filter by the object’s `projectManagerLabelsByCreatedBy` relation."""
  projectManagerLabelsByCreatedBy: CifUserToManyProjectManagerLabelFilter

  """Some related `projectManagerLabelsByCreatedBy` exist."""
  projectManagerLabelsByCreatedByExist: Boolean

  """Filter by the object’s `projectManagerLabelsByUpdatedBy` relation."""
  projectManagerLabelsByUpdatedBy: CifUserToManyProjectManagerLabelFilter

  """Some related `projectManagerLabelsByUpdatedBy` exist."""
  projectManagerLabelsByUpdatedByExist: Boolean

  """Filter by the object’s `projectManagersByArchivedBy` relation."""
  projectManagersByArchivedBy: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByArchivedBy` exist."""
  projectManagersByArchivedByExist: Boolean

  """Filter by the object’s `projectManagersByCifUserId` relation."""
  projectManagersByCifUserId: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByCifUserId` exist."""
  projectManagersByCifUserIdExist: Boolean

  """Filter by the object’s `projectManagersByCreatedBy` relation."""
  projectManagersByCreatedBy: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByCreatedBy` exist."""
  projectManagersByCreatedByExist: Boolean

  """Filter by the object’s `projectManagersByUpdatedBy` relation."""
  projectManagersByUpdatedBy: CifUserToManyProjectManagerFilter

  """Some related `projectManagersByUpdatedBy` exist."""
  projectManagersByUpdatedByExist: Boolean

  """
  Filter by the object’s `projectRevisionAmendmentTypesByArchivedBy` relation.
  """
  projectRevisionAmendmentTypesByArchivedBy: CifUserToManyProjectRevisionAmendmentTypeFilter

  """Some related `projectRevisionAmendmentTypesByArchivedBy` exist."""
  projectRevisionAmendmentTypesByArchivedByExist: Boolean

  """
  Filter by the object’s `projectRevisionAmendmentTypesByCreatedBy` relation.
  """
  projectRevisionAmendmentTypesByCreatedBy: CifUserToManyProjectRevisionAmendmentTypeFilter

  """Some related `projectRevisionAmendmentTypesByCreatedBy` exist."""
  projectRevisionAmendmentTypesByCreatedByExist: Boolean

  """
  Filter by the object’s `projectRevisionAmendmentTypesByUpdatedBy` relation.
  """
  projectRevisionAmendmentTypesByUpdatedBy: CifUserToManyProjectRevisionAmendmentTypeFilter

  """Some related `projectRevisionAmendmentTypesByUpdatedBy` exist."""
  projectRevisionAmendmentTypesByUpdatedByExist: Boolean

  """Filter by the object’s `projectRevisionsByCreatedBy` relation."""
  projectRevisionsByCreatedBy: CifUserToManyProjectRevisionFilter

  """Some related `projectRevisionsByCreatedBy` exist."""
  projectRevisionsByCreatedByExist: Boolean

  """Filter by the object’s `projectRevisionsByUpdatedBy` relation."""
  projectRevisionsByUpdatedBy: CifUserToManyProjectRevisionFilter

  """Some related `projectRevisionsByUpdatedBy` exist."""
  projectRevisionsByUpdatedByExist: Boolean

  """Filter by the object’s `projectStatusesByArchivedBy` relation."""
  projectStatusesByArchivedBy: CifUserToManyProjectStatusFilter

  """Some related `projectStatusesByArchivedBy` exist."""
  projectStatusesByArchivedByExist: Boolean

  """Filter by the object’s `projectStatusesByCreatedBy` relation."""
  projectStatusesByCreatedBy: CifUserToManyProjectStatusFilter

  """Some related `projectStatusesByCreatedBy` exist."""
  projectStatusesByCreatedByExist: Boolean

  """Filter by the object’s `projectStatusesByUpdatedBy` relation."""
  projectStatusesByUpdatedBy: CifUserToManyProjectStatusFilter

  """Some related `projectStatusesByUpdatedBy` exist."""
  projectStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `projectTypesByArchivedBy` relation."""
  projectTypesByArchivedBy: CifUserToManyProjectTypeFilter

  """Some related `projectTypesByArchivedBy` exist."""
  projectTypesByArchivedByExist: Boolean

  """Filter by the object’s `projectTypesByCreatedBy` relation."""
  projectTypesByCreatedBy: CifUserToManyProjectTypeFilter

  """Some related `projectTypesByCreatedBy` exist."""
  projectTypesByCreatedByExist: Boolean

  """Filter by the object’s `projectTypesByUpdatedBy` relation."""
  projectTypesByUpdatedBy: CifUserToManyProjectTypeFilter

  """Some related `projectTypesByUpdatedBy` exist."""
  projectTypesByUpdatedByExist: Boolean

  """Filter by the object’s `projectsByArchivedBy` relation."""
  projectsByArchivedBy: CifUserToManyProjectFilter

  """Some related `projectsByArchivedBy` exist."""
  projectsByArchivedByExist: Boolean

  """Filter by the object’s `projectsByCreatedBy` relation."""
  projectsByCreatedBy: CifUserToManyProjectFilter

  """Some related `projectsByCreatedBy` exist."""
  projectsByCreatedByExist: Boolean

  """Filter by the object’s `projectsByUpdatedBy` relation."""
  projectsByUpdatedBy: CifUserToManyProjectFilter

  """Some related `projectsByUpdatedBy` exist."""
  projectsByUpdatedByExist: Boolean

  """Filter by the object’s `reportTypesByArchivedBy` relation."""
  reportTypesByArchivedBy: CifUserToManyReportTypeFilter

  """Some related `reportTypesByArchivedBy` exist."""
  reportTypesByArchivedByExist: Boolean

  """Filter by the object’s `reportTypesByCreatedBy` relation."""
  reportTypesByCreatedBy: CifUserToManyReportTypeFilter

  """Some related `reportTypesByCreatedBy` exist."""
  reportTypesByCreatedByExist: Boolean

  """Filter by the object’s `reportTypesByUpdatedBy` relation."""
  reportTypesByUpdatedBy: CifUserToManyReportTypeFilter

  """Some related `reportTypesByUpdatedBy` exist."""
  reportTypesByUpdatedByExist: Boolean

  """Filter by the object’s `reportingRequirementsByArchivedBy` relation."""
  reportingRequirementsByArchivedBy: CifUserToManyReportingRequirementFilter

  """Some related `reportingRequirementsByArchivedBy` exist."""
  reportingRequirementsByArchivedByExist: Boolean

  """Filter by the object’s `reportingRequirementsByCreatedBy` relation."""
  reportingRequirementsByCreatedBy: CifUserToManyReportingRequirementFilter

  """Some related `reportingRequirementsByCreatedBy` exist."""
  reportingRequirementsByCreatedByExist: Boolean

  """Filter by the object’s `reportingRequirementsByUpdatedBy` relation."""
  reportingRequirementsByUpdatedBy: CifUserToManyReportingRequirementFilter

  """Some related `reportingRequirementsByUpdatedBy` exist."""
  reportingRequirementsByUpdatedByExist: Boolean

  """Filter by the object’s `revisionStatusesByArchivedBy` relation."""
  revisionStatusesByArchivedBy: CifUserToManyRevisionStatusFilter

  """Some related `revisionStatusesByArchivedBy` exist."""
  revisionStatusesByArchivedByExist: Boolean

  """Filter by the object’s `revisionStatusesByCreatedBy` relation."""
  revisionStatusesByCreatedBy: CifUserToManyRevisionStatusFilter

  """Some related `revisionStatusesByCreatedBy` exist."""
  revisionStatusesByCreatedByExist: Boolean

  """Filter by the object’s `revisionStatusesByUpdatedBy` relation."""
  revisionStatusesByUpdatedBy: CifUserToManyRevisionStatusFilter

  """Some related `revisionStatusesByUpdatedBy` exist."""
  revisionStatusesByUpdatedByExist: Boolean

  """Filter by the object’s `revisionTypesByArchivedBy` relation."""
  revisionTypesByArchivedBy: CifUserToManyRevisionTypeFilter

  """Some related `revisionTypesByArchivedBy` exist."""
  revisionTypesByArchivedByExist: Boolean

  """Filter by the object’s `revisionTypesByCreatedBy` relation."""
  revisionTypesByCreatedBy: CifUserToManyRevisionTypeFilter

  """Some related `revisionTypesByCreatedBy` exist."""
  revisionTypesByCreatedByExist: Boolean

  """Filter by the object’s `revisionTypesByUpdatedBy` relation."""
  revisionTypesByUpdatedBy: CifUserToManyRevisionTypeFilter

  """Some related `revisionTypesByUpdatedBy` exist."""
  revisionTypesByUpdatedByExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `sectorsByArchivedBy` relation."""
  sectorsByArchivedBy: CifUserToManySectorFilter

  """Some related `sectorsByArchivedBy` exist."""
  sectorsByArchivedByExist: Boolean

  """Filter by the object’s `sectorsByCreatedBy` relation."""
  sectorsByCreatedBy: CifUserToManySectorFilter

  """Some related `sectorsByCreatedBy` exist."""
  sectorsByCreatedByExist: Boolean

  """Filter by the object’s `sectorsByUpdatedBy` relation."""
  sectorsByUpdatedBy: CifUserToManySectorFilter

  """Some related `sectorsByUpdatedBy` exist."""
  sectorsByUpdatedByExist: Boolean

  """Filter by the object’s `sessionSub` field."""
  sessionSub: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FormChange` values, with data from `FormChange`.
"""
type CifUserFormChangesByFormChangeCreatedByAndPreviousFormChangeIdManyToManyConnection {
  """
  A list of edges which contains the `FormChange`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserFormChangesByFormChangeCreatedByAndPreviousFormChangeIdManyToManyEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection, with data from `FormChange`."""
type CifUserFormChangesByFormChangeCreatedByAndPreviousFormChangeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""
A connection to a list of `FormChange` values, with data from `FormChange`.
"""
type CifUserFormChangesByFormChangeUpdatedByAndPreviousFormChangeIdManyToManyConnection {
  """
  A list of edges which contains the `FormChange`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserFormChangesByFormChangeUpdatedByAndPreviousFormChangeIdManyToManyEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection, with data from `FormChange`."""
type CifUserFormChangesByFormChangeUpdatedByAndPreviousFormChangeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""A connection to a list of `Form` values, with data from `FormChange`."""
type CifUserFormsByFormChangeCreatedByAndJsonSchemaNameManyToManyConnection {
  """
  A list of edges which contains the `Form`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserFormsByFormChangeCreatedByAndJsonSchemaNameManyToManyEdge!]!

  """A list of `Form` objects."""
  nodes: [Form]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormChange`."""
type CifUserFormsByFormChangeCreatedByAndJsonSchemaNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `Form` at the end of the edge."""
  node: Form
}

"""A connection to a list of `Form` values, with data from `FormChange`."""
type CifUserFormsByFormChangeUpdatedByAndJsonSchemaNameManyToManyConnection {
  """
  A list of edges which contains the `Form`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserFormsByFormChangeUpdatedByAndJsonSchemaNameManyToManyEdge!]!

  """A list of `Form` objects."""
  nodes: [Form]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormChange`."""
type CifUserFormsByFormChangeUpdatedByAndJsonSchemaNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `Form` at the end of the edge."""
  node: Form
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FundingStreamRfp` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusArchivedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FundingStreamRfp` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusCreatedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FundingStreamRfp` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserFundingStreamRfpsByFundingStreamRfpProjectStatusUpdatedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type CifUserFundingStreamRfpsByProjectArchivedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByProjectArchivedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type CifUserFundingStreamRfpsByProjectArchivedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type CifUserFundingStreamRfpsByProjectCreatedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByProjectCreatedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type CifUserFundingStreamRfpsByProjectCreatedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type CifUserFundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type CifUserFundingStreamRfpsByProjectUpdatedByAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `FundingStream` values, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpArchivedByAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamsByFundingStreamRfpArchivedByAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""
A `FundingStream` edge in the connection, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpArchivedByAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `FundingStream` at the end of the edge."""
  node: FundingStream
}

"""
A connection to a list of `FundingStream` values, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpCreatedByAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamsByFundingStreamRfpCreatedByAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""
A `FundingStream` edge in the connection, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpCreatedByAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `FundingStream` at the end of the edge."""
  node: FundingStream
}

"""
A connection to a list of `FundingStream` values, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStream`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [CifUserFundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamIdManyToManyEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""
A `FundingStream` edge in the connection, with data from `FundingStreamRfp`.
"""
type CifUserFundingStreamsByFundingStreamRfpUpdatedByAndFundingStreamIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `FundingStream` at the end of the edge."""
  node: FundingStream
}

"""An input for mutations affecting `CifUser`"""
input CifUserInput {
  """
  Boolean value determines whether a legacy user can be updated. Legacy users may be updated only once.
  """
  allowSubUpdate: Boolean

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """User's email address"""
  emailAddress: String

  """User's last name"""
  familyName: String

  """User's first name"""
  givenName: String

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type CifUserOperatorsByProjectArchivedByAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserOperatorsByProjectArchivedByAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type CifUserOperatorsByProjectArchivedByAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type CifUserOperatorsByProjectCreatedByAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type CifUserOperatorsByProjectUpdatedByAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `CifUser`. Fields that are set will be updated.
"""
input CifUserPatch {
  """
  Boolean value determines whether a legacy user can be updated. Legacy users may be updated only once.
  """
  allowSubUpdate: Boolean

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """User's email address"""
  emailAddress: String

  """User's last name"""
  familyName: String

  """User's first name"""
  givenName: String

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerArchivedByAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerCifUserIdAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerCreatedByAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type CifUserProjectManagerLabelsByProjectManagerUpdatedByAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeCreatedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type CifUserProjectRevisionsByFormChangeUpdatedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `ProjectRevision` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserProjectRevisionsByProjectRevisionAmendmentTypeArchivedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByProjectRevisionAmendmentTypeArchivedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserProjectRevisionsByProjectRevisionAmendmentTypeArchivedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `ProjectRevision` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserProjectRevisionsByProjectRevisionAmendmentTypeCreatedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByProjectRevisionAmendmentTypeCreatedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserProjectRevisionsByProjectRevisionAmendmentTypeCreatedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `ProjectRevision` values, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserProjectRevisionsByProjectRevisionAmendmentTypeUpdatedByAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectRevisionsByProjectRevisionAmendmentTypeUpdatedByAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type CifUserProjectRevisionsByProjectRevisionAmendmentTypeUpdatedByAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `ProjectStatus` values, with data from `Attachment`.
"""
type CifUserProjectStatusesByAttachmentArchivedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByAttachmentArchivedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Attachment`."""
type CifUserProjectStatusesByAttachmentArchivedByAndProjectStatusIdManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `Attachment`.
"""
type CifUserProjectStatusesByAttachmentCreatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByAttachmentCreatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Attachment`."""
type CifUserProjectStatusesByAttachmentCreatedByAndProjectStatusIdManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `Attachment`.
"""
type CifUserProjectStatusesByAttachmentUpdatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByAttachmentUpdatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Attachment`."""
type CifUserProjectStatusesByAttachmentUpdatedByAndProjectStatusIdManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ProjectStatus` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusArchivedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ProjectStatus` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusCreatedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ProjectStatus` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type CifUserProjectStatusesByFundingStreamRfpProjectStatusUpdatedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type CifUserProjectStatusesByProjectArchivedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByProjectArchivedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type CifUserProjectStatusesByProjectArchivedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type CifUserProjectStatusesByProjectCreatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByProjectCreatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type CifUserProjectStatusesByProjectCreatedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type CifUserProjectStatusesByProjectUpdatedByAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectStatusesByProjectUpdatedByAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type CifUserProjectStatusesByProjectUpdatedByAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectType` values, with data from `Project`.
"""
type CifUserProjectTypesByProjectArchivedByAndProjectTypeManyToManyConnection {
  """
  A list of edges which contains the `ProjectType`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectTypesByProjectArchivedByAndProjectTypeManyToManyEdge!]!

  """A list of `ProjectType` objects."""
  nodes: [ProjectType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectType` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectType` edge in the connection, with data from `Project`."""
type CifUserProjectTypesByProjectArchivedByAndProjectTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectType` at the end of the edge."""
  node: ProjectType

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectType` values, with data from `Project`.
"""
type CifUserProjectTypesByProjectCreatedByAndProjectTypeManyToManyConnection {
  """
  A list of edges which contains the `ProjectType`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectTypesByProjectCreatedByAndProjectTypeManyToManyEdge!]!

  """A list of `ProjectType` objects."""
  nodes: [ProjectType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectType` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectType` edge in the connection, with data from `Project`."""
type CifUserProjectTypesByProjectCreatedByAndProjectTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectType` at the end of the edge."""
  node: ProjectType

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectType` values, with data from `Project`.
"""
type CifUserProjectTypesByProjectUpdatedByAndProjectTypeManyToManyConnection {
  """
  A list of edges which contains the `ProjectType`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectTypesByProjectUpdatedByAndProjectTypeManyToManyEdge!]!

  """A list of `ProjectType` objects."""
  nodes: [ProjectType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectType` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectType` edge in the connection, with data from `Project`."""
type CifUserProjectTypesByProjectUpdatedByAndProjectTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectType` at the end of the edge."""
  node: ProjectType

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `Project` values, with data from `AdditionalFundingSource`.
"""
type CifUserProjectsByAdditionalFundingSourceArchivedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByAdditionalFundingSourceArchivedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""
A `Project` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserProjectsByAdditionalFundingSourceArchivedByAndProjectIdManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A connection to a list of `Project` values, with data from `AdditionalFundingSource`.
"""
type CifUserProjectsByAdditionalFundingSourceCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByAdditionalFundingSourceCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""
A `Project` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserProjectsByAdditionalFundingSourceCreatedByAndProjectIdManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A connection to a list of `Project` values, with data from `AdditionalFundingSource`.
"""
type CifUserProjectsByAdditionalFundingSourceUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByAdditionalFundingSourceUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""
A `Project` edge in the connection, with data from `AdditionalFundingSource`.
"""
type CifUserProjectsByAdditionalFundingSourceUpdatedByAndProjectIdManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A connection to a list of `Project` values, with data from `Attachment`.
"""
type CifUserProjectsByAttachmentArchivedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByAttachmentArchivedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Attachment`."""
type CifUserProjectsByAttachmentArchivedByAndProjectIdManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A connection to a list of `Project` values, with data from `Attachment`.
"""
type CifUserProjectsByAttachmentCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByAttachmentCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Attachment`."""
type CifUserProjectsByAttachmentCreatedByAndProjectIdManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A connection to a list of `Project` values, with data from `Attachment`.
"""
type CifUserProjectsByAttachmentUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByAttachmentUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Attachment`."""
type CifUserProjectsByAttachmentUpdatedByAndProjectIdManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A connection to a list of `Project` values, with data from `FundingParameter`.
"""
type CifUserProjectsByFundingParameterArchivedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByFundingParameterArchivedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `FundingParameter`."""
type CifUserProjectsByFundingParameterArchivedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A connection to a list of `Project` values, with data from `FundingParameter`.
"""
type CifUserProjectsByFundingParameterCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByFundingParameterCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `FundingParameter`."""
type CifUserProjectsByFundingParameterCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A connection to a list of `Project` values, with data from `FundingParameter`.
"""
type CifUserProjectsByFundingParameterUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByFundingParameterUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `FundingParameter`."""
type CifUserProjectsByFundingParameterUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `Project` at the end of the edge."""
  node: Project
}

"""
A connection to a list of `Project` values, with data from `ProjectContact`.
"""
type CifUserProjectsByProjectContactArchivedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectContactArchivedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectContact`."""
type CifUserProjectsByProjectContactArchivedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectContact`.
"""
type CifUserProjectsByProjectContactCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectContactCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectContact`."""
type CifUserProjectsByProjectContactCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectContact`.
"""
type CifUserProjectsByProjectContactUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectContactUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectContact`."""
type CifUserProjectsByProjectContactUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerArchivedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerArchivedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerArchivedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerCifUserIdAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type CifUserProjectsByProjectManagerUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type CifUserProjectsByProjectRevisionCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type CifUserProjectsByProjectRevisionUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `Project` values, with data from `ReportingRequirement`.
"""
type CifUserProjectsByReportingRequirementArchivedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByReportingRequirementArchivedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""
A `Project` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserProjectsByReportingRequirementArchivedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `Project` values, with data from `ReportingRequirement`.
"""
type CifUserProjectsByReportingRequirementCreatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByReportingRequirementCreatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""
A `Project` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserProjectsByReportingRequirementCreatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `Project` values, with data from `ReportingRequirement`.
"""
type CifUserProjectsByReportingRequirementUpdatedByAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserProjectsByReportingRequirementUpdatedByAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""
A `Project` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserProjectsByReportingRequirementUpdatedByAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `ReportType` values, with data from `ReportingRequirement`.
"""
type CifUserReportTypesByReportingRequirementArchivedByAndReportTypeManyToManyConnection {
  """
  A list of edges which contains the `ReportType`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportTypesByReportingRequirementArchivedByAndReportTypeManyToManyEdge!]!

  """A list of `ReportType` objects."""
  nodes: [ReportType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportType` you could get from the connection."""
  totalCount: Int!
}

"""
A `ReportType` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserReportTypesByReportingRequirementArchivedByAndReportTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportType` at the end of the edge."""
  node: ReportType

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByReportType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `ReportType` values, with data from `ReportingRequirement`.
"""
type CifUserReportTypesByReportingRequirementCreatedByAndReportTypeManyToManyConnection {
  """
  A list of edges which contains the `ReportType`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportTypesByReportingRequirementCreatedByAndReportTypeManyToManyEdge!]!

  """A list of `ReportType` objects."""
  nodes: [ReportType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportType` you could get from the connection."""
  totalCount: Int!
}

"""
A `ReportType` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserReportTypesByReportingRequirementCreatedByAndReportTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportType` at the end of the edge."""
  node: ReportType

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByReportType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `ReportType` values, with data from `ReportingRequirement`.
"""
type CifUserReportTypesByReportingRequirementUpdatedByAndReportTypeManyToManyConnection {
  """
  A list of edges which contains the `ReportType`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportTypesByReportingRequirementUpdatedByAndReportTypeManyToManyEdge!]!

  """A list of `ReportType` objects."""
  nodes: [ReportType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportType` you could get from the connection."""
  totalCount: Int!
}

"""
A `ReportType` edge in the connection, with data from `ReportingRequirement`.
"""
type CifUserReportTypesByReportingRequirementUpdatedByAndReportTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportType` at the end of the edge."""
  node: ReportType

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByReportType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `ReportingRequirement` values, with data from `EmissionIntensityReport`.
"""
type CifUserReportingRequirementsByEmissionIntensityReportArchivedByAndReportingRequirementIdManyToManyConnection {
  """
  A list of edges which contains the `ReportingRequirement`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportingRequirementsByEmissionIntensityReportArchivedByAndReportingRequirementIdManyToManyEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection, with data from `EmissionIntensityReport`.
"""
type CifUserReportingRequirementsByEmissionIntensityReportArchivedByAndReportingRequirementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement
}

"""
A connection to a list of `ReportingRequirement` values, with data from `EmissionIntensityReport`.
"""
type CifUserReportingRequirementsByEmissionIntensityReportCreatedByAndReportingRequirementIdManyToManyConnection {
  """
  A list of edges which contains the `ReportingRequirement`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportingRequirementsByEmissionIntensityReportCreatedByAndReportingRequirementIdManyToManyEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection, with data from `EmissionIntensityReport`.
"""
type CifUserReportingRequirementsByEmissionIntensityReportCreatedByAndReportingRequirementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement
}

"""
A connection to a list of `ReportingRequirement` values, with data from `EmissionIntensityReport`.
"""
type CifUserReportingRequirementsByEmissionIntensityReportUpdatedByAndReportingRequirementIdManyToManyConnection {
  """
  A list of edges which contains the `ReportingRequirement`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportingRequirementsByEmissionIntensityReportUpdatedByAndReportingRequirementIdManyToManyEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection, with data from `EmissionIntensityReport`.
"""
type CifUserReportingRequirementsByEmissionIntensityReportUpdatedByAndReportingRequirementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement
}

"""
A connection to a list of `ReportingRequirement` values, with data from `MilestoneReport`.
"""
type CifUserReportingRequirementsByMilestoneReportArchivedByAndReportingRequirementIdManyToManyConnection {
  """
  A list of edges which contains the `ReportingRequirement`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportingRequirementsByMilestoneReportArchivedByAndReportingRequirementIdManyToManyEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection, with data from `MilestoneReport`.
"""
type CifUserReportingRequirementsByMilestoneReportArchivedByAndReportingRequirementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement
}

"""
A connection to a list of `ReportingRequirement` values, with data from `MilestoneReport`.
"""
type CifUserReportingRequirementsByMilestoneReportCreatedByAndReportingRequirementIdManyToManyConnection {
  """
  A list of edges which contains the `ReportingRequirement`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportingRequirementsByMilestoneReportCreatedByAndReportingRequirementIdManyToManyEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection, with data from `MilestoneReport`.
"""
type CifUserReportingRequirementsByMilestoneReportCreatedByAndReportingRequirementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement
}

"""
A connection to a list of `ReportingRequirement` values, with data from `MilestoneReport`.
"""
type CifUserReportingRequirementsByMilestoneReportUpdatedByAndReportingRequirementIdManyToManyConnection {
  """
  A list of edges which contains the `ReportingRequirement`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportingRequirementsByMilestoneReportUpdatedByAndReportingRequirementIdManyToManyEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection, with data from `MilestoneReport`.
"""
type CifUserReportingRequirementsByMilestoneReportUpdatedByAndReportingRequirementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement
}

"""
A connection to a list of `ReportingRequirement` values, with data from `Payment`.
"""
type CifUserReportingRequirementsByPaymentArchivedByAndReportingRequirementIdManyToManyConnection {
  """
  A list of edges which contains the `ReportingRequirement`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportingRequirementsByPaymentArchivedByAndReportingRequirementIdManyToManyEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection, with data from `Payment`.
"""
type CifUserReportingRequirementsByPaymentArchivedByAndReportingRequirementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""
A connection to a list of `ReportingRequirement` values, with data from `Payment`.
"""
type CifUserReportingRequirementsByPaymentCreatedByAndReportingRequirementIdManyToManyConnection {
  """
  A list of edges which contains the `ReportingRequirement`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportingRequirementsByPaymentCreatedByAndReportingRequirementIdManyToManyEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection, with data from `Payment`.
"""
type CifUserReportingRequirementsByPaymentCreatedByAndReportingRequirementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""
A connection to a list of `ReportingRequirement` values, with data from `Payment`.
"""
type CifUserReportingRequirementsByPaymentUpdatedByAndReportingRequirementIdManyToManyConnection {
  """
  A list of edges which contains the `ReportingRequirement`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [CifUserReportingRequirementsByPaymentUpdatedByAndReportingRequirementIdManyToManyEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection, with data from `Payment`.
"""
type CifUserReportingRequirementsByPaymentUpdatedByAndReportingRequirementIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""
A connection to a list of `RevisionStatus` values, with data from `ProjectRevision`.
"""
type CifUserRevisionStatusesByProjectRevisionCreatedByAndRevisionStatusManyToManyConnection {
  """
  A list of edges which contains the `RevisionStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserRevisionStatusesByProjectRevisionCreatedByAndRevisionStatusManyToManyEdge!]!

  """A list of `RevisionStatus` objects."""
  nodes: [RevisionStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionStatus` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserRevisionStatusesByProjectRevisionCreatedByAndRevisionStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionStatus` at the end of the edge."""
  node: RevisionStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `RevisionStatus` values, with data from `ProjectRevision`.
"""
type CifUserRevisionStatusesByProjectRevisionUpdatedByAndRevisionStatusManyToManyConnection {
  """
  A list of edges which contains the `RevisionStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserRevisionStatusesByProjectRevisionUpdatedByAndRevisionStatusManyToManyEdge!]!

  """A list of `RevisionStatus` objects."""
  nodes: [RevisionStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionStatus` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserRevisionStatusesByProjectRevisionUpdatedByAndRevisionStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionStatus` at the end of the edge."""
  node: RevisionStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `RevisionType` values, with data from `ProjectRevision`.
"""
type CifUserRevisionTypesByProjectRevisionCreatedByAndRevisionTypeManyToManyConnection {
  """
  A list of edges which contains the `RevisionType`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserRevisionTypesByProjectRevisionCreatedByAndRevisionTypeManyToManyEdge!]!

  """A list of `RevisionType` objects."""
  nodes: [RevisionType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionType` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionType` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserRevisionTypesByProjectRevisionCreatedByAndRevisionTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionType` at the end of the edge."""
  node: RevisionType

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `RevisionType` values, with data from `ProjectRevision`.
"""
type CifUserRevisionTypesByProjectRevisionUpdatedByAndRevisionTypeManyToManyConnection {
  """
  A list of edges which contains the `RevisionType`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [CifUserRevisionTypesByProjectRevisionUpdatedByAndRevisionTypeManyToManyEdge!]!

  """A list of `RevisionType` objects."""
  nodes: [RevisionType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionType` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionType` edge in the connection, with data from `ProjectRevision`.
"""
type CifUserRevisionTypesByProjectRevisionUpdatedByAndRevisionTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionType` at the end of the edge."""
  node: RevisionType

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""A connection to a list of `Sector` values, with data from `Project`."""
type CifUserSectorsByProjectArchivedByAndSectorNameManyToManyConnection {
  """
  A list of edges which contains the `Sector`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserSectorsByProjectArchivedByAndSectorNameManyToManyEdge!]!

  """A list of `Sector` objects."""
  nodes: [Sector]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sector` you could get from the connection."""
  totalCount: Int!
}

"""A `Sector` edge in the connection, with data from `Project`."""
type CifUserSectorsByProjectArchivedByAndSectorNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sector` at the end of the edge."""
  node: Sector

  """Reads and enables pagination through a set of `Project`."""
  projectsBySectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Sector` values, with data from `Project`."""
type CifUserSectorsByProjectCreatedByAndSectorNameManyToManyConnection {
  """
  A list of edges which contains the `Sector`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserSectorsByProjectCreatedByAndSectorNameManyToManyEdge!]!

  """A list of `Sector` objects."""
  nodes: [Sector]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sector` you could get from the connection."""
  totalCount: Int!
}

"""A `Sector` edge in the connection, with data from `Project`."""
type CifUserSectorsByProjectCreatedByAndSectorNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sector` at the end of the edge."""
  node: Sector

  """Reads and enables pagination through a set of `Project`."""
  projectsBySectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Sector` values, with data from `Project`."""
type CifUserSectorsByProjectUpdatedByAndSectorNameManyToManyConnection {
  """
  A list of edges which contains the `Sector`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [CifUserSectorsByProjectUpdatedByAndSectorNameManyToManyEdge!]!

  """A list of `Sector` objects."""
  nodes: [Sector]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sector` you could get from the connection."""
  totalCount: Int!
}

"""A `Sector` edge in the connection, with data from `Project`."""
type CifUserSectorsByProjectUpdatedByAndSectorNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sector` at the end of the edge."""
  node: Sector

  """Reads and enables pagination through a set of `Project`."""
  projectsBySectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A filter to be used against many `AdditionalFundingSource` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyAdditionalFundingSourceFilter {
  """
  Every related `AdditionalFundingSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AdditionalFundingSourceFilter

  """
  No related `AdditionalFundingSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AdditionalFundingSourceFilter

  """
  Some related `AdditionalFundingSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AdditionalFundingSourceFilter
}

"""
A filter to be used against many `AdditionalFundingSourceStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyAdditionalFundingSourceStatusFilter {
  """
  Every related `AdditionalFundingSourceStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AdditionalFundingSourceStatusFilter

  """
  No related `AdditionalFundingSourceStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AdditionalFundingSourceStatusFilter

  """
  Some related `AdditionalFundingSourceStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AdditionalFundingSourceStatusFilter
}

"""
A filter to be used against many `AmendmentType` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyAmendmentTypeFilter {
  """
  Every related `AmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AmendmentTypeFilter

  """
  No related `AmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AmendmentTypeFilter

  """
  Some related `AmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AmendmentTypeFilter
}

"""
A filter to be used against many `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyAttachmentFilter {
  """
  Every related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttachmentFilter

  """
  No related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttachmentFilter

  """
  Some related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttachmentFilter
}

"""
A filter to be used against many `ChangeStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyChangeStatusFilter {
  """
  Every related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ChangeStatusFilter

  """
  No related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ChangeStatusFilter

  """
  Some related `ChangeStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ChangeStatusFilter
}

"""
A filter to be used against many `CifUser` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyCifUserFilter {
  """
  Every related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CifUserFilter

  """
  No related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CifUserFilter

  """
  Some related `CifUser` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CifUserFilter
}

"""
A filter to be used against many `Contact` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyContactFilter {
  """
  Every related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ContactFilter

  """
  No related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ContactFilter

  """
  Some related `Contact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ContactFilter
}

"""
A filter to be used against many `EmissionIntensityPaymentPercent` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyEmissionIntensityPaymentPercentFilter {
  """
  Every related `EmissionIntensityPaymentPercent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionIntensityPaymentPercentFilter

  """
  No related `EmissionIntensityPaymentPercent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionIntensityPaymentPercentFilter

  """
  Some related `EmissionIntensityPaymentPercent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionIntensityPaymentPercentFilter
}

"""
A filter to be used against many `EmissionIntensityReport` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyEmissionIntensityReportFilter {
  """
  Every related `EmissionIntensityReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionIntensityReportFilter

  """
  No related `EmissionIntensityReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionIntensityReportFilter

  """
  Some related `EmissionIntensityReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionIntensityReportFilter
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""
A filter to be used against many `Form` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFormFilter {
  """
  Every related `Form` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormFilter

  """
  No related `Form` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormFilter

  """
  Some related `Form` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormFilter
}

"""
A filter to be used against many `FundingParameter` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFundingParameterFilter {
  """
  Every related `FundingParameter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingParameterFilter

  """
  No related `FundingParameter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingParameterFilter

  """
  Some related `FundingParameter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingParameterFilter
}

"""
A filter to be used against many `FundingStream` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFundingStreamFilter {
  """
  Every related `FundingStream` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamFilter

  """
  No related `FundingStream` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamFilter

  """
  Some related `FundingStream` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamFilter
}

"""
A filter to be used against many `FundingStreamRfp` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFundingStreamRfpFilter {
  """
  Every related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpFilter

  """
  No related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpFilter

  """
  Some related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpFilter
}

"""
A filter to be used against many `FundingStreamRfpProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyFundingStreamRfpProjectStatusFilter {
  """
  Every related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpProjectStatusFilter

  """
  No related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpProjectStatusFilter

  """
  Some related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpProjectStatusFilter
}

"""
A filter to be used against many `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyKeycloakJwtFilter {
  """
  Every related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: KeycloakJwtFilter

  """
  No related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: KeycloakJwtFilter

  """
  Some related `KeycloakJwt` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: KeycloakJwtFilter
}

"""
A filter to be used against many `MilestoneReport` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyMilestoneReportFilter {
  """
  Every related `MilestoneReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MilestoneReportFilter

  """
  No related `MilestoneReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MilestoneReportFilter

  """
  Some related `MilestoneReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MilestoneReportFilter
}

"""
A filter to be used against many `Operator` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyOperatorFilter {
  """
  Every related `Operator` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: OperatorFilter

  """
  No related `Operator` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: OperatorFilter

  """
  Some related `Operator` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: OperatorFilter
}

"""
A filter to be used against many `Payment` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyPaymentFilter {
  """
  Every related `Payment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PaymentFilter

  """
  No related `Payment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PaymentFilter

  """
  Some related `Payment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PaymentFilter
}

"""
A filter to be used against many `ProjectContact` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectContactFilter {
  """
  Every related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectContactFilter

  """
  No related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectContactFilter

  """
  Some related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectContactFilter
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""
A filter to be used against many `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectManagerFilter {
  """
  Every related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerFilter

  """
  No related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerFilter

  """
  Some related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerFilter
}

"""
A filter to be used against many `ProjectManagerLabel` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectManagerLabelFilter {
  """
  Every related `ProjectManagerLabel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerLabelFilter

  """
  No related `ProjectManagerLabel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerLabelFilter

  """
  Some related `ProjectManagerLabel` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerLabelFilter
}

"""
A filter to be used against many `ProjectRevisionAmendmentType` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectRevisionAmendmentTypeFilter {
  """
  Every related `ProjectRevisionAmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionAmendmentTypeFilter

  """
  No related `ProjectRevisionAmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionAmendmentTypeFilter

  """
  Some related `ProjectRevisionAmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionAmendmentTypeFilter
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""
A filter to be used against many `ProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectStatusFilter {
  """
  Every related `ProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectStatusFilter

  """
  No related `ProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectStatusFilter

  """
  Some related `ProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectStatusFilter
}

"""
A filter to be used against many `ProjectType` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyProjectTypeFilter {
  """
  Every related `ProjectType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectTypeFilter

  """
  No related `ProjectType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectTypeFilter

  """
  Some related `ProjectType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectTypeFilter
}

"""
A filter to be used against many `ReportType` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyReportTypeFilter {
  """
  Every related `ReportType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportTypeFilter

  """
  No related `ReportType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportTypeFilter

  """
  Some related `ReportType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportTypeFilter
}

"""
A filter to be used against many `ReportingRequirement` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyReportingRequirementFilter {
  """
  Every related `ReportingRequirement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportingRequirementFilter

  """
  No related `ReportingRequirement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportingRequirementFilter

  """
  Some related `ReportingRequirement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportingRequirementFilter
}

"""
A filter to be used against many `RevisionStatus` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyRevisionStatusFilter {
  """
  Every related `RevisionStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RevisionStatusFilter

  """
  No related `RevisionStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RevisionStatusFilter

  """
  Some related `RevisionStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RevisionStatusFilter
}

"""
A filter to be used against many `RevisionType` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManyRevisionTypeFilter {
  """
  Every related `RevisionType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: RevisionTypeFilter

  """
  No related `RevisionType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: RevisionTypeFilter

  """
  Some related `RevisionType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: RevisionTypeFilter
}

"""
A filter to be used against many `Sector` object types. All fields are combined with a logical ‘and.’
"""
input CifUserToManySectorFilter {
  """
  Every related `Sector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: SectorFilter

  """
  No related `Sector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: SectorFilter

  """
  Some related `Sector` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: SectorFilter
}

"""A connection to a list of `CifUser` values."""
type CifUsersConnection {
  """
  A list of edges which contains the `CifUser` and cursor to aid in pagination.
  """
  edges: [CifUsersEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection."""
type CifUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""Methods to use when ordering `CifUser`."""
enum CifUsersOrderBy {
  ADDITIONAL_FUNDING_SOURCES_BY_ARCHIVED_BY__COUNT_ASC
  ADDITIONAL_FUNDING_SOURCES_BY_ARCHIVED_BY__COUNT_DESC
  ADDITIONAL_FUNDING_SOURCES_BY_CREATED_BY__COUNT_ASC
  ADDITIONAL_FUNDING_SOURCES_BY_CREATED_BY__COUNT_DESC
  ADDITIONAL_FUNDING_SOURCES_BY_UPDATED_BY__COUNT_ASC
  ADDITIONAL_FUNDING_SOURCES_BY_UPDATED_BY__COUNT_DESC
  ADDITIONAL_FUNDING_SOURCE_STATUSES_BY_ARCHIVED_BY__COUNT_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUSES_BY_ARCHIVED_BY__COUNT_DESC
  ADDITIONAL_FUNDING_SOURCE_STATUSES_BY_CREATED_BY__COUNT_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUSES_BY_CREATED_BY__COUNT_DESC
  ADDITIONAL_FUNDING_SOURCE_STATUSES_BY_UPDATED_BY__COUNT_ASC
  ADDITIONAL_FUNDING_SOURCE_STATUSES_BY_UPDATED_BY__COUNT_DESC
  ALLOW_SUB_UPDATE_ASC
  ALLOW_SUB_UPDATE_DESC
  AMENDMENT_TYPES_BY_ARCHIVED_BY__COUNT_ASC
  AMENDMENT_TYPES_BY_ARCHIVED_BY__COUNT_DESC
  AMENDMENT_TYPES_BY_CREATED_BY__COUNT_ASC
  AMENDMENT_TYPES_BY_CREATED_BY__COUNT_DESC
  AMENDMENT_TYPES_BY_UPDATED_BY__COUNT_ASC
  AMENDMENT_TYPES_BY_UPDATED_BY__COUNT_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ATTACHMENTS_BY_ARCHIVED_BY__COUNT_ASC
  ATTACHMENTS_BY_ARCHIVED_BY__COUNT_DESC
  ATTACHMENTS_BY_CREATED_BY__COUNT_ASC
  ATTACHMENTS_BY_CREATED_BY__COUNT_DESC
  ATTACHMENTS_BY_UPDATED_BY__COUNT_ASC
  ATTACHMENTS_BY_UPDATED_BY__COUNT_DESC
  CHANGE_STATUSES_BY_ARCHIVED_BY__COUNT_ASC
  CHANGE_STATUSES_BY_ARCHIVED_BY__COUNT_DESC
  CHANGE_STATUSES_BY_CREATED_BY__COUNT_ASC
  CHANGE_STATUSES_BY_CREATED_BY__COUNT_DESC
  CHANGE_STATUSES_BY_UPDATED_BY__COUNT_ASC
  CHANGE_STATUSES_BY_UPDATED_BY__COUNT_DESC
  CIF_USERS_BY_ARCHIVED_BY__COUNT_ASC
  CIF_USERS_BY_ARCHIVED_BY__COUNT_DESC
  CIF_USERS_BY_CREATED_BY__COUNT_ASC
  CIF_USERS_BY_CREATED_BY__COUNT_DESC
  CIF_USERS_BY_UPDATED_BY__COUNT_ASC
  CIF_USERS_BY_UPDATED_BY__COUNT_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CONTACTS_BY_ARCHIVED_BY__COUNT_ASC
  CONTACTS_BY_ARCHIVED_BY__COUNT_DESC
  CONTACTS_BY_CREATED_BY__COUNT_ASC
  CONTACTS_BY_CREATED_BY__COUNT_DESC
  CONTACTS_BY_UPDATED_BY__COUNT_ASC
  CONTACTS_BY_UPDATED_BY__COUNT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  EMISSION_INTENSITY_PAYMENT_PERCENTS_BY_ARCHIVED_BY__COUNT_ASC
  EMISSION_INTENSITY_PAYMENT_PERCENTS_BY_ARCHIVED_BY__COUNT_DESC
  EMISSION_INTENSITY_PAYMENT_PERCENTS_BY_CREATED_BY__COUNT_ASC
  EMISSION_INTENSITY_PAYMENT_PERCENTS_BY_CREATED_BY__COUNT_DESC
  EMISSION_INTENSITY_PAYMENT_PERCENTS_BY_UPDATED_BY__COUNT_ASC
  EMISSION_INTENSITY_PAYMENT_PERCENTS_BY_UPDATED_BY__COUNT_DESC
  EMISSION_INTENSITY_REPORTS_BY_ARCHIVED_BY__COUNT_ASC
  EMISSION_INTENSITY_REPORTS_BY_ARCHIVED_BY__COUNT_DESC
  EMISSION_INTENSITY_REPORTS_BY_CREATED_BY__COUNT_ASC
  EMISSION_INTENSITY_REPORTS_BY_CREATED_BY__COUNT_DESC
  EMISSION_INTENSITY_REPORTS_BY_UPDATED_BY__COUNT_ASC
  EMISSION_INTENSITY_REPORTS_BY_UPDATED_BY__COUNT_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  FORMS_BY_ARCHIVED_BY__COUNT_ASC
  FORMS_BY_ARCHIVED_BY__COUNT_DESC
  FORMS_BY_CREATED_BY__COUNT_ASC
  FORMS_BY_CREATED_BY__COUNT_DESC
  FORMS_BY_UPDATED_BY__COUNT_ASC
  FORMS_BY_UPDATED_BY__COUNT_DESC
  FORM_CHANGES_BY_CREATED_BY__COUNT_ASC
  FORM_CHANGES_BY_CREATED_BY__COUNT_DESC
  FORM_CHANGES_BY_UPDATED_BY__COUNT_ASC
  FORM_CHANGES_BY_UPDATED_BY__COUNT_DESC
  FULL_NAME_ASC
  FULL_NAME_DESC
  FUNDING_PARAMETERS_BY_ARCHIVED_BY__COUNT_ASC
  FUNDING_PARAMETERS_BY_ARCHIVED_BY__COUNT_DESC
  FUNDING_PARAMETERS_BY_CREATED_BY__COUNT_ASC
  FUNDING_PARAMETERS_BY_CREATED_BY__COUNT_DESC
  FUNDING_PARAMETERS_BY_UPDATED_BY__COUNT_ASC
  FUNDING_PARAMETERS_BY_UPDATED_BY__COUNT_DESC
  FUNDING_STREAMS_BY_ARCHIVED_BY__COUNT_ASC
  FUNDING_STREAMS_BY_ARCHIVED_BY__COUNT_DESC
  FUNDING_STREAMS_BY_CREATED_BY__COUNT_ASC
  FUNDING_STREAMS_BY_CREATED_BY__COUNT_DESC
  FUNDING_STREAMS_BY_UPDATED_BY__COUNT_ASC
  FUNDING_STREAMS_BY_UPDATED_BY__COUNT_DESC
  FUNDING_STREAM_RFPS_BY_ARCHIVED_BY__COUNT_ASC
  FUNDING_STREAM_RFPS_BY_ARCHIVED_BY__COUNT_DESC
  FUNDING_STREAM_RFPS_BY_CREATED_BY__COUNT_ASC
  FUNDING_STREAM_RFPS_BY_CREATED_BY__COUNT_DESC
  FUNDING_STREAM_RFPS_BY_UPDATED_BY__COUNT_ASC
  FUNDING_STREAM_RFPS_BY_UPDATED_BY__COUNT_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_ARCHIVED_BY__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_ARCHIVED_BY__COUNT_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_CREATED_BY__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_CREATED_BY__COUNT_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_UPDATED_BY__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_UPDATED_BY__COUNT_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  ID_ASC
  ID_DESC
  KEYCLOAK_JWTS_BY_SUB__COUNT_ASC
  KEYCLOAK_JWTS_BY_SUB__COUNT_DESC
  MILESTONE_REPORTS_BY_ARCHIVED_BY__COUNT_ASC
  MILESTONE_REPORTS_BY_ARCHIVED_BY__COUNT_DESC
  MILESTONE_REPORTS_BY_CREATED_BY__COUNT_ASC
  MILESTONE_REPORTS_BY_CREATED_BY__COUNT_DESC
  MILESTONE_REPORTS_BY_UPDATED_BY__COUNT_ASC
  MILESTONE_REPORTS_BY_UPDATED_BY__COUNT_DESC
  NATURAL
  OPERATORS_BY_ARCHIVED_BY__COUNT_ASC
  OPERATORS_BY_ARCHIVED_BY__COUNT_DESC
  OPERATORS_BY_CREATED_BY__COUNT_ASC
  OPERATORS_BY_CREATED_BY__COUNT_DESC
  OPERATORS_BY_UPDATED_BY__COUNT_ASC
  OPERATORS_BY_UPDATED_BY__COUNT_DESC
  PAYMENTS_BY_ARCHIVED_BY__COUNT_ASC
  PAYMENTS_BY_ARCHIVED_BY__COUNT_DESC
  PAYMENTS_BY_CREATED_BY__COUNT_ASC
  PAYMENTS_BY_CREATED_BY__COUNT_DESC
  PAYMENTS_BY_UPDATED_BY__COUNT_ASC
  PAYMENTS_BY_UPDATED_BY__COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_ARCHIVED_BY__COUNT_ASC
  PROJECTS_BY_ARCHIVED_BY__COUNT_DESC
  PROJECTS_BY_CREATED_BY__COUNT_ASC
  PROJECTS_BY_CREATED_BY__COUNT_DESC
  PROJECTS_BY_UPDATED_BY__COUNT_ASC
  PROJECTS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_CONTACTS_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_CONTACTS_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_CONTACTS_BY_CREATED_BY__COUNT_ASC
  PROJECT_CONTACTS_BY_CREATED_BY__COUNT_DESC
  PROJECT_CONTACTS_BY_UPDATED_BY__COUNT_ASC
  PROJECT_CONTACTS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_MANAGERS_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_MANAGERS_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_MANAGERS_BY_CIF_USER_ID__COUNT_ASC
  PROJECT_MANAGERS_BY_CIF_USER_ID__COUNT_DESC
  PROJECT_MANAGERS_BY_CREATED_BY__COUNT_ASC
  PROJECT_MANAGERS_BY_CREATED_BY__COUNT_DESC
  PROJECT_MANAGERS_BY_UPDATED_BY__COUNT_ASC
  PROJECT_MANAGERS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_MANAGER_LABELS_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_MANAGER_LABELS_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_MANAGER_LABELS_BY_CREATED_BY__COUNT_ASC
  PROJECT_MANAGER_LABELS_BY_CREATED_BY__COUNT_DESC
  PROJECT_MANAGER_LABELS_BY_UPDATED_BY__COUNT_ASC
  PROJECT_MANAGER_LABELS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_REVISIONS_BY_CREATED_BY__COUNT_ASC
  PROJECT_REVISIONS_BY_CREATED_BY__COUNT_DESC
  PROJECT_REVISIONS_BY_UPDATED_BY__COUNT_ASC
  PROJECT_REVISIONS_BY_UPDATED_BY__COUNT_DESC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_CREATED_BY__COUNT_ASC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_CREATED_BY__COUNT_DESC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_UPDATED_BY__COUNT_ASC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_UPDATED_BY__COUNT_DESC
  PROJECT_STATUSES_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_STATUSES_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_STATUSES_BY_CREATED_BY__COUNT_ASC
  PROJECT_STATUSES_BY_CREATED_BY__COUNT_DESC
  PROJECT_STATUSES_BY_UPDATED_BY__COUNT_ASC
  PROJECT_STATUSES_BY_UPDATED_BY__COUNT_DESC
  PROJECT_TYPES_BY_ARCHIVED_BY__COUNT_ASC
  PROJECT_TYPES_BY_ARCHIVED_BY__COUNT_DESC
  PROJECT_TYPES_BY_CREATED_BY__COUNT_ASC
  PROJECT_TYPES_BY_CREATED_BY__COUNT_DESC
  PROJECT_TYPES_BY_UPDATED_BY__COUNT_ASC
  PROJECT_TYPES_BY_UPDATED_BY__COUNT_DESC
  REPORTING_REQUIREMENTS_BY_ARCHIVED_BY__COUNT_ASC
  REPORTING_REQUIREMENTS_BY_ARCHIVED_BY__COUNT_DESC
  REPORTING_REQUIREMENTS_BY_CREATED_BY__COUNT_ASC
  REPORTING_REQUIREMENTS_BY_CREATED_BY__COUNT_DESC
  REPORTING_REQUIREMENTS_BY_UPDATED_BY__COUNT_ASC
  REPORTING_REQUIREMENTS_BY_UPDATED_BY__COUNT_DESC
  REPORT_TYPES_BY_ARCHIVED_BY__COUNT_ASC
  REPORT_TYPES_BY_ARCHIVED_BY__COUNT_DESC
  REPORT_TYPES_BY_CREATED_BY__COUNT_ASC
  REPORT_TYPES_BY_CREATED_BY__COUNT_DESC
  REPORT_TYPES_BY_UPDATED_BY__COUNT_ASC
  REPORT_TYPES_BY_UPDATED_BY__COUNT_DESC
  REVISION_STATUSES_BY_ARCHIVED_BY__COUNT_ASC
  REVISION_STATUSES_BY_ARCHIVED_BY__COUNT_DESC
  REVISION_STATUSES_BY_CREATED_BY__COUNT_ASC
  REVISION_STATUSES_BY_CREATED_BY__COUNT_DESC
  REVISION_STATUSES_BY_UPDATED_BY__COUNT_ASC
  REVISION_STATUSES_BY_UPDATED_BY__COUNT_DESC
  REVISION_TYPES_BY_ARCHIVED_BY__COUNT_ASC
  REVISION_TYPES_BY_ARCHIVED_BY__COUNT_DESC
  REVISION_TYPES_BY_CREATED_BY__COUNT_ASC
  REVISION_TYPES_BY_CREATED_BY__COUNT_DESC
  REVISION_TYPES_BY_UPDATED_BY__COUNT_ASC
  REVISION_TYPES_BY_UPDATED_BY__COUNT_DESC
  SECTORS_BY_ARCHIVED_BY__COUNT_ASC
  SECTORS_BY_ARCHIVED_BY__COUNT_DESC
  SECTORS_BY_CREATED_BY__COUNT_ASC
  SECTORS_BY_CREATED_BY__COUNT_DESC
  SECTORS_BY_UPDATED_BY__COUNT_ASC
  SECTORS_BY_UPDATED_BY__COUNT_DESC
  SESSION_SUB_ASC
  SESSION_SUB_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the `commitFormChange` mutation."""
input CommitFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formChangePatch: FormChangePatch!
  rowId: Int!
}

"""The output of our `commitFormChange` mutation."""
type CommitFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Form` that is related to this `FormChange`."""
  formByJsonSchemaName: Form
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `commitProjectRevision` mutation."""
input CommitProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionToCommitId: Int!
}

"""The output of our `commitProjectRevision` mutation."""
type CommitProjectRevisionPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType
}

"""Table containing information about a CIF contact"""
type Contact implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `Contact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Contact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Contact`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactContactIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactCifUsersByProjectContactContactIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactContactIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactCifUsersByProjectContactContactIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactContactIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactCifUsersByProjectContactContactIdAndUpdatedByManyToManyConnection!

  """Any comments about this contact"""
  comments: String

  """The company this contact works for"""
  companyName: String

  """The role of this contact within their company"""
  contactPosition: String

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """The email address, and a unique identifier, of this contact"""
  email: String!

  """The family name of this contact"""
  familyName: String

  """Computed column for graphql to retrieve the full name of a contact"""
  fullName: String
  fullPhone: String

  """The given name of this contact"""
  givenName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Returns the pending form change editing the contact created by the current user, if it exists.
  """
  pendingFormChange: FormChange

  """The phone number of this contact, stored in E.164 format"""
  phone: String

  """The phone extension of this contact"""
  phoneExt: String

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectContactContactIdAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactProjectsByProjectContactContactIdAndProjectIdManyToManyConnection!

  """Unique ID for the contact"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ContactCifUsersByProjectContactContactIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ContactCifUsersByProjectContactContactIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ContactCifUsersByProjectContactContactIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ContactCifUsersByProjectContactContactIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ContactCifUsersByProjectContactContactIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ContactCifUsersByProjectContactContactIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ContactCifUsersByProjectContactContactIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ContactCifUsersByProjectContactContactIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ContactCifUsersByProjectContactContactIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A condition to be used against `Contact` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ContactCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `companyName` field."""
  companyName: String

  """Checks for equality with the object’s `contactPosition` field."""
  contactPosition: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `familyName` field."""
  familyName: String

  """Checks for equality with the object’s `givenName` field."""
  givenName: String

  """Checks for equality with the object’s `phone` field."""
  phone: String

  """Checks for equality with the object’s `phoneExt` field."""
  phoneExt: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Contact` object types. All fields are combined with a logical ‘and.’
"""
input ContactFilter {
  """Checks for all expressions in this list."""
  and: [ContactFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `comments` field."""
  comments: StringFilter

  """Filter by the object’s `companyName` field."""
  companyName: StringFilter

  """Filter by the object’s `contactPosition` field."""
  contactPosition: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `fullName` field."""
  fullName: StringFilter

  """Filter by the object’s `fullPhone` field."""
  fullPhone: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Negates the expression."""
  not: ContactFilter

  """Checks for any expressions in this list."""
  or: [ContactFilter!]

  """Filter by the object’s `phone` field."""
  phone: StringFilter

  """Filter by the object’s `phoneExt` field."""
  phoneExt: StringFilter

  """Filter by the object’s `projectContactsByContactId` relation."""
  projectContactsByContactId: ContactToManyProjectContactFilter

  """Some related `projectContactsByContactId` exist."""
  projectContactsByContactIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `Project` values, with data from `ProjectContact`.
"""
type ContactProjectsByProjectContactContactIdAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ContactProjectsByProjectContactContactIdAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectContact`."""
type ContactProjectsByProjectContactContactIdAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A filter to be used against many `ProjectContact` object types. All fields are combined with a logical ‘and.’
"""
input ContactToManyProjectContactFilter {
  """
  Every related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectContactFilter

  """
  No related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectContactFilter

  """
  Some related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectContactFilter
}

"""A connection to a list of `Contact` values."""
type ContactsConnection {
  """
  A list of edges which contains the `Contact` and cursor to aid in pagination.
  """
  edges: [ContactsEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection."""
type ContactsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact
}

"""Methods to use when ordering `Contact`."""
enum ContactsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  COMPANY_NAME_ASC
  COMPANY_NAME_DESC
  CONTACT_POSITION_ASC
  CONTACT_POSITION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  EMAIL_ASC
  EMAIL_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  FULL_NAME_ASC
  FULL_NAME_DESC
  FULL_PHONE_ASC
  FULL_PHONE_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PHONE_ASC
  PHONE_DESC
  PHONE_EXT_ASC
  PHONE_EXT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_CONTACTS_BY_CONTACT_ID__COUNT_ASC
  PROJECT_CONTACTS_BY_CONTACT_ID__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the create `AdditionalFundingSource` mutation."""
input CreateAdditionalFundingSourceInput {
  """The `AdditionalFundingSource` to be created by this mutation."""
  additionalFundingSource: AdditionalFundingSourceInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `AdditionalFundingSource` mutation."""
type CreateAdditionalFundingSourcePayload {
  """The `AdditionalFundingSource` that was created by this mutation."""
  additionalFundingSource: AdditionalFundingSource

  """An edge for our `AdditionalFundingSource`. May be used by Relay 1."""
  additionalFundingSourceEdge(
    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesEdge

  """
  Reads a single `AdditionalFundingSourceStatus` that is related to this `AdditionalFundingSource`.
  """
  additionalFundingSourceStatusByStatus: AdditionalFundingSourceStatus

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Project` that is related to this `AdditionalFundingSource`.
  """
  projectByProjectId: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `AdditionalFundingSourceStatus` mutation."""
input CreateAdditionalFundingSourceStatusInput {
  """The `AdditionalFundingSourceStatus` to be created by this mutation."""
  additionalFundingSourceStatus: AdditionalFundingSourceStatusInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `AdditionalFundingSourceStatus` mutation."""
type CreateAdditionalFundingSourceStatusPayload {
  """The `AdditionalFundingSourceStatus` that was created by this mutation."""
  additionalFundingSourceStatus: AdditionalFundingSourceStatus

  """
  An edge for our `AdditionalFundingSourceStatus`. May be used by Relay 1.
  """
  additionalFundingSourceStatusEdge(
    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesEdge

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `AmendmentType` mutation."""
input CreateAmendmentTypeInput {
  """The `AmendmentType` to be created by this mutation."""
  amendmentType: AmendmentTypeInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `AmendmentType` mutation."""
type CreateAmendmentTypePayload {
  """The `AmendmentType` that was created by this mutation."""
  amendmentType: AmendmentType

  """An edge for our `AmendmentType`. May be used by Relay 1."""
  amendmentTypeEdge(
    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesEdge

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Attachment` mutation."""
input CreateAttachmentInput {
  """The `Attachment` to be created by this mutation."""
  attachment: AttachmentInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `Attachment` mutation."""
type CreateAttachmentPayload {
  """The `Attachment` that was created by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `Attachment`."""
  projectByProjectId: Project

  """Reads a single `ProjectStatus` that is related to this `Attachment`."""
  projectStatusByProjectStatusId: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ChangeStatus` mutation."""
input CreateChangeStatusInput {
  """The `ChangeStatus` to be created by this mutation."""
  changeStatus: ChangeStatusInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ChangeStatus` mutation."""
type CreateChangeStatusPayload {
  """The `ChangeStatus` that was created by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `CifUser` mutation."""
input CreateCifUserInput {
  """The `CifUser` to be created by this mutation."""
  cifUser: CifUserInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `CifUser` mutation."""
type CreateCifUserPayload {
  """The `CifUser` that was created by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EmissionIntensityPaymentPercent` mutation."""
input CreateEmissionIntensityPaymentPercentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmissionIntensityPaymentPercent` to be created by this mutation."""
  emissionIntensityPaymentPercent: EmissionIntensityPaymentPercentInput!
}

"""The output of our create `EmissionIntensityPaymentPercent` mutation."""
type CreateEmissionIntensityPaymentPercentPayload {
  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EmissionIntensityPaymentPercent` that was created by this mutation.
  """
  emissionIntensityPaymentPercent: EmissionIntensityPaymentPercent

  """
  An edge for our `EmissionIntensityPaymentPercent`. May be used by Relay 1.
  """
  emissionIntensityPaymentPercentEdge(
    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `EmissionIntensityReport` mutation."""
input CreateEmissionIntensityReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EmissionIntensityReport` to be created by this mutation."""
  emissionIntensityReport: EmissionIntensityReportInput!
}

"""The output of our create `EmissionIntensityReport` mutation."""
type CreateEmissionIntensityReportPayload {
  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionIntensityReport` that was created by this mutation."""
  emissionIntensityReport: EmissionIntensityReport

  """An edge for our `EmissionIntensityReport`. May be used by Relay 1."""
  emissionIntensityReportEdge(
    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `EmissionIntensityReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement
}

"""All input for the `createFormChange` mutation."""
input CreateFormChangeInput {
  changeStatus: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formDataRecordId: Int
  formDataSchemaName: String!
  formDataTableName: String!
  jsonSchemaName: String!
  newFormData: JSON
  operation: FormChangeOperation!
  projectRevisionId: Int
  validationErrors: JSON
}

"""The output of our `createFormChange` mutation."""
type CreateFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Form` that is related to this `FormChange`."""
  formByJsonSchemaName: Form
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Form` mutation."""
input CreateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Form` to be created by this mutation."""
  form: FormInput!
}

"""The output of our create `Form` mutation."""
type CreateFormPayload {
  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was created by this mutation."""
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FundingParameter` mutation."""
input CreateFundingParameterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FundingParameter` to be created by this mutation."""
  fundingParameter: FundingParameterInput!
}

"""The output of our create `FundingParameter` mutation."""
type CreateFundingParameterPayload {
  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FundingParameter` that was created by this mutation."""
  fundingParameter: FundingParameter

  """An edge for our `FundingParameter`. May be used by Relay 1."""
  fundingParameterEdge(
    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersEdge

  """Reads a single `Project` that is related to this `FundingParameter`."""
  projectByProjectId: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FundingStream` mutation."""
input CreateFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FundingStream` to be created by this mutation."""
  fundingStream: FundingStreamInput!
}

"""The output of our create `FundingStream` mutation."""
type CreateFundingStreamPayload {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FundingStream` that was created by this mutation."""
  fundingStream: FundingStream

  """An edge for our `FundingStream`. May be used by Relay 1."""
  fundingStreamEdge(
    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FundingStreamRfp` mutation."""
input CreateFundingStreamRfpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FundingStreamRfp` to be created by this mutation."""
  fundingStreamRfp: FundingStreamRfpInput!
}

"""The output of our create `FundingStreamRfp` mutation."""
type CreateFundingStreamRfpPayload {
  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """The `FundingStreamRfp` that was created by this mutation."""
  fundingStreamRfp: FundingStreamRfp

  """An edge for our `FundingStreamRfp`. May be used by Relay 1."""
  fundingStreamRfpEdge(
    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FundingStreamRfpProjectStatus` mutation."""
input CreateFundingStreamRfpProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FundingStreamRfpProjectStatus` to be created by this mutation."""
  fundingStreamRfpProjectStatus: FundingStreamRfpProjectStatusInput!
}

"""The output of our create `FundingStreamRfpProjectStatus` mutation."""
type CreateFundingStreamRfpProjectStatusPayload {
  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FundingStreamRfp` that is related to this `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """The `FundingStreamRfpProjectStatus` that was created by this mutation."""
  fundingStreamRfpProjectStatus: FundingStreamRfpProjectStatus

  """
  An edge for our `FundingStreamRfpProjectStatus`. May be used by Relay 1.
  """
  fundingStreamRfpProjectStatusEdge(
    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesEdge

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamRfpProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MilestoneReport` mutation."""
input CreateMilestoneReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MilestoneReport` to be created by this mutation."""
  milestoneReport: MilestoneReportInput!
}

"""The output of our create `MilestoneReport` mutation."""
type CreateMilestoneReportPayload {
  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MilestoneReport` that was created by this mutation."""
  milestoneReport: MilestoneReport

  """An edge for our `MilestoneReport`. May be used by Relay 1."""
  milestoneReportEdge(
    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `MilestoneReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement
}

"""All input for the create `ProjectContact` mutation."""
input CreateProjectContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectContact` to be created by this mutation."""
  projectContact: ProjectContactInput!
}

"""The output of our create `ProjectContact` mutation."""
type CreateProjectContactPayload {
  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Contact` that is related to this `ProjectContact`."""
  contactByContactId: Contact

  """Reads a single `Project` that is related to this `ProjectContact`."""
  projectByProjectId: Project

  """The `ProjectContact` that was created by this mutation."""
  projectContact: ProjectContact

  """An edge for our `ProjectContact`. May be used by Relay 1."""
  projectContactEdge(
    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createProject` mutation."""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""All input for the create `ProjectManager` mutation."""
input CreateProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectManager` to be created by this mutation."""
  projectManager: ProjectManagerInput!
}

"""All input for the create `ProjectManagerLabel` mutation."""
input CreateProjectManagerLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectManagerLabel` to be created by this mutation."""
  projectManagerLabel: ProjectManagerLabelInput!
}

"""The output of our create `ProjectManagerLabel` mutation."""
type CreateProjectManagerLabelPayload {
  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectManagerLabel` that was created by this mutation."""
  projectManagerLabel: ProjectManagerLabel

  """An edge for our `ProjectManagerLabel`. May be used by Relay 1."""
  projectManagerLabelEdge(
    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `ProjectManager` mutation."""
type CreateProjectManagerPayload {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """The `ProjectManager` that was created by this mutation."""
  projectManager: ProjectManager

  """An edge for our `ProjectManager`. May be used by Relay 1."""
  projectManagerEdge(
    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our `createProject` mutation."""
type CreateProjectPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType
}

"""All input for the create `ProjectRevisionAmendmentType` mutation."""
input CreateProjectRevisionAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectRevisionAmendmentType` to be created by this mutation."""
  projectRevisionAmendmentType: ProjectRevisionAmendmentTypeInput!
}

"""The output of our create `ProjectRevisionAmendmentType` mutation."""
type CreateProjectRevisionAmendmentTypePayload {
  """
  Reads a single `AmendmentType` that is related to this `ProjectRevisionAmendmentType`.
  """
  amendmentTypeByAmendmentType: AmendmentType

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectRevisionAmendmentType` that was created by this mutation."""
  projectRevisionAmendmentType: ProjectRevisionAmendmentType

  """
  An edge for our `ProjectRevisionAmendmentType`. May be used by Relay 1.
  """
  projectRevisionAmendmentTypeEdge(
    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesEdge

  """
  Reads a single `ProjectRevision` that is related to this `ProjectRevisionAmendmentType`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createProjectRevision` mutation."""
input CreateProjectRevisionInput {
  amendmentTypes: [String]

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectId: Int!
  revisionType: String
}

"""The output of our `createProjectRevision` mutation."""
type CreateProjectRevisionPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType
}

"""All input for the create `ProjectStatus` mutation."""
input CreateProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectStatus` to be created by this mutation."""
  projectStatus: ProjectStatusInput!
}

"""The output of our create `ProjectStatus` mutation."""
type CreateProjectStatusPayload {
  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectStatus` that was created by this mutation."""
  projectStatus: ProjectStatus

  """An edge for our `ProjectStatus`. May be used by Relay 1."""
  projectStatusEdge(
    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ProjectType` mutation."""
input CreateProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProjectType` to be created by this mutation."""
  projectType: ProjectTypeInput!
}

"""The output of our create `ProjectType` mutation."""
type CreateProjectTypePayload {
  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectType` that was created by this mutation."""
  projectType: ProjectType

  """An edge for our `ProjectType`. May be used by Relay 1."""
  projectTypeEdge(
    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ReportType` mutation."""
input CreateReportTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ReportType` to be created by this mutation."""
  reportType: ReportTypeInput!
}

"""The output of our create `ReportType` mutation."""
type CreateReportTypePayload {
  """Reads a single `CifUser` that is related to this `ReportType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ReportType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ReportType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReportType` that was created by this mutation."""
  reportType: ReportType

  """An edge for our `ReportType`. May be used by Relay 1."""
  reportTypeEdge(
    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesEdge
}

"""All input for the create `RevisionStatus` mutation."""
input CreateRevisionStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RevisionStatus` to be created by this mutation."""
  revisionStatus: RevisionStatusInput!
}

"""The output of our create `RevisionStatus` mutation."""
type CreateRevisionStatusPayload {
  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RevisionStatus` that was created by this mutation."""
  revisionStatus: RevisionStatus

  """An edge for our `RevisionStatus`. May be used by Relay 1."""
  revisionStatusEdge(
    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesEdge
}

"""All input for the create `RevisionType` mutation."""
input CreateRevisionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `RevisionType` to be created by this mutation."""
  revisionType: RevisionTypeInput!
}

"""The output of our create `RevisionType` mutation."""
type CreateRevisionTypePayload {
  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RevisionType` that was created by this mutation."""
  revisionType: RevisionType

  """An edge for our `RevisionType`. May be used by Relay 1."""
  revisionTypeEdge(
    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesEdge
}

"""All input for the create `Sector` mutation."""
input CreateSectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Sector` to be created by this mutation."""
  sector: SectorInput!
}

"""The output of our create `Sector` mutation."""
type CreateSectorPayload {
  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sector` that was created by this mutation."""
  sector: Sector

  """An edge for our `Sector`. May be used by Relay 1."""
  sectorEdge(
    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteAdditionalFundingSourceByRowId` mutation."""
input DeleteAdditionalFundingSourceByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the additional funding source"""
  rowId: Int!
}

"""All input for the `deleteAdditionalFundingSource` mutation."""
input DeleteAdditionalFundingSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalFundingSource` to be deleted.
  """
  id: ID!
}

"""The output of our delete `AdditionalFundingSource` mutation."""
type DeleteAdditionalFundingSourcePayload {
  """The `AdditionalFundingSource` that was deleted by this mutation."""
  additionalFundingSource: AdditionalFundingSource

  """An edge for our `AdditionalFundingSource`. May be used by Relay 1."""
  additionalFundingSourceEdge(
    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesEdge

  """
  Reads a single `AdditionalFundingSourceStatus` that is related to this `AdditionalFundingSource`.
  """
  additionalFundingSourceStatusByStatus: AdditionalFundingSourceStatus

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAdditionalFundingSourceId: ID

  """
  Reads a single `Project` that is related to this `AdditionalFundingSource`.
  """
  projectByProjectId: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteAdditionalFundingSourceStatusByStatusName` mutation.
"""
input DeleteAdditionalFundingSourceStatusByStatusNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status as the primary key"""
  statusName: String!
}

"""All input for the `deleteAdditionalFundingSourceStatus` mutation."""
input DeleteAdditionalFundingSourceStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalFundingSourceStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `AdditionalFundingSourceStatus` mutation."""
type DeleteAdditionalFundingSourceStatusPayload {
  """The `AdditionalFundingSourceStatus` that was deleted by this mutation."""
  additionalFundingSourceStatus: AdditionalFundingSourceStatus

  """
  An edge for our `AdditionalFundingSourceStatus`. May be used by Relay 1.
  """
  additionalFundingSourceStatusEdge(
    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesEdge

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAdditionalFundingSourceStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteAmendmentTypeByName` mutation."""
input DeleteAmendmentTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the amendment type as the primary key"""
  name: String!
}

"""All input for the `deleteAmendmentType` mutation."""
input DeleteAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AmendmentType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `AmendmentType` mutation."""
type DeleteAmendmentTypePayload {
  """The `AmendmentType` that was deleted by this mutation."""
  amendmentType: AmendmentType

  """An edge for our `AmendmentType`. May be used by Relay 1."""
  amendmentTypeEdge(
    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesEdge

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAmendmentTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteAttachmentByRowId` mutation."""
input DeleteAttachmentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the attachment"""
  rowId: Int!
}

"""All input for the `deleteAttachment` mutation."""
input DeleteAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Attachment` mutation."""
type DeleteAttachmentPayload {
  """The `Attachment` that was deleted by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedAttachmentId: ID

  """Reads a single `Project` that is related to this `Attachment`."""
  projectByProjectId: Project

  """Reads a single `ProjectStatus` that is related to this `Attachment`."""
  projectStatusByProjectStatusId: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteChangeStatusByStatus` mutation."""
input DeleteChangeStatusByStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!
}

"""All input for the `deleteChangeStatus` mutation."""
input DeleteChangeStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ChangeStatus` mutation."""
type DeleteChangeStatusPayload {
  """The `ChangeStatus` that was deleted by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedChangeStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCifUserByRowId` mutation."""
input DeleteCifUserByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `deleteCifUser` mutation."""
input DeleteCifUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be deleted.
  """
  id: ID!
}

"""The output of our delete `CifUser` mutation."""
type DeleteCifUserPayload {
  """The `CifUser` that was deleted by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedCifUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformance` mutation.
"""
input DeleteEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
    The calculated emission intensity performance.
    This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  
  """
  maxEmissionIntensityPerformance: BigFloat!
}

"""
All input for the `deleteEmissionIntensityPaymentPercentByRowId` mutation.
"""
input DeleteEmissionIntensityPaymentPercentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the emission_intensity_payment_percent"""
  rowId: Int!
}

"""All input for the `deleteEmissionIntensityPaymentPercent` mutation."""
input DeleteEmissionIntensityPaymentPercentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionIntensityPaymentPercent` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EmissionIntensityPaymentPercent` mutation."""
type DeleteEmissionIntensityPaymentPercentPayload {
  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEmissionIntensityPaymentPercentId: ID

  """
  The `EmissionIntensityPaymentPercent` that was deleted by this mutation.
  """
  emissionIntensityPaymentPercent: EmissionIntensityPaymentPercent

  """
  An edge for our `EmissionIntensityPaymentPercent`. May be used by Relay 1.
  """
  emissionIntensityPaymentPercentEdge(
    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteEmissionIntensityReportByRowId` mutation."""
input DeleteEmissionIntensityReportByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the emission_intensity_report"""
  rowId: Int!
}

"""All input for the `deleteEmissionIntensityReport` mutation."""
input DeleteEmissionIntensityReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionIntensityReport` to be deleted.
  """
  id: ID!
}

"""The output of our delete `EmissionIntensityReport` mutation."""
type DeleteEmissionIntensityReportPayload {
  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEmissionIntensityReportId: ID

  """The `EmissionIntensityReport` that was deleted by this mutation."""
  emissionIntensityReport: EmissionIntensityReport

  """An edge for our `EmissionIntensityReport`. May be used by Relay 1."""
  emissionIntensityReportEdge(
    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `EmissionIntensityReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement
}

"""All input for the `deleteFormByRowId` mutation."""
input DeleteFormByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form data."""
  rowId: Int!
}

"""All input for the `deleteFormBySlug` mutation."""
input DeleteFormBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique short name identifier for the json_schema data."""
  slug: String!
}

"""All input for the `deleteFormChangeByRowId` mutation."""
input DeleteFormChangeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the form_change"""
  rowId: Int!
}

"""All input for the `deleteFormChange` mutation."""
input DeleteFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormChange` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FormChange` mutation."""
type DeleteFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormChangeId: ID

  """Reads a single `Form` that is related to this `FormChange`."""
  formByJsonSchemaName: Form

  """The `FormChange` that was deleted by this mutation."""
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteForm` mutation."""
input DeleteFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Form` mutation."""
type DeleteFormPayload {
  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFormId: ID

  """The `Form` that was deleted by this mutation."""
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFundingParameterByRowId` mutation."""
input DeleteFundingParameterByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the funding agreement data"""
  rowId: Int!
}

"""All input for the `deleteFundingParameter` mutation."""
input DeleteFundingParameterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingParameter` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FundingParameter` mutation."""
type DeleteFundingParameterPayload {
  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFundingParameterId: ID

  """The `FundingParameter` that was deleted by this mutation."""
  fundingParameter: FundingParameter

  """An edge for our `FundingParameter`. May be used by Relay 1."""
  fundingParameterEdge(
    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersEdge

  """Reads a single `Project` that is related to this `FundingParameter`."""
  projectByProjectId: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFundingStreamByRowId` mutation."""
input DeleteFundingStreamByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the funding_stream"""
  rowId: Int!
}

"""All input for the `deleteFundingStream` mutation."""
input DeleteFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStream` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FundingStream` mutation."""
type DeleteFundingStreamPayload {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFundingStreamId: ID

  """The `FundingStream` that was deleted by this mutation."""
  fundingStream: FundingStream

  """An edge for our `FundingStream`. May be used by Relay 1."""
  fundingStreamEdge(
    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFundingStreamRfpByRowId` mutation."""
input DeleteFundingStreamRfpByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the funding_stream_rfp"""
  rowId: Int!
}

"""All input for the `deleteFundingStreamRfp` mutation."""
input DeleteFundingStreamRfpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStreamRfp` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FundingStreamRfp` mutation."""
type DeleteFundingStreamRfpPayload {
  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFundingStreamRfpId: ID

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """The `FundingStreamRfp` that was deleted by this mutation."""
  fundingStreamRfp: FundingStreamRfp

  """An edge for our `FundingStreamRfp`. May be used by Relay 1."""
  fundingStreamRfpEdge(
    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteFundingStreamRfpProjectStatusByRowId` mutation.
"""
input DeleteFundingStreamRfpProjectStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Primary key for funding_stream_rfp_project_status table"""
  rowId: Int!
}

"""All input for the `deleteFundingStreamRfpProjectStatus` mutation."""
input DeleteFundingStreamRfpProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStreamRfpProjectStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `FundingStreamRfpProjectStatus` mutation."""
type DeleteFundingStreamRfpProjectStatusPayload {
  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFundingStreamRfpProjectStatusId: ID

  """
  Reads a single `FundingStreamRfp` that is related to this `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """The `FundingStreamRfpProjectStatus` that was deleted by this mutation."""
  fundingStreamRfpProjectStatus: FundingStreamRfpProjectStatus

  """
  An edge for our `FundingStreamRfpProjectStatus`. May be used by Relay 1.
  """
  fundingStreamRfpProjectStatusEdge(
    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesEdge

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamRfpProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMilestoneReportByRowId` mutation."""
input DeleteMilestoneReportByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the milestone_report"""
  rowId: Int!
}

"""All input for the `deleteMilestoneReport` mutation."""
input DeleteMilestoneReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MilestoneReport` to be deleted.
  """
  id: ID!
}

"""The output of our delete `MilestoneReport` mutation."""
type DeleteMilestoneReportPayload {
  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMilestoneReportId: ID

  """The `MilestoneReport` that was deleted by this mutation."""
  milestoneReport: MilestoneReport

  """An edge for our `MilestoneReport`. May be used by Relay 1."""
  milestoneReportEdge(
    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `MilestoneReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement
}

"""All input for the `deleteProjectContactByRowId` mutation."""
input DeleteProjectContactByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project contact record"""
  rowId: Int!
}

"""All input for the `deleteProjectContact` mutation."""
input DeleteProjectContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectContact` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectContact` mutation."""
type DeleteProjectContactPayload {
  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Contact` that is related to this `ProjectContact`."""
  contactByContactId: Contact
  deletedProjectContactId: ID

  """Reads a single `Project` that is related to this `ProjectContact`."""
  projectByProjectId: Project

  """The `ProjectContact` that was deleted by this mutation."""
  projectContact: ProjectContact

  """An edge for our `ProjectContact`. May be used by Relay 1."""
  projectContactEdge(
    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectManagerByRowId` mutation."""
input DeleteProjectManagerByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project manager record"""
  rowId: Int!
}

"""All input for the `deleteProjectManager` mutation."""
input DeleteProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManager` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteProjectManagerLabelByLabel` mutation."""
input DeleteProjectManagerLabelByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The label that project managers can be assigned to a project as"""
  label: String!
}

"""All input for the `deleteProjectManagerLabelByRowId` mutation."""
input DeleteProjectManagerLabelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project_manager_label record"""
  rowId: Int!
}

"""All input for the `deleteProjectManagerLabel` mutation."""
input DeleteProjectManagerLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManagerLabel` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectManagerLabel` mutation."""
type DeleteProjectManagerLabelPayload {
  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectManagerLabelId: ID

  """The `ProjectManagerLabel` that was deleted by this mutation."""
  projectManagerLabel: ProjectManagerLabel

  """An edge for our `ProjectManagerLabel`. May be used by Relay 1."""
  projectManagerLabelEdge(
    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `ProjectManager` mutation."""
type DeleteProjectManagerPayload {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectManagerId: ID

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """The `ProjectManager` that was deleted by this mutation."""
  projectManager: ProjectManager

  """An edge for our `ProjectManager`. May be used by Relay 1."""
  projectManagerEdge(
    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `deleteProjectRevisionAmendmentTypeByRowId` mutation.
"""
input DeleteProjectRevisionAmendmentTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project revision amendment type."""
  rowId: Int!
}

"""All input for the `deleteProjectRevisionAmendmentType` mutation."""
input DeleteProjectRevisionAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevisionAmendmentType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectRevisionAmendmentType` mutation."""
type DeleteProjectRevisionAmendmentTypePayload {
  """
  Reads a single `AmendmentType` that is related to this `ProjectRevisionAmendmentType`.
  """
  amendmentTypeByAmendmentType: AmendmentType

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectRevisionAmendmentTypeId: ID

  """The `ProjectRevisionAmendmentType` that was deleted by this mutation."""
  projectRevisionAmendmentType: ProjectRevisionAmendmentType

  """
  An edge for our `ProjectRevisionAmendmentType`. May be used by Relay 1.
  """
  projectRevisionAmendmentTypeEdge(
    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesEdge

  """
  Reads a single `ProjectRevision` that is related to this `ProjectRevisionAmendmentType`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectRevision` mutation."""
input DeleteProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int!
}

"""The output of our `deleteProjectRevision` mutation."""
type DeleteProjectRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectStatusByRowId` mutation."""
input DeleteProjectStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project_status"""
  rowId: Int!
}

"""All input for the `deleteProjectStatus` mutation."""
input DeleteProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectStatus` mutation."""
type DeleteProjectStatusPayload {
  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectStatusId: ID

  """The `ProjectStatus` that was deleted by this mutation."""
  projectStatus: ProjectStatus

  """An edge for our `ProjectStatus`. May be used by Relay 1."""
  projectStatusEdge(
    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProjectTypeByName` mutation."""
input DeleteProjectTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the project_type"""
  name: String!
}

"""All input for the `deleteProjectTypeByRowId` mutation."""
input DeleteProjectTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the project_type"""
  rowId: Int!
}

"""All input for the `deleteProjectType` mutation."""
input DeleteProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `ProjectType` mutation."""
type DeleteProjectTypePayload {
  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProjectTypeId: ID

  """The `ProjectType` that was deleted by this mutation."""
  projectType: ProjectType

  """An edge for our `ProjectType`. May be used by Relay 1."""
  projectTypeEdge(
    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteRevisionStatusByName` mutation."""
input DeleteRevisionStatusByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the amendment status as the primary key"""
  name: String!
}

"""All input for the `deleteRevisionStatus` mutation."""
input DeleteRevisionStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RevisionStatus` to be deleted.
  """
  id: ID!
}

"""The output of our delete `RevisionStatus` mutation."""
type DeleteRevisionStatusPayload {
  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRevisionStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RevisionStatus` that was deleted by this mutation."""
  revisionStatus: RevisionStatus

  """An edge for our `RevisionStatus`. May be used by Relay 1."""
  revisionStatusEdge(
    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesEdge
}

"""All input for the `deleteRevisionTypeByType` mutation."""
input DeleteRevisionTypeByTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The type of the revision type as the primary key"""
  type: String!
}

"""All input for the `deleteRevisionType` mutation."""
input DeleteRevisionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RevisionType` to be deleted.
  """
  id: ID!
}

"""The output of our delete `RevisionType` mutation."""
type DeleteRevisionTypePayload {
  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedRevisionTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RevisionType` that was deleted by this mutation."""
  revisionType: RevisionType

  """An edge for our `RevisionType`. May be used by Relay 1."""
  revisionTypeEdge(
    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesEdge
}

"""All input for the `deleteSectorBySectorName` mutation."""
input DeleteSectorBySectorNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the sector as the primary key"""
  sectorName: String!
}

"""All input for the `deleteSector` mutation."""
input DeleteSectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sector` to be deleted.
  """
  id: ID!
}

"""The output of our delete `Sector` mutation."""
type DeleteSectorPayload {
  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSectorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sector` that was deleted by this mutation."""
  sector: Sector

  """An edge for our `Sector`. May be used by Relay 1."""
  sectorEdge(
    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsEdge
}

"""All input for the `discardAdditionalFundingSourceFormChange` mutation."""
input DiscardAdditionalFundingSourceFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formChangeId: Int!
}

"""The output of our `discardAdditionalFundingSourceFormChange` mutation."""
type DiscardAdditionalFundingSourceFormChangePayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType
}

"""All input for the `discardEmissionIntensityReport` mutation."""
input DiscardEmissionIntensityReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int!
}

"""The output of our `discardEmissionIntensityReport` mutation."""
type DiscardEmissionIntensityReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `discardFundingParameterFormChange` mutation."""
input DiscardFundingParameterFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int!
}

"""The output of our `discardFundingParameterFormChange` mutation."""
type DiscardFundingParameterFormChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
  Table containing information about how CIF emission_intensity values map to a payment_percentage.
  This table is a lookup table that maps the emission intensity performance of a project to a payment percentage used to determine payments.
  The calculation for determininng emission intensity performance uses three metrics and a calculation.
  Metrics:
  - BEI: Baseline Emission Intensity
  - PEI: Post-Project Emission Intensity
  - TEI: Target Emission Intensity
  Calculation:
  - Emission Intensity Performance = (BEI - PEI) / (BEI - TEI) * 100

"""
type EmissionIntensityPaymentPercent implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
    The calculated emission intensity performance.
    This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  
  """
  maxEmissionIntensityPerformance: BigFloat!

  """
  The payment percentage linked to the value of max_emission_intensity_performance
  """
  paymentPercentage: BigFloat!

  """Unique ID for the emission_intensity_payment_percent"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `EmissionIntensityPaymentPercent` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input EmissionIntensityPaymentPercentCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """
  Checks for equality with the object’s `maxEmissionIntensityPerformance` field.
  """
  maxEmissionIntensityPerformance: BigFloat

  """Checks for equality with the object’s `paymentPercentage` field."""
  paymentPercentage: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `EmissionIntensityPaymentPercent` object types. All fields are combined with a logical ‘and.’
"""
input EmissionIntensityPaymentPercentFilter {
  """Checks for all expressions in this list."""
  and: [EmissionIntensityPaymentPercentFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `maxEmissionIntensityPerformance` field."""
  maxEmissionIntensityPerformance: BigFloatFilter

  """Negates the expression."""
  not: EmissionIntensityPaymentPercentFilter

  """Checks for any expressions in this list."""
  or: [EmissionIntensityPaymentPercentFilter!]

  """Filter by the object’s `paymentPercentage` field."""
  paymentPercentage: BigFloatFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `EmissionIntensityPaymentPercent`"""
input EmissionIntensityPaymentPercentInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
    The calculated emission intensity performance.
    This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  
  """
  maxEmissionIntensityPerformance: BigFloat!

  """
  The payment percentage linked to the value of max_emission_intensity_performance
  """
  paymentPercentage: BigFloat!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `EmissionIntensityPaymentPercent`. Fields that are set will be updated.
"""
input EmissionIntensityPaymentPercentPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
    The calculated emission intensity performance.
    This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  
  """
  maxEmissionIntensityPerformance: BigFloat

  """
  The payment percentage linked to the value of max_emission_intensity_performance
  """
  paymentPercentage: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `EmissionIntensityPaymentPercent` values."""
type EmissionIntensityPaymentPercentsConnection {
  """
  A list of edges which contains the `EmissionIntensityPaymentPercent` and cursor to aid in pagination.
  """
  edges: [EmissionIntensityPaymentPercentsEdge!]!

  """A list of `EmissionIntensityPaymentPercent` objects."""
  nodes: [EmissionIntensityPaymentPercent]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionIntensityPaymentPercent` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmissionIntensityPaymentPercent` edge in the connection."""
type EmissionIntensityPaymentPercentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionIntensityPaymentPercent` at the end of the edge."""
  node: EmissionIntensityPaymentPercent
}

"""Methods to use when ordering `EmissionIntensityPaymentPercent`."""
enum EmissionIntensityPaymentPercentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  MAX_EMISSION_INTENSITY_PERFORMANCE_ASC
  MAX_EMISSION_INTENSITY_PERFORMANCE_DESC
  NATURAL
  PAYMENT_PERCENTAGE_ASC
  PAYMENT_PERCENTAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about a CIF emission_intensity_report"""
type EmissionIntensityReport implements Node {
  """
  User defined value corresponding to the calculated emission intensity performance. The calculated value gets manually rounded
  """
  adjustedEmissionsIntensityPerformance: BigFloat

  """
  An override field to manually adjust the calculated TEIMP holdback payment amount
  """
  adjustedHoldbackPaymentAmount: BigFloat

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  The baseline emission intensity used as a benchmark for calculating emission intensity performance
  """
  baselineEmissionIntensity: BigFloat

  """Returns the calculated EI intensity value"""
  calculatedEiPerformance: BigFloat

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """The date the payment was issued"""
  dateSentToCsnr: Datetime

  """The units in which the emissions are measured"""
  emissionFunctionalUnit: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The date when the measurement period ends for a project"""
  measurementPeriodEndDate: Datetime

  """The date when the measurement period starts for a project"""
  measurementPeriodStartDate: Datetime

  """
  The actual emission intensity achieved after a project has completed, used in calculating emission intensity performance
  """
  postProjectEmissionIntensity: BigFloat

  """
  The units in which the production item that generates emissions are measured
  """
  productionFunctionalUnit: String

  """
  Reads a single `ReportingRequirement` that is related to this `EmissionIntensityReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """Foreign key to for the reporting_requirement table"""
  reportingRequirementId: Int!

  """Unique ID for the emission_intensity_report"""
  rowId: Int!

  """
  The emission intensity defined as a target after a project has completed, used in calculating emission intensity performance
  """
  targetEmissionIntensity: BigFloat

  """
  The total amount of emission reduction expected from the outcome of this project
  """
  totalLifetimeEmissionReduction: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `EmissionIntensityReport` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input EmissionIntensityReportCondition {
  """
  Checks for equality with the object’s `adjustedEmissionsIntensityPerformance` field.
  """
  adjustedEmissionsIntensityPerformance: BigFloat

  """
  Checks for equality with the object’s `adjustedHoldbackPaymentAmount` field.
  """
  adjustedHoldbackPaymentAmount: BigFloat

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """
  Checks for equality with the object’s `baselineEmissionIntensity` field.
  """
  baselineEmissionIntensity: BigFloat

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `dateSentToCsnr` field."""
  dateSentToCsnr: Datetime

  """Checks for equality with the object’s `emissionFunctionalUnit` field."""
  emissionFunctionalUnit: String

  """
  Checks for equality with the object’s `measurementPeriodEndDate` field.
  """
  measurementPeriodEndDate: Datetime

  """
  Checks for equality with the object’s `measurementPeriodStartDate` field.
  """
  measurementPeriodStartDate: Datetime

  """
  Checks for equality with the object’s `postProjectEmissionIntensity` field.
  """
  postProjectEmissionIntensity: BigFloat

  """
  Checks for equality with the object’s `productionFunctionalUnit` field.
  """
  productionFunctionalUnit: String

  """Checks for equality with the object’s `reportingRequirementId` field."""
  reportingRequirementId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `targetEmissionIntensity` field."""
  targetEmissionIntensity: BigFloat

  """
  Checks for equality with the object’s `totalLifetimeEmissionReduction` field.
  """
  totalLifetimeEmissionReduction: BigFloat

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `EmissionIntensityReport` object types. All fields are combined with a logical ‘and.’
"""
input EmissionIntensityReportFilter {
  """Filter by the object’s `adjustedEmissionsIntensityPerformance` field."""
  adjustedEmissionsIntensityPerformance: BigFloatFilter

  """Filter by the object’s `adjustedHoldbackPaymentAmount` field."""
  adjustedHoldbackPaymentAmount: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [EmissionIntensityReportFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `baselineEmissionIntensity` field."""
  baselineEmissionIntensity: BigFloatFilter

  """Filter by the object’s `calculatedEiPerformance` field."""
  calculatedEiPerformance: BigFloatFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `dateSentToCsnr` field."""
  dateSentToCsnr: DatetimeFilter

  """Filter by the object’s `emissionFunctionalUnit` field."""
  emissionFunctionalUnit: StringFilter

  """Filter by the object’s `measurementPeriodEndDate` field."""
  measurementPeriodEndDate: DatetimeFilter

  """Filter by the object’s `measurementPeriodStartDate` field."""
  measurementPeriodStartDate: DatetimeFilter

  """Negates the expression."""
  not: EmissionIntensityReportFilter

  """Checks for any expressions in this list."""
  or: [EmissionIntensityReportFilter!]

  """Filter by the object’s `postProjectEmissionIntensity` field."""
  postProjectEmissionIntensity: BigFloatFilter

  """Filter by the object’s `productionFunctionalUnit` field."""
  productionFunctionalUnit: StringFilter

  """
  Filter by the object’s `reportingRequirementByReportingRequirementId` relation.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirementFilter

  """Filter by the object’s `reportingRequirementId` field."""
  reportingRequirementId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `targetEmissionIntensity` field."""
  targetEmissionIntensity: BigFloatFilter

  """Filter by the object’s `totalLifetimeEmissionReduction` field."""
  totalLifetimeEmissionReduction: BigFloatFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `EmissionIntensityReport`"""
input EmissionIntensityReportInput {
  """
  User defined value corresponding to the calculated emission intensity performance. The calculated value gets manually rounded
  """
  adjustedEmissionsIntensityPerformance: BigFloat

  """
  An override field to manually adjust the calculated TEIMP holdback payment amount
  """
  adjustedHoldbackPaymentAmount: BigFloat

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  The baseline emission intensity used as a benchmark for calculating emission intensity performance
  """
  baselineEmissionIntensity: BigFloat

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The date the payment was issued"""
  dateSentToCsnr: Datetime

  """The units in which the emissions are measured"""
  emissionFunctionalUnit: String

  """The date when the measurement period ends for a project"""
  measurementPeriodEndDate: Datetime

  """The date when the measurement period starts for a project"""
  measurementPeriodStartDate: Datetime

  """
  The actual emission intensity achieved after a project has completed, used in calculating emission intensity performance
  """
  postProjectEmissionIntensity: BigFloat

  """
  The units in which the production item that generates emissions are measured
  """
  productionFunctionalUnit: String

  """Foreign key to for the reporting_requirement table"""
  reportingRequirementId: Int!

  """
  The emission intensity defined as a target after a project has completed, used in calculating emission intensity performance
  """
  targetEmissionIntensity: BigFloat

  """
  The total amount of emission reduction expected from the outcome of this project
  """
  totalLifetimeEmissionReduction: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `EmissionIntensityReport`. Fields that are set will be updated.
"""
input EmissionIntensityReportPatch {
  """
  User defined value corresponding to the calculated emission intensity performance. The calculated value gets manually rounded
  """
  adjustedEmissionsIntensityPerformance: BigFloat

  """
  An override field to manually adjust the calculated TEIMP holdback payment amount
  """
  adjustedHoldbackPaymentAmount: BigFloat

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  The baseline emission intensity used as a benchmark for calculating emission intensity performance
  """
  baselineEmissionIntensity: BigFloat

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The date the payment was issued"""
  dateSentToCsnr: Datetime

  """The units in which the emissions are measured"""
  emissionFunctionalUnit: String

  """The date when the measurement period ends for a project"""
  measurementPeriodEndDate: Datetime

  """The date when the measurement period starts for a project"""
  measurementPeriodStartDate: Datetime

  """
  The actual emission intensity achieved after a project has completed, used in calculating emission intensity performance
  """
  postProjectEmissionIntensity: BigFloat

  """
  The units in which the production item that generates emissions are measured
  """
  productionFunctionalUnit: String

  """Foreign key to for the reporting_requirement table"""
  reportingRequirementId: Int

  """
  The emission intensity defined as a target after a project has completed, used in calculating emission intensity performance
  """
  targetEmissionIntensity: BigFloat

  """
  The total amount of emission reduction expected from the outcome of this project
  """
  totalLifetimeEmissionReduction: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `EmissionIntensityReport` values."""
type EmissionIntensityReportsConnection {
  """
  A list of edges which contains the `EmissionIntensityReport` and cursor to aid in pagination.
  """
  edges: [EmissionIntensityReportsEdge!]!

  """A list of `EmissionIntensityReport` objects."""
  nodes: [EmissionIntensityReport]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionIntensityReport` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EmissionIntensityReport` edge in the connection."""
type EmissionIntensityReportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EmissionIntensityReport` at the end of the edge."""
  node: EmissionIntensityReport
}

"""Methods to use when ordering `EmissionIntensityReport`."""
enum EmissionIntensityReportsOrderBy {
  ADJUSTED_EMISSIONS_INTENSITY_PERFORMANCE_ASC
  ADJUSTED_EMISSIONS_INTENSITY_PERFORMANCE_DESC
  ADJUSTED_HOLDBACK_PAYMENT_AMOUNT_ASC
  ADJUSTED_HOLDBACK_PAYMENT_AMOUNT_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  BASELINE_EMISSION_INTENSITY_ASC
  BASELINE_EMISSION_INTENSITY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DATE_SENT_TO_CSNR_ASC
  DATE_SENT_TO_CSNR_DESC
  EMISSION_FUNCTIONAL_UNIT_ASC
  EMISSION_FUNCTIONAL_UNIT_DESC
  ID_ASC
  ID_DESC
  MEASUREMENT_PERIOD_END_DATE_ASC
  MEASUREMENT_PERIOD_END_DATE_DESC
  MEASUREMENT_PERIOD_START_DATE_ASC
  MEASUREMENT_PERIOD_START_DATE_DESC
  NATURAL
  POST_PROJECT_EMISSION_INTENSITY_ASC
  POST_PROJECT_EMISSION_INTENSITY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRODUCTION_FUNCTIONAL_UNIT_ASC
  PRODUCTION_FUNCTIONAL_UNIT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_AT_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_AT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_BY_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_BY_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__COMMENTS_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__COMMENTS_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_AT_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_AT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_BY_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_BY_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__DESCRIPTION_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__DESCRIPTION_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ID_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ID_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__PROJECT_ID_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__PROJECT_ID_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORTING_REQUIREMENT_INDEX_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORTING_REQUIREMENT_INDEX_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_DUE_DATE_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_DUE_DATE_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_TYPE_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_TYPE_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__SUBMITTED_DATE_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__SUBMITTED_DATE_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_AT_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_AT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_BY_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_BY_DESC
  REPORTING_REQUIREMENT_ID_ASC
  REPORTING_REQUIREMENT_ID_DESC
  TARGET_EMISSION_INTENSITY_ASC
  TARGET_EMISSION_INTENSITY_DESC
  TOTAL_LIFETIME_EMISSION_REDUCTION_ASC
  TOTAL_LIFETIME_EMISSION_REDUCTION_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
Table containing form handling data. It contains a schema for each front-end form and regprocedure function names to handle parsing the form_change data into tables.
"""
type Form implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeJsonSchemaNameAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeStatusesByFormChangeJsonSchemaNameAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeJsonSchemaNameAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormCifUsersByFormChangeJsonSchemaNameAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeJsonSchemaNameAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormCifUsersByFormChangeJsonSchemaNameAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Metadata describing the json_schema."""
  description: String!

  """
  A function that parses the form_change data into a table or set of tables.
  """
  formChangeCommitHandler: String!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByFormChangeJsonSchemaNameAndPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormFormChangesByFormChangeJsonSchemaNameAndPreviousFormChangeIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  The json_schema describing the shape of the form_change data for the corresponding form.
  """
  jsonSchema: JSON!

  """
  A function that can be used to dynamically alter the schema, such as altering constraints based on the contents of a table.
  """
  jsonSchemaGenerator: RegProcedure

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangeJsonSchemaNameAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormProjectRevisionsByFormChangeJsonSchemaNameAndProjectRevisionIdManyToManyConnection!

  """Unique ID for the form data."""
  rowId: Int!

  """Unique short name identifier for the json_schema data."""
  slug: String!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""Table tracking individual changes to database records"""
type FormChange implements Node {
  asEmissionIntensityReport: EmissionIntensityReport

  """
  Computed column returns data from the new_form_data column as if it were a project to allow graph traversal via the foreign keys.
  """
  asProject: Project

  """
  Computed column returns data from the new_form_data column as if it were a project_contact record to allow graph traversal via the foreign keys.
  """
  asProjectContact: ProjectContact

  """
  Computed column returns data from the new_form_data column as if it were a project_manager record to allow graph traversal via the foreign keys.
  """
  asProjectManager: ProjectManager

  """
  Computed column returns data from the new_form_data column as if it were a emission_intensity_report record to allow graph traversal via the foreign keys.
  """
  asReportingRequirement: ReportingRequirement

  """
  Computed column returns the calculated gross payment amount for a particular milestone based on the provinceSharePercentage for the project and eligible expenses for the milestone.
  """
  calculatedGrossAmountThisMilestone: BigFloat

  """
  Computed column returns the calculated holdback amount for a particular milestone based on the holdback percentage for the project and adjusted or calculated gross amount for the milestone with priority given to the adjusted amount.
  """
  calculatedHoldbackAmountThisMilestone: BigFloat

  """
  Computed column returns the calculated net payment amount for a particular milestone based on the adjusted or calculated holdback amount and adjusted or calculated gross amount for the milestone with priority given to the adjusted amounts.
  """
  calculatedNetAmountThisMilestone: BigFloat

  """
  The change status of this form change, foreign key to cif.change_status.
  """
  changeStatus: String!

  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangePreviousFormChangeIdAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeChangeStatusesByFormChangePreviousFormChangeIdAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangePreviousFormChangeIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeCifUsersByFormChangePreviousFormChangeIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangePreviousFormChangeIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeCifUsersByFormChangePreviousFormChangeIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  Computed column returns cumulative amount of eligible expenses reported up to and including this milestone.
  """
  eligibleExpensesToDate: BigFloat

  """Reads a single `Form` that is related to this `FormChange`."""
  formByJsonSchemaName: Form

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The id of the record on which this form change applies"""
  formDataRecordId: Int

  """The schema on which this form change applies"""
  formDataSchemaName: String!

  """The table on which this form change applies"""
  formDataTableName: String!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormChangePreviousFormChangeIdAndJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeFormsByFormChangePreviousFormChangeIdAndJsonSchemaNameManyToManyConnection!

  """
  Computed column returns cumulative sum of gross payments. With preference for value selection in order of adjustedGrossAmount > calculatedGrossAmount > maximumAmount
  """
  grossPaymentsToDate: BigFloat

  """
  Computed column returns sum all holdback amounts for a project. Preference for value selection is adjustedHoldbackAmount > calculuatedHoldbackAmount
  """
  holdbackAmountToDate: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  isPristine: Boolean
  isUniqueValue(columnName: String!): Boolean

  """The name of the JSON schema to use for validation of this form data"""
  jsonSchemaName: String!

  """
  Computed column returns cumulative sum of all net payments. Preference for value selection is adjustedNetAmount > calculuatedNetAmount
  """
  netPaymentsToDate: BigFloat

  """Unique ID for the form_change"""
  newFormData: JSON

  """The operation this form change describes: create, update or archive"""
  operation: FormChangeOperation!

  """
  returns an ancestor form_change from a specific revision for the form_change id passed in as a parameter
  """
  parentFormChangeFromRevision(projectRevisionId: Int!): FormChange

  """The id of the form_change record that preceded this one"""
  previousFormChangeId: Int

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """The project revision this change might be associated with (if known)"""
  projectRevisionId: Int

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangeProjectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionIdManyToManyConnection!

  """
  A computed column to return the status for a reporting requirement form_change record based on the report_due_date and submitted_date
  """
  reportingRequirementStatus: String

  """Unique ID for the form_change"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """
  The validation errors computed for this record's new_form_data and the json_schema_name schema
  """
  validationErrors: JSON
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type FormChangeChangeStatusesByFormChangePreviousFormChangeIdAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeChangeStatusesByFormChangePreviousFormChangeIdAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type FormChangeChangeStatusesByFormChangePreviousFormChangeIdAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type FormChangeCifUsersByFormChangePreviousFormChangeIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeCifUsersByFormChangePreviousFormChangeIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type FormChangeCifUsersByFormChangePreviousFormChangeIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type FormChangeCifUsersByFormChangePreviousFormChangeIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeCifUsersByFormChangePreviousFormChangeIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type FormChangeCifUsersByFormChangePreviousFormChangeIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A condition to be used against `FormChange` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormChangeCondition {
  """Checks for equality with the object’s `changeStatus` field."""
  changeStatus: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `formDataRecordId` field."""
  formDataRecordId: Int

  """Checks for equality with the object’s `formDataSchemaName` field."""
  formDataSchemaName: String

  """Checks for equality with the object’s `formDataTableName` field."""
  formDataTableName: String

  """Checks for equality with the object’s `jsonSchemaName` field."""
  jsonSchemaName: String

  """Checks for equality with the object’s `newFormData` field."""
  newFormData: JSON

  """Checks for equality with the object’s `operation` field."""
  operation: FormChangeOperation

  """Checks for equality with the object’s `previousFormChangeId` field."""
  previousFormChangeId: Int

  """Checks for equality with the object’s `projectRevisionId` field."""
  projectRevisionId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `validationErrors` field."""
  validationErrors: JSON
}

"""
A filter to be used against `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input FormChangeFilter {
  """Checks for all expressions in this list."""
  and: [FormChangeFilter!]

  """Filter by the object’s `calculatedGrossAmountThisMilestone` field."""
  calculatedGrossAmountThisMilestone: BigFloatFilter

  """Filter by the object’s `calculatedHoldbackAmountThisMilestone` field."""
  calculatedHoldbackAmountThisMilestone: BigFloatFilter

  """Filter by the object’s `calculatedNetAmountThisMilestone` field."""
  calculatedNetAmountThisMilestone: BigFloatFilter

  """Filter by the object’s `changeStatus` field."""
  changeStatus: StringFilter

  """Filter by the object’s `changeStatusByChangeStatus` relation."""
  changeStatusByChangeStatus: ChangeStatusFilter

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `eligibleExpensesToDate` field."""
  eligibleExpensesToDate: BigFloatFilter

  """Filter by the object’s `formByJsonSchemaName` relation."""
  formByJsonSchemaName: FormFilter

  """Filter by the object’s `formChangeByPreviousFormChangeId` relation."""
  formChangeByPreviousFormChangeId: FormChangeFilter

  """A related `formChangeByPreviousFormChangeId` exists."""
  formChangeByPreviousFormChangeIdExists: Boolean

  """Filter by the object’s `formChangesByPreviousFormChangeId` relation."""
  formChangesByPreviousFormChangeId: FormChangeToManyFormChangeFilter

  """Some related `formChangesByPreviousFormChangeId` exist."""
  formChangesByPreviousFormChangeIdExist: Boolean

  """Filter by the object’s `formDataRecordId` field."""
  formDataRecordId: IntFilter

  """Filter by the object’s `formDataSchemaName` field."""
  formDataSchemaName: StringFilter

  """Filter by the object’s `formDataTableName` field."""
  formDataTableName: StringFilter

  """Filter by the object’s `grossPaymentsToDate` field."""
  grossPaymentsToDate: BigFloatFilter

  """Filter by the object’s `holdbackAmountToDate` field."""
  holdbackAmountToDate: BigFloatFilter

  """Filter by the object’s `isPristine` field."""
  isPristine: BooleanFilter

  """Filter by the object’s `jsonSchemaName` field."""
  jsonSchemaName: StringFilter

  """Filter by the object’s `netPaymentsToDate` field."""
  netPaymentsToDate: BigFloatFilter

  """Filter by the object’s `newFormData` field."""
  newFormData: JSONFilter

  """Negates the expression."""
  not: FormChangeFilter

  """Filter by the object’s `operation` field."""
  operation: FormChangeOperationFilter

  """Checks for any expressions in this list."""
  or: [FormChangeFilter!]

  """Filter by the object’s `previousFormChangeId` field."""
  previousFormChangeId: IntFilter

  """Filter by the object’s `projectRevisionByProjectRevisionId` relation."""
  projectRevisionByProjectRevisionId: ProjectRevisionFilter

  """A related `projectRevisionByProjectRevisionId` exists."""
  projectRevisionByProjectRevisionIdExists: Boolean

  """Filter by the object’s `projectRevisionId` field."""
  projectRevisionId: IntFilter

  """Filter by the object’s `reportingRequirementStatus` field."""
  reportingRequirementStatus: StringFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `validationErrors` field."""
  validationErrors: JSONFilter
}

"""A connection to a list of `Form` values, with data from `FormChange`."""
type FormChangeFormsByFormChangePreviousFormChangeIdAndJsonSchemaNameManyToManyConnection {
  """
  A list of edges which contains the `Form`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeFormsByFormChangePreviousFormChangeIdAndJsonSchemaNameManyToManyEdge!]!

  """A list of `Form` objects."""
  nodes: [Form]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormChange`."""
type FormChangeFormsByFormChangePreviousFormChangeIdAndJsonSchemaNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `Form` at the end of the edge."""
  node: Form
}

"""
The type of change operation, defining the action taken when the form_change is committed.
"""
enum FormChangeOperation {
  ARCHIVE
  CREATE
  UPDATE
}

"""
A filter to be used against FormChangeOperation fields. All fields are combined with a logical ‘and.’
"""
input FormChangeOperationFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: FormChangeOperation

  """Equal to the specified value."""
  equalTo: FormChangeOperation

  """Greater than the specified value."""
  greaterThan: FormChangeOperation

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: FormChangeOperation

  """Included in the specified list."""
  in: [FormChangeOperation!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: FormChangeOperation

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: FormChangeOperation

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: FormChangeOperation

  """Not equal to the specified value."""
  notEqualTo: FormChangeOperation

  """Not included in the specified list."""
  notIn: [FormChangeOperation!]
}

"""
Represents an update to a `FormChange`. Fields that are set will be updated.
"""
input FormChangePatch {
  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Unique ID for the form_change"""
  newFormData: JSON

  """The operation this form change describes: create, update or archive"""
  operation: FormChangeOperation

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """
  The validation errors computed for this record's new_form_data and the json_schema_name schema
  """
  validationErrors: JSON
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type FormChangeProjectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeProjectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type FormChangeProjectRevisionsByFormChangePreviousFormChangeIdAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type FormChangeStatusesByFormChangeJsonSchemaNameAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormChangeStatusesByFormChangeJsonSchemaNameAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type FormChangeStatusesByFormChangeJsonSchemaNameAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input FormChangeToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""A connection to a list of `FormChange` values."""
type FormChangesConnection {
  """
  A list of edges which contains the `FormChange` and cursor to aid in pagination.
  """
  edges: [FormChangesEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection."""
type FormChangesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""Methods to use when ordering `FormChange`."""
enum FormChangesOrderBy {
  CHANGE_STATUS_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ACTIVE_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ACTIVE_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_BY_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_BY_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__STATUS_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__STATUS_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__TRIGGERS_COMMIT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__TRIGGERS_COMMIT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_BY_DESC
  CHANGE_STATUS_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FORM_BY_JSON_SCHEMA_NAME__ARCHIVED_AT_ASC
  FORM_BY_JSON_SCHEMA_NAME__ARCHIVED_AT_DESC
  FORM_BY_JSON_SCHEMA_NAME__ARCHIVED_BY_ASC
  FORM_BY_JSON_SCHEMA_NAME__ARCHIVED_BY_DESC
  FORM_BY_JSON_SCHEMA_NAME__CREATED_AT_ASC
  FORM_BY_JSON_SCHEMA_NAME__CREATED_AT_DESC
  FORM_BY_JSON_SCHEMA_NAME__CREATED_BY_ASC
  FORM_BY_JSON_SCHEMA_NAME__CREATED_BY_DESC
  FORM_BY_JSON_SCHEMA_NAME__DESCRIPTION_ASC
  FORM_BY_JSON_SCHEMA_NAME__DESCRIPTION_DESC
  FORM_BY_JSON_SCHEMA_NAME__FORM_CHANGE_COMMIT_HANDLER_ASC
  FORM_BY_JSON_SCHEMA_NAME__FORM_CHANGE_COMMIT_HANDLER_DESC
  FORM_BY_JSON_SCHEMA_NAME__ID_ASC
  FORM_BY_JSON_SCHEMA_NAME__ID_DESC
  FORM_BY_JSON_SCHEMA_NAME__JSON_SCHEMA_ASC
  FORM_BY_JSON_SCHEMA_NAME__JSON_SCHEMA_DESC
  FORM_BY_JSON_SCHEMA_NAME__JSON_SCHEMA_GENERATOR_ASC
  FORM_BY_JSON_SCHEMA_NAME__JSON_SCHEMA_GENERATOR_DESC
  FORM_BY_JSON_SCHEMA_NAME__SLUG_ASC
  FORM_BY_JSON_SCHEMA_NAME__SLUG_DESC
  FORM_BY_JSON_SCHEMA_NAME__UPDATED_AT_ASC
  FORM_BY_JSON_SCHEMA_NAME__UPDATED_AT_DESC
  FORM_BY_JSON_SCHEMA_NAME__UPDATED_BY_ASC
  FORM_BY_JSON_SCHEMA_NAME__UPDATED_BY_DESC
  FORM_CHANGES_BY_PREVIOUS_FORM_CHANGE_ID__COUNT_ASC
  FORM_CHANGES_BY_PREVIOUS_FORM_CHANGE_ID__COUNT_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CHANGE_STATUS_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CHANGE_STATUS_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CREATED_AT_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CREATED_AT_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CREATED_BY_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__CREATED_BY_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_RECORD_ID_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_RECORD_ID_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_SCHEMA_NAME_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_SCHEMA_NAME_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_TABLE_NAME_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__FORM_DATA_TABLE_NAME_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__ID_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__ID_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__JSON_SCHEMA_NAME_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__JSON_SCHEMA_NAME_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__NEW_FORM_DATA_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__NEW_FORM_DATA_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__OPERATION_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__OPERATION_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__PREVIOUS_FORM_CHANGE_ID_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__PREVIOUS_FORM_CHANGE_ID_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__PROJECT_REVISION_ID_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__PROJECT_REVISION_ID_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__UPDATED_AT_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__UPDATED_AT_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__UPDATED_BY_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__UPDATED_BY_DESC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__VALIDATION_ERRORS_ASC
  FORM_CHANGE_BY_PREVIOUS_FORM_CHANGE_ID__VALIDATION_ERRORS_DESC
  FORM_DATA_RECORD_ID_ASC
  FORM_DATA_RECORD_ID_DESC
  FORM_DATA_SCHEMA_NAME_ASC
  FORM_DATA_SCHEMA_NAME_DESC
  FORM_DATA_TABLE_NAME_ASC
  FORM_DATA_TABLE_NAME_DESC
  ID_ASC
  ID_DESC
  JSON_SCHEMA_NAME_ASC
  JSON_SCHEMA_NAME_DESC
  NATURAL
  NEW_FORM_DATA_ASC
  NEW_FORM_DATA_DESC
  OPERATION_ASC
  OPERATION_DESC
  PREVIOUS_FORM_CHANGE_ID_ASC
  PREVIOUS_FORM_CHANGE_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_REASON_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_REASON_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_STATUS_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_STATUS_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__COMMENTS_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__COMMENTS_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_AT_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_AT_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_BY_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_BY_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__EFFECTIVE_DATE_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__EFFECTIVE_DATE_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__ID_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__ID_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__IS_FIRST_REVISION_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__IS_FIRST_REVISION_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__PROJECT_ID_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__PROJECT_ID_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__REVISION_STATUS_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__REVISION_STATUS_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__REVISION_TYPE_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__REVISION_TYPE_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_AT_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_AT_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_BY_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_BY_DESC
  PROJECT_REVISION_ID_ASC
  PROJECT_REVISION_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  VALIDATION_ERRORS_ASC
  VALIDATION_ERRORS_DESC
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type FormCifUsersByFormChangeJsonSchemaNameAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormCifUsersByFormChangeJsonSchemaNameAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type FormCifUsersByFormChangeJsonSchemaNameAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type FormCifUsersByFormChangeJsonSchemaNameAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormCifUsersByFormChangeJsonSchemaNameAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type FormCifUsersByFormChangeJsonSchemaNameAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A condition to be used against `Form` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FormCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `formChangeCommitHandler` field."""
  formChangeCommitHandler: String

  """Checks for equality with the object’s `jsonSchema` field."""
  jsonSchema: JSON

  """Checks for equality with the object’s `jsonSchemaGenerator` field."""
  jsonSchemaGenerator: RegProcedure

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `slug` field."""
  slug: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Form` object types. All fields are combined with a logical ‘and.’
"""
input FormFilter {
  """Checks for all expressions in this list."""
  and: [FormFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `formChangeCommitHandler` field."""
  formChangeCommitHandler: StringFilter

  """Filter by the object’s `formChangesByJsonSchemaName` relation."""
  formChangesByJsonSchemaName: FormToManyFormChangeFilter

  """Some related `formChangesByJsonSchemaName` exist."""
  formChangesByJsonSchemaNameExist: Boolean

  """Filter by the object’s `jsonSchema` field."""
  jsonSchema: JSONFilter

  """Negates the expression."""
  not: FormFilter

  """Checks for any expressions in this list."""
  or: [FormFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `slug` field."""
  slug: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FormChange` values, with data from `FormChange`.
"""
type FormFormChangesByFormChangeJsonSchemaNameAndPreviousFormChangeIdManyToManyConnection {
  """
  A list of edges which contains the `FormChange`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormFormChangesByFormChangeJsonSchemaNameAndPreviousFormChangeIdManyToManyEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection, with data from `FormChange`."""
type FormFormChangesByFormChangeJsonSchemaNameAndPreviousFormChangeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""An input for mutations affecting `Form`"""
input FormInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Metadata describing the json_schema."""
  description: String!

  """
  A function that parses the form_change data into a table or set of tables.
  """
  formChangeCommitHandler: String

  """
  The json_schema describing the shape of the form_change data for the corresponding form.
  """
  jsonSchema: JSON!

  """
  A function that can be used to dynamically alter the schema, such as altering constraints based on the contents of a table.
  """
  jsonSchemaGenerator: RegProcedure

  """Unique short name identifier for the json_schema data."""
  slug: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""Represents an update to a `Form`. Fields that are set will be updated."""
input FormPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Metadata describing the json_schema."""
  description: String

  """
  A function that parses the form_change data into a table or set of tables.
  """
  formChangeCommitHandler: String

  """
  The json_schema describing the shape of the form_change data for the corresponding form.
  """
  jsonSchema: JSON

  """
  A function that can be used to dynamically alter the schema, such as altering constraints based on the contents of a table.
  """
  jsonSchemaGenerator: RegProcedure

  """Unique short name identifier for the json_schema data."""
  slug: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectRevision` values, with data from `FormChange`.
"""
type FormProjectRevisionsByFormChangeJsonSchemaNameAndProjectRevisionIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectRevision`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [FormProjectRevisionsByFormChangeJsonSchemaNameAndProjectRevisionIdManyToManyEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectRevision` edge in the connection, with data from `FormChange`.
"""
type FormProjectRevisionsByFormChangeJsonSchemaNameAndProjectRevisionIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input FormToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""A connection to a list of `Form` values."""
type FormsConnection {
  """
  A list of edges which contains the `Form` and cursor to aid in pagination.
  """
  edges: [FormsEdge!]!

  """A list of `Form` objects."""
  nodes: [Form]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection."""
type FormsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Form` at the end of the edge."""
  node: Form
}

"""Methods to use when ordering `Form`."""
enum FormsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FORM_CHANGES_BY_JSON_SCHEMA_NAME__COUNT_ASC
  FORM_CHANGES_BY_JSON_SCHEMA_NAME__COUNT_DESC
  FORM_CHANGE_COMMIT_HANDLER_ASC
  FORM_CHANGE_COMMIT_HANDLER_DESC
  ID_ASC
  ID_DESC
  JSON_SCHEMA_ASC
  JSON_SCHEMA_DESC
  JSON_SCHEMA_GENERATOR_ASC
  JSON_SCHEMA_GENERATOR_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SLUG_ASC
  SLUG_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing funding agreement data"""
type FundingParameter implements Node {
  """Total anticipated funding amount inserted by CIF users"""
  anticipatedFundingAmount: BigFloat

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByUpdatedBy: CifUser

  """
  contract start date to support the auto-generation of quarterly and annual reports
  """
  contractStartDate: Datetime

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  The designated holdback percentage for each payment. CIF holds back this designated holdback percentage from each payment, and the cumulated holdback amount is the total possible value of the final (performance) milestone payment. The proponent is paid a portion of this possible total based on their project emission intensity performance relative to the target emission intensity
  """
  holdbackPercentage: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Maximum funding amount for this project"""
  maxFundingAmount: BigFloat

  """
  project assets life end date to support the auto-generation of quarterly and annual reports
  """
  projectAssetsLifeEndDate: Datetime

  """Reads a single `Project` that is related to this `FundingParameter`."""
  projectByProjectId: Project

  """The related project for this data"""
  projectId: Int!

  """The funding provided by the proponent"""
  proponentCost: BigFloat

  """
  The percent of the total funding for a project that the Province is providing
  """
  provinceSharePercentage: BigFloat

  """Unique ID for the funding agreement data"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `FundingParameter` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FundingParameterCondition {
  """
  Checks for equality with the object’s `anticipatedFundingAmount` field.
  """
  anticipatedFundingAmount: BigFloat

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `contractStartDate` field."""
  contractStartDate: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `holdbackPercentage` field."""
  holdbackPercentage: BigFloat

  """Checks for equality with the object’s `maxFundingAmount` field."""
  maxFundingAmount: BigFloat

  """
  Checks for equality with the object’s `projectAssetsLifeEndDate` field.
  """
  projectAssetsLifeEndDate: Datetime

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `proponentCost` field."""
  proponentCost: BigFloat

  """Checks for equality with the object’s `provinceSharePercentage` field."""
  provinceSharePercentage: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `FundingParameter` object types. All fields are combined with a logical ‘and.’
"""
input FundingParameterFilter {
  """Checks for all expressions in this list."""
  and: [FundingParameterFilter!]

  """Filter by the object’s `anticipatedFundingAmount` field."""
  anticipatedFundingAmount: BigFloatFilter

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `contractStartDate` field."""
  contractStartDate: DatetimeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `holdbackPercentage` field."""
  holdbackPercentage: BigFloatFilter

  """Filter by the object’s `maxFundingAmount` field."""
  maxFundingAmount: BigFloatFilter

  """Negates the expression."""
  not: FundingParameterFilter

  """Checks for any expressions in this list."""
  or: [FundingParameterFilter!]

  """Filter by the object’s `projectAssetsLifeEndDate` field."""
  projectAssetsLifeEndDate: DatetimeFilter

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """Filter by the object’s `proponentCost` field."""
  proponentCost: BigFloatFilter

  """Filter by the object’s `provinceSharePercentage` field."""
  provinceSharePercentage: BigFloatFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `FundingParameter`"""
input FundingParameterInput {
  """Total anticipated funding amount inserted by CIF users"""
  anticipatedFundingAmount: BigFloat

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  contract start date to support the auto-generation of quarterly and annual reports
  """
  contractStartDate: Datetime

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  The designated holdback percentage for each payment. CIF holds back this designated holdback percentage from each payment, and the cumulated holdback amount is the total possible value of the final (performance) milestone payment. The proponent is paid a portion of this possible total based on their project emission intensity performance relative to the target emission intensity
  """
  holdbackPercentage: BigFloat

  """Maximum funding amount for this project"""
  maxFundingAmount: BigFloat

  """
  project assets life end date to support the auto-generation of quarterly and annual reports
  """
  projectAssetsLifeEndDate: Datetime

  """The related project for this data"""
  projectId: Int!

  """The funding provided by the proponent"""
  proponentCost: BigFloat

  """
  The percent of the total funding for a project that the Province is providing
  """
  provinceSharePercentage: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `FundingParameter`. Fields that are set will be updated.
"""
input FundingParameterPatch {
  """Total anticipated funding amount inserted by CIF users"""
  anticipatedFundingAmount: BigFloat

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  contract start date to support the auto-generation of quarterly and annual reports
  """
  contractStartDate: Datetime

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  The designated holdback percentage for each payment. CIF holds back this designated holdback percentage from each payment, and the cumulated holdback amount is the total possible value of the final (performance) milestone payment. The proponent is paid a portion of this possible total based on their project emission intensity performance relative to the target emission intensity
  """
  holdbackPercentage: BigFloat

  """Maximum funding amount for this project"""
  maxFundingAmount: BigFloat

  """
  project assets life end date to support the auto-generation of quarterly and annual reports
  """
  projectAssetsLifeEndDate: Datetime

  """The related project for this data"""
  projectId: Int

  """The funding provided by the proponent"""
  proponentCost: BigFloat

  """
  The percent of the total funding for a project that the Province is providing
  """
  provinceSharePercentage: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `FundingParameter` values."""
type FundingParametersConnection {
  """
  A list of edges which contains the `FundingParameter` and cursor to aid in pagination.
  """
  edges: [FundingParametersEdge!]!

  """A list of `FundingParameter` objects."""
  nodes: [FundingParameter]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingParameter` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingParameter` edge in the connection."""
type FundingParametersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingParameter` at the end of the edge."""
  node: FundingParameter
}

"""Methods to use when ordering `FundingParameter`."""
enum FundingParametersOrderBy {
  ANTICIPATED_FUNDING_AMOUNT_ASC
  ANTICIPATED_FUNDING_AMOUNT_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CONTRACT_START_DATE_ASC
  CONTRACT_START_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  HOLDBACK_PERCENTAGE_ASC
  HOLDBACK_PERCENTAGE_DESC
  ID_ASC
  ID_DESC
  MAX_FUNDING_AMOUNT_ASC
  MAX_FUNDING_AMOUNT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_ASSETS_LIFE_END_DATE_ASC
  PROJECT_ASSETS_LIFE_END_DATE_DESC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_ASC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__COMMENTS_ASC
  PROJECT_BY_PROJECT_ID__COMMENTS_DESC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_ASC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SCORE_ASC
  PROJECT_BY_PROJECT_ID__SCORE_DESC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_ASC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  PROPONENT_COST_ASC
  PROPONENT_COST_DESC
  PROVINCE_SHARE_PERCENTAGE_ASC
  PROVINCE_SHARE_PERCENTAGE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about a CIF funding_stream"""
type FundingStream implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpFundingStreamIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpFundingStreamIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpFundingStreamIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Description of the funding_stream"""
  description: String!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Shortname of the funding stream program"""
  name: String!

  """Unique ID for the funding_stream"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfp`.
"""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfp`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingStreamRfp`."""
type FundingStreamCifUsersByFundingStreamRfpFundingStreamIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A condition to be used against `FundingStream` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FundingStreamCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `FundingStream` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamFilter {
  """Checks for all expressions in this list."""
  and: [FundingStreamFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `fundingStreamRfpsByFundingStreamId` relation."""
  fundingStreamRfpsByFundingStreamId: FundingStreamToManyFundingStreamRfpFilter

  """Some related `fundingStreamRfpsByFundingStreamId` exist."""
  fundingStreamRfpsByFundingStreamIdExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: FundingStreamFilter

  """Checks for any expressions in this list."""
  or: [FundingStreamFilter!]

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `FundingStream`"""
input FundingStreamInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the funding_stream"""
  description: String!

  """Shortname of the funding stream program"""
  name: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `FundingStream`. Fields that are set will be updated.
"""
input FundingStreamPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the funding_stream"""
  description: String

  """Shortname of the funding stream program"""
  name: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""Table containing information about a CIF funding_stream_rfp"""
type FundingStreamRfp implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectFundingStreamRfpIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectFundingStreamRfpIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectFundingStreamRfpIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  The id of the funding_stream (cif.funding_stream.id) this rfp year is associated with
  """
  fundingStreamId: Int!

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectFundingStreamRfpIdAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpOperatorsByProjectFundingStreamRfpIdAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectFundingStreamRfpIdAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesByProjectFundingStreamRfpIdAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByProjectFundingStreamRfpIdAndProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectTypesByProjectFundingStreamRfpIdAndProjectTypeManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the funding_stream_rfp"""
  rowId: Int!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByProjectFundingStreamRfpIdAndSectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpSectorsByProjectFundingStreamRfpIdAndSectorNameManyToManyConnection!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int

  """The year this funding stream rfp is associated with"""
  year: Int!
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpCifUsersByFundingStreamRfpProjectStatusFundingStreamRfpIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type FundingStreamRfpCifUsersByProjectFundingStreamRfpIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `FundingStreamRfp` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FundingStreamRfpCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `fundingStreamId` field."""
  fundingStreamId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int

  """Checks for equality with the object’s `year` field."""
  year: Int
}

"""
A filter to be used against `FundingStreamRfp` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamRfpFilter {
  """Checks for all expressions in this list."""
  and: [FundingStreamRfpFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `fundingStreamByFundingStreamId` relation."""
  fundingStreamByFundingStreamId: FundingStreamFilter

  """Filter by the object’s `fundingStreamId` field."""
  fundingStreamId: IntFilter

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByFundingStreamRfpId` relation.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId: FundingStreamRfpToManyFundingStreamRfpProjectStatusFilter

  """
  Some related `fundingStreamRfpProjectStatusesByFundingStreamRfpId` exist.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpIdExist: Boolean

  """Negates the expression."""
  not: FundingStreamRfpFilter

  """Checks for any expressions in this list."""
  or: [FundingStreamRfpFilter!]

  """Filter by the object’s `projectsByFundingStreamRfpId` relation."""
  projectsByFundingStreamRfpId: FundingStreamRfpToManyProjectFilter

  """Some related `projectsByFundingStreamRfpId` exist."""
  projectsByFundingStreamRfpIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter

  """Filter by the object’s `year` field."""
  year: IntFilter
}

"""An input for mutations affecting `FundingStreamRfp`"""
input FundingStreamRfpInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  The id of the funding_stream (cif.funding_stream.id) this rfp year is associated with
  """
  fundingStreamId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """The year this funding stream rfp is associated with"""
  year: Int!
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type FundingStreamRfpOperatorsByProjectFundingStreamRfpIdAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpOperatorsByProjectFundingStreamRfpIdAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type FundingStreamRfpOperatorsByProjectFundingStreamRfpIdAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `FundingStreamRfp`. Fields that are set will be updated.
"""
input FundingStreamRfpPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  The id of the funding_stream (cif.funding_stream.id) this rfp year is associated with
  """
  fundingStreamId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int

  """The year this funding stream rfp is associated with"""
  year: Int
}

"""
Defines which project states a funding_stream_rfp can be set to for a given year.
"""
type FundingStreamRfpProjectStatus implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  Reads a single `FundingStreamRfp` that is related to this `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """The id referencing the funding_stream_rfp table"""
  fundingStreamRfpId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamRfpProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """The id refrencing the project_status table"""
  projectStatusId: Int!

  """Primary key for funding_stream_rfp_project_status table"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `FundingStreamRfpProjectStatus` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FundingStreamRfpProjectStatusCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `fundingStreamRfpId` field."""
  fundingStreamRfpId: Int

  """Checks for equality with the object’s `projectStatusId` field."""
  projectStatusId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `FundingStreamRfpProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamRfpProjectStatusFilter {
  """Checks for all expressions in this list."""
  and: [FundingStreamRfpProjectStatusFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """
  Filter by the object’s `fundingStreamRfpByFundingStreamRfpId` relation.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfpFilter

  """Filter by the object’s `fundingStreamRfpId` field."""
  fundingStreamRfpId: IntFilter

  """Negates the expression."""
  not: FundingStreamRfpProjectStatusFilter

  """Checks for any expressions in this list."""
  or: [FundingStreamRfpProjectStatusFilter!]

  """Filter by the object’s `projectStatusByProjectStatusId` relation."""
  projectStatusByProjectStatusId: ProjectStatusFilter

  """Filter by the object’s `projectStatusId` field."""
  projectStatusId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `FundingStreamRfpProjectStatus`"""
input FundingStreamRfpProjectStatusInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The id referencing the funding_stream_rfp table"""
  fundingStreamRfpId: Int!

  """The id refrencing the project_status table"""
  projectStatusId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `FundingStreamRfpProjectStatus`. Fields that are set will be updated.
"""
input FundingStreamRfpProjectStatusPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The id referencing the funding_stream_rfp table"""
  fundingStreamRfpId: Int

  """The id refrencing the project_status table"""
  projectStatusId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectStatus` values, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpProjectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpProjectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ProjectStatus` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type FundingStreamRfpProjectStatusesByFundingStreamRfpProjectStatusFundingStreamRfpIdAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type FundingStreamRfpProjectStatusesByProjectFundingStreamRfpIdAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpProjectStatusesByProjectFundingStreamRfpIdAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type FundingStreamRfpProjectStatusesByProjectFundingStreamRfpIdAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `FundingStreamRfpProjectStatus` values."""
type FundingStreamRfpProjectStatusesConnection {
  """
  A list of edges which contains the `FundingStreamRfpProjectStatus` and cursor to aid in pagination.
  """
  edges: [FundingStreamRfpProjectStatusesEdge!]!

  """A list of `FundingStreamRfpProjectStatus` objects."""
  nodes: [FundingStreamRfpProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfpProjectStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfpProjectStatus` edge in the connection."""
type FundingStreamRfpProjectStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfpProjectStatus` at the end of the edge."""
  node: FundingStreamRfpProjectStatus
}

"""Methods to use when ordering `FundingStreamRfpProjectStatus`."""
enum FundingStreamRfpProjectStatusesOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__FUNDING_STREAM_ID_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__FUNDING_STREAM_ID_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ID_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ID_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__YEAR_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__YEAR_DESC
  FUNDING_STREAM_RFP_ID_ASC
  FUNDING_STREAM_RFP_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_DESC
  PROJECT_STATUS_ID_ASC
  PROJECT_STATUS_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A connection to a list of `ProjectType` values, with data from `Project`.
"""
type FundingStreamRfpProjectTypesByProjectFundingStreamRfpIdAndProjectTypeManyToManyConnection {
  """
  A list of edges which contains the `ProjectType`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpProjectTypesByProjectFundingStreamRfpIdAndProjectTypeManyToManyEdge!]!

  """A list of `ProjectType` objects."""
  nodes: [ProjectType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectType` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectType` edge in the connection, with data from `Project`."""
type FundingStreamRfpProjectTypesByProjectFundingStreamRfpIdAndProjectTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectType` at the end of the edge."""
  node: ProjectType

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Sector` values, with data from `Project`."""
type FundingStreamRfpSectorsByProjectFundingStreamRfpIdAndSectorNameManyToManyConnection {
  """
  A list of edges which contains the `Sector`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [FundingStreamRfpSectorsByProjectFundingStreamRfpIdAndSectorNameManyToManyEdge!]!

  """A list of `Sector` objects."""
  nodes: [Sector]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sector` you could get from the connection."""
  totalCount: Int!
}

"""A `Sector` edge in the connection, with data from `Project`."""
type FundingStreamRfpSectorsByProjectFundingStreamRfpIdAndSectorNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sector` at the end of the edge."""
  node: Sector

  """Reads and enables pagination through a set of `Project`."""
  projectsBySectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A filter to be used against many `FundingStreamRfpProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamRfpToManyFundingStreamRfpProjectStatusFilter {
  """
  Every related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpProjectStatusFilter

  """
  No related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpProjectStatusFilter

  """
  Some related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpProjectStatusFilter
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamRfpToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `FundingStreamRfp` values."""
type FundingStreamRfpsConnection {
  """
  A list of edges which contains the `FundingStreamRfp` and cursor to aid in pagination.
  """
  edges: [FundingStreamRfpsEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection."""
type FundingStreamRfpsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""Methods to use when ordering `FundingStreamRfp`."""
enum FundingStreamRfpsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ARCHIVED_AT_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ARCHIVED_AT_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ARCHIVED_BY_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ARCHIVED_BY_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__CREATED_AT_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__CREATED_AT_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__CREATED_BY_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__CREATED_BY_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__DESCRIPTION_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__DESCRIPTION_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ID_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__ID_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__NAME_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__NAME_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__UPDATED_AT_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__UPDATED_AT_DESC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__UPDATED_BY_ASC
  FUNDING_STREAM_BY_FUNDING_STREAM_ID__UPDATED_BY_DESC
  FUNDING_STREAM_ID_ASC
  FUNDING_STREAM_ID_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_FUNDING_STREAM_RFP_ID__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_FUNDING_STREAM_RFP_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_FUNDING_STREAM_RFP_ID__COUNT_ASC
  PROJECTS_BY_FUNDING_STREAM_RFP_ID__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  YEAR_ASC
  YEAR_DESC
}

"""
A filter to be used against many `FundingStreamRfp` object types. All fields are combined with a logical ‘and.’
"""
input FundingStreamToManyFundingStreamRfpFilter {
  """
  Every related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpFilter

  """
  No related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpFilter

  """
  Some related `FundingStreamRfp` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpFilter
}

"""A connection to a list of `FundingStream` values."""
type FundingStreamsConnection {
  """
  A list of edges which contains the `FundingStream` and cursor to aid in pagination.
  """
  edges: [FundingStreamsEdge!]!

  """A list of `FundingStream` objects."""
  nodes: [FundingStream]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FundingStream` you could get from the connection."""
  totalCount: Int!
}

"""A `FundingStream` edge in the connection."""
type FundingStreamsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStream` at the end of the edge."""
  node: FundingStream
}

"""Methods to use when ordering `FundingStream`."""
enum FundingStreamsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FUNDING_STREAM_RFPS_BY_FUNDING_STREAM_ID__COUNT_ASC
  FUNDING_STREAM_RFPS_BY_FUNDING_STREAM_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the `generateAnnualReports` mutation."""
input GenerateAnnualReportsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  endDate: Datetime!
  revisionId: Int!
  startDate: Datetime!
}

"""The output of our `generateAnnualReports` mutation."""
type GenerateAnnualReportsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `generateQuarterlyReports` mutation."""
input GenerateQuarterlyReportsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  endDate: Datetime!
  revisionId: Int!
  startDate: Datetime!
}

"""The output of our `generateQuarterlyReports` mutation."""
type GenerateQuarterlyReportsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A connection to a list of `String` values."""
type GetFormStatusConnection {
  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetFormStatusEdge!]!

  """A list of `String` objects."""
  nodes: [String]!

  """The count of *all* `String` you could get from the connection."""
  totalCount: Int!
}

"""A `String` edge in the connection."""
type GetFormStatusEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `String` at the end of the edge."""
  node: String
}

"""
Indicates whether archived items should be included in the results or not.
"""
enum IncludeArchivedOption {
  """Only include archived items (i.e. exclude non-archived items)."""
  EXCLUSIVELY

  """
  If there is a parent GraphQL record and it is archived then this is equivalent to YES, in all other cases this is equivalent to NO.
  """
  INHERIT

  """Exclude archived items."""
  NO

  """Include archived items."""
  YES
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type KeycloakJwt {
  acr: String
  aud: String
  authTime: Int
  azp: String
  brokerSessionId: String

  """Reads a single `CifUser` that is related to this `KeycloakJwt`."""
  cifUserBySub: CifUser
  email: String
  emailVerified: Boolean
  exp: Int
  familyName: String
  givenName: String
  iat: Int
  iss: String
  jti: UUID
  name: String
  nbf: Int
  preferredUsername: String
  priorityGroup: String
  sessionState: UUID
  sub: String
  typ: String
  userGroups: [String]
}

"""
A filter to be used against `KeycloakJwt` object types. All fields are combined with a logical ‘and.’
"""
input KeycloakJwtFilter {
  """Filter by the object’s `acr` field."""
  acr: StringFilter

  """Checks for all expressions in this list."""
  and: [KeycloakJwtFilter!]

  """Filter by the object’s `aud` field."""
  aud: StringFilter

  """Filter by the object’s `authTime` field."""
  authTime: IntFilter

  """Filter by the object’s `azp` field."""
  azp: StringFilter

  """Filter by the object’s `brokerSessionId` field."""
  brokerSessionId: StringFilter

  """Filter by the object’s `cifUserBySub` relation."""
  cifUserBySub: CifUserFilter

  """A related `cifUserBySub` exists."""
  cifUserBySubExists: Boolean

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `emailVerified` field."""
  emailVerified: BooleanFilter

  """Filter by the object’s `exp` field."""
  exp: IntFilter

  """Filter by the object’s `familyName` field."""
  familyName: StringFilter

  """Filter by the object’s `givenName` field."""
  givenName: StringFilter

  """Filter by the object’s `iat` field."""
  iat: IntFilter

  """Filter by the object’s `iss` field."""
  iss: StringFilter

  """Filter by the object’s `jti` field."""
  jti: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `nbf` field."""
  nbf: IntFilter

  """Negates the expression."""
  not: KeycloakJwtFilter

  """Checks for any expressions in this list."""
  or: [KeycloakJwtFilter!]

  """Filter by the object’s `preferredUsername` field."""
  preferredUsername: StringFilter

  """Filter by the object’s `priorityGroup` field."""
  priorityGroup: StringFilter

  """Filter by the object’s `sessionState` field."""
  sessionState: UUIDFilter

  """Filter by the object’s `sub` field."""
  sub: StringFilter

  """Filter by the object’s `typ` field."""
  typ: StringFilter

  """Filter by the object’s `userGroups` field."""
  userGroups: StringListFilter
}

"""
A composite return type for the project_revision_project_manager_form_changes_by_label computed column. Returns a record for each active label and the last related form_change if it exists.
"""
type ManagerFormChangesByLabelCompositeReturn {
  formChange: FormChange
  projectManagerLabel: ProjectManagerLabel
}

"""
A connection to a list of `ManagerFormChangesByLabelCompositeReturn` values.
"""
type ManagerFormChangesByLabelCompositeReturnsConnection {
  """
  A list of edges which contains the `ManagerFormChangesByLabelCompositeReturn` and cursor to aid in pagination.
  """
  edges: [ManagerFormChangesByLabelCompositeReturnsEdge!]!

  """A list of `ManagerFormChangesByLabelCompositeReturn` objects."""
  nodes: [ManagerFormChangesByLabelCompositeReturn]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ManagerFormChangesByLabelCompositeReturn` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ManagerFormChangesByLabelCompositeReturn` edge in the connection."""
type ManagerFormChangesByLabelCompositeReturnsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ManagerFormChangesByLabelCompositeReturn` at the end of the edge."""
  node: ManagerFormChangesByLabelCompositeReturn
}

"""Table containing information about a CIF milestone_report"""
type MilestoneReport implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """The name of the person who certified the completion of the milestone"""
  certifiedBy: String

  """
  The professional designation of the person who certified the completion of the milestone
  """
  certifierProfessionalDesignation: String

  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The maximum amount in dollars that can be applied to this milestone"""
  maximumAmount: BigFloat

  """
  Reads a single `ReportingRequirement` that is related to this `MilestoneReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """Foreign key to the reporting_requirement_table"""
  reportingRequirementId: Int!

  """Unique ID for the milestone_report"""
  rowId: Int!

  """
    The date where the work should be finished by. It can be automatically calculated based upon the type of milestone or manually overridden.
    Automatic calculations are as follows:
      - 30 days before report due date for general milestones
  
  """
  substantialCompletionDate: Datetime

  """The total amount of expenses in dollars applied to this milestone"""
  totalEligibleExpenses: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `MilestoneReport` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MilestoneReportCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `certifiedBy` field."""
  certifiedBy: String

  """
  Checks for equality with the object’s `certifierProfessionalDesignation` field.
  """
  certifierProfessionalDesignation: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `maximumAmount` field."""
  maximumAmount: BigFloat

  """Checks for equality with the object’s `reportingRequirementId` field."""
  reportingRequirementId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """
  Checks for equality with the object’s `substantialCompletionDate` field.
  """
  substantialCompletionDate: Datetime

  """Checks for equality with the object’s `totalEligibleExpenses` field."""
  totalEligibleExpenses: BigFloat

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `MilestoneReport` object types. All fields are combined with a logical ‘and.’
"""
input MilestoneReportFilter {
  """Checks for all expressions in this list."""
  and: [MilestoneReportFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `certifiedBy` field."""
  certifiedBy: StringFilter

  """Filter by the object’s `certifierProfessionalDesignation` field."""
  certifierProfessionalDesignation: StringFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `maximumAmount` field."""
  maximumAmount: BigFloatFilter

  """Negates the expression."""
  not: MilestoneReportFilter

  """Checks for any expressions in this list."""
  or: [MilestoneReportFilter!]

  """
  Filter by the object’s `reportingRequirementByReportingRequirementId` relation.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirementFilter

  """Filter by the object’s `reportingRequirementId` field."""
  reportingRequirementId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `substantialCompletionDate` field."""
  substantialCompletionDate: DatetimeFilter

  """Filter by the object’s `totalEligibleExpenses` field."""
  totalEligibleExpenses: BigFloatFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `MilestoneReport`"""
input MilestoneReportInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """The name of the person who certified the completion of the milestone"""
  certifiedBy: String

  """
  The professional designation of the person who certified the completion of the milestone
  """
  certifierProfessionalDesignation: String

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The maximum amount in dollars that can be applied to this milestone"""
  maximumAmount: BigFloat

  """Foreign key to the reporting_requirement_table"""
  reportingRequirementId: Int!

  """
    The date where the work should be finished by. It can be automatically calculated based upon the type of milestone or manually overridden.
    Automatic calculations are as follows:
      - 30 days before report due date for general milestones
  
  """
  substantialCompletionDate: Datetime

  """The total amount of expenses in dollars applied to this milestone"""
  totalEligibleExpenses: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `MilestoneReport`. Fields that are set will be updated.
"""
input MilestoneReportPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """The name of the person who certified the completion of the milestone"""
  certifiedBy: String

  """
  The professional designation of the person who certified the completion of the milestone
  """
  certifierProfessionalDesignation: String

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The maximum amount in dollars that can be applied to this milestone"""
  maximumAmount: BigFloat

  """Foreign key to the reporting_requirement_table"""
  reportingRequirementId: Int

  """
    The date where the work should be finished by. It can be automatically calculated based upon the type of milestone or manually overridden.
    Automatic calculations are as follows:
      - 30 days before report due date for general milestones
  
  """
  substantialCompletionDate: Datetime

  """The total amount of expenses in dollars applied to this milestone"""
  totalEligibleExpenses: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

type MilestoneReportStatusReturn {
  formCompletionStatus: String
  milestoneIndex: Int
  reportDueDate: Datetime
  submittedDate: Datetime
}

"""
A filter to be used against `MilestoneReportStatusReturn` object types. All fields are combined with a logical ‘and.’
"""
input MilestoneReportStatusReturnFilter {
  """Checks for all expressions in this list."""
  and: [MilestoneReportStatusReturnFilter!]

  """Filter by the object’s `formCompletionStatus` field."""
  formCompletionStatus: StringFilter

  """Filter by the object’s `milestoneIndex` field."""
  milestoneIndex: IntFilter

  """Negates the expression."""
  not: MilestoneReportStatusReturnFilter

  """Checks for any expressions in this list."""
  or: [MilestoneReportStatusReturnFilter!]

  """Filter by the object’s `reportDueDate` field."""
  reportDueDate: DatetimeFilter

  """Filter by the object’s `submittedDate` field."""
  submittedDate: DatetimeFilter
}

"""A connection to a list of `MilestoneReportStatusReturn` values."""
type MilestoneReportStatusReturnsConnection {
  """
  A list of edges which contains the `MilestoneReportStatusReturn` and cursor to aid in pagination.
  """
  edges: [MilestoneReportStatusReturnsEdge!]!

  """A list of `MilestoneReportStatusReturn` objects."""
  nodes: [MilestoneReportStatusReturn]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MilestoneReportStatusReturn` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MilestoneReportStatusReturn` edge in the connection."""
type MilestoneReportStatusReturnsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MilestoneReportStatusReturn` at the end of the edge."""
  node: MilestoneReportStatusReturn
}

"""A connection to a list of `MilestoneReport` values."""
type MilestoneReportsConnection {
  """
  A list of edges which contains the `MilestoneReport` and cursor to aid in pagination.
  """
  edges: [MilestoneReportsEdge!]!

  """A list of `MilestoneReport` objects."""
  nodes: [MilestoneReport]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MilestoneReport` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MilestoneReport` edge in the connection."""
type MilestoneReportsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MilestoneReport` at the end of the edge."""
  node: MilestoneReport
}

"""Methods to use when ordering `MilestoneReport`."""
enum MilestoneReportsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CERTIFIED_BY_ASC
  CERTIFIED_BY_DESC
  CERTIFIER_PROFESSIONAL_DESIGNATION_ASC
  CERTIFIER_PROFESSIONAL_DESIGNATION_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  MAXIMUM_AMOUNT_ASC
  MAXIMUM_AMOUNT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_AT_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_AT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_BY_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_BY_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__COMMENTS_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__COMMENTS_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_AT_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_AT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_BY_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_BY_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__DESCRIPTION_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__DESCRIPTION_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ID_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ID_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__PROJECT_ID_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__PROJECT_ID_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORTING_REQUIREMENT_INDEX_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORTING_REQUIREMENT_INDEX_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_DUE_DATE_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_DUE_DATE_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_TYPE_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_TYPE_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__SUBMITTED_DATE_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__SUBMITTED_DATE_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_AT_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_AT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_BY_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_BY_DESC
  REPORTING_REQUIREMENT_ID_ASC
  REPORTING_REQUIREMENT_ID_DESC
  SUBSTANTIAL_COMPLETION_DATE_ASC
  SUBSTANTIAL_COMPLETION_DATE_DESC
  TOTAL_ELIGIBLE_EXPENSES_ASC
  TOTAL_ELIGIBLE_EXPENSES_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  addAdditionalFundingSourceToRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddAdditionalFundingSourceToRevisionInput!
  ): AddAdditionalFundingSourceToRevisionPayload
  addContactToRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddContactToRevisionInput!
  ): AddContactToRevisionPayload
  addEmissionIntensityReportToRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddEmissionIntensityReportToRevisionInput!
  ): AddEmissionIntensityReportToRevisionPayload

  """
  Custom mutation to commit a form_change record via the API. Only used for records that are independent of a project such as the lists of contacts and operators.
  """
  commitFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CommitFormChangeInput!
  ): CommitFormChangePayload

  """Commits a project_revision and all of its form changes"""
  commitProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CommitProjectRevisionInput!
  ): CommitProjectRevisionPayload

  """Creates a single `AdditionalFundingSource`."""
  createAdditionalFundingSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAdditionalFundingSourceInput!
  ): CreateAdditionalFundingSourcePayload

  """Creates a single `AdditionalFundingSourceStatus`."""
  createAdditionalFundingSourceStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAdditionalFundingSourceStatusInput!
  ): CreateAdditionalFundingSourceStatusPayload

  """Creates a single `AmendmentType`."""
  createAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAmendmentTypeInput!
  ): CreateAmendmentTypePayload

  """Creates a single `Attachment`."""
  createAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload

  """Creates a single `ChangeStatus`."""
  createChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChangeStatusInput!
  ): CreateChangeStatusPayload

  """Creates a single `CifUser`."""
  createCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCifUserInput!
  ): CreateCifUserPayload

  """Creates a single `EmissionIntensityPaymentPercent`."""
  createEmissionIntensityPaymentPercent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionIntensityPaymentPercentInput!
  ): CreateEmissionIntensityPaymentPercentPayload

  """Creates a single `EmissionIntensityReport`."""
  createEmissionIntensityReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionIntensityReportInput!
  ): CreateEmissionIntensityReportPayload

  """Creates a single `Form`."""
  createForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormInput!
  ): CreateFormPayload

  """
  Creates a new form_change record.
  If new_form_data is not provided, the latest committed form_data record for the same table and record id will be used.
  """
  createFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormChangeInput!
  ): CreateFormChangePayload

  """Creates a single `FundingParameter`."""
  createFundingParameter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingParameterInput!
  ): CreateFundingParameterPayload

  """Creates a single `FundingStream`."""
  createFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamInput!
  ): CreateFundingStreamPayload

  """Creates a single `FundingStreamRfp`."""
  createFundingStreamRfp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamRfpInput!
  ): CreateFundingStreamRfpPayload

  """Creates a single `FundingStreamRfpProjectStatus`."""
  createFundingStreamRfpProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamRfpProjectStatusInput!
  ): CreateFundingStreamRfpProjectStatusPayload

  """Creates a single `MilestoneReport`."""
  createMilestoneReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMilestoneReportInput!
  ): CreateMilestoneReportPayload
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """Creates a single `ProjectContact`."""
  createProjectContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectContactInput!
  ): CreateProjectContactPayload

  """Creates a single `ProjectManager`."""
  createProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectManagerInput!
  ): CreateProjectManagerPayload

  """Creates a single `ProjectManagerLabel`."""
  createProjectManagerLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectManagerLabelInput!
  ): CreateProjectManagerLabelPayload
  createProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectRevisionInput!
  ): CreateProjectRevisionPayload

  """Creates a single `ProjectRevisionAmendmentType`."""
  createProjectRevisionAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectRevisionAmendmentTypeInput!
  ): CreateProjectRevisionAmendmentTypePayload

  """Creates a single `ProjectStatus`."""
  createProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectStatusInput!
  ): CreateProjectStatusPayload

  """Creates a single `ProjectType`."""
  createProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectTypeInput!
  ): CreateProjectTypePayload

  """Creates a single `ReportType`."""
  createReportType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReportTypeInput!
  ): CreateReportTypePayload

  """Creates a single `RevisionStatus`."""
  createRevisionStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRevisionStatusInput!
  ): CreateRevisionStatusPayload

  """Creates a single `RevisionType`."""
  createRevisionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRevisionTypeInput!
  ): CreateRevisionTypePayload

  """Creates a single `Sector`."""
  createSector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSectorInput!
  ): CreateSectorPayload

  """
  Deletes a single `AdditionalFundingSource` using its globally unique id.
  """
  deleteAdditionalFundingSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalFundingSourceInput!
  ): DeleteAdditionalFundingSourcePayload

  """Deletes a single `AdditionalFundingSource` using a unique key."""
  deleteAdditionalFundingSourceByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalFundingSourceByRowIdInput!
  ): DeleteAdditionalFundingSourcePayload

  """
  Deletes a single `AdditionalFundingSourceStatus` using its globally unique id.
  """
  deleteAdditionalFundingSourceStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalFundingSourceStatusInput!
  ): DeleteAdditionalFundingSourceStatusPayload

  """Deletes a single `AdditionalFundingSourceStatus` using a unique key."""
  deleteAdditionalFundingSourceStatusByStatusName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalFundingSourceStatusByStatusNameInput!
  ): DeleteAdditionalFundingSourceStatusPayload

  """Deletes a single `AmendmentType` using its globally unique id."""
  deleteAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAmendmentTypeInput!
  ): DeleteAmendmentTypePayload

  """Deletes a single `AmendmentType` using a unique key."""
  deleteAmendmentTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAmendmentTypeByNameInput!
  ): DeleteAmendmentTypePayload

  """Deletes a single `Attachment` using its globally unique id."""
  deleteAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload

  """Deletes a single `Attachment` using a unique key."""
  deleteAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentByRowIdInput!
  ): DeleteAttachmentPayload

  """Deletes a single `ChangeStatus` using its globally unique id."""
  deleteChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusInput!
  ): DeleteChangeStatusPayload

  """Deletes a single `ChangeStatus` using a unique key."""
  deleteChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusByStatusInput!
  ): DeleteChangeStatusPayload

  """Deletes a single `CifUser` using its globally unique id."""
  deleteCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserInput!
  ): DeleteCifUserPayload

  """Deletes a single `CifUser` using a unique key."""
  deleteCifUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserByRowIdInput!
  ): DeleteCifUserPayload

  """
  Deletes a single `EmissionIntensityPaymentPercent` using its globally unique id.
  """
  deleteEmissionIntensityPaymentPercent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityPaymentPercentInput!
  ): DeleteEmissionIntensityPaymentPercentPayload

  """Deletes a single `EmissionIntensityPaymentPercent` using a unique key."""
  deleteEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformanceInput!
  ): DeleteEmissionIntensityPaymentPercentPayload

  """Deletes a single `EmissionIntensityPaymentPercent` using a unique key."""
  deleteEmissionIntensityPaymentPercentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityPaymentPercentByRowIdInput!
  ): DeleteEmissionIntensityPaymentPercentPayload

  """
  Deletes a single `EmissionIntensityReport` using its globally unique id.
  """
  deleteEmissionIntensityReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityReportInput!
  ): DeleteEmissionIntensityReportPayload

  """Deletes a single `EmissionIntensityReport` using a unique key."""
  deleteEmissionIntensityReportByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityReportByRowIdInput!
  ): DeleteEmissionIntensityReportPayload

  """Deletes a single `Form` using its globally unique id."""
  deleteForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormByRowIdInput!
  ): DeleteFormPayload

  """Deletes a single `Form` using a unique key."""
  deleteFormBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormBySlugInput!
  ): DeleteFormPayload

  """Deletes a single `FormChange` using its globally unique id."""
  deleteFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeInput!
  ): DeleteFormChangePayload

  """Deletes a single `FormChange` using a unique key."""
  deleteFormChangeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeByRowIdInput!
  ): DeleteFormChangePayload

  """Deletes a single `FundingParameter` using its globally unique id."""
  deleteFundingParameter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingParameterInput!
  ): DeleteFundingParameterPayload

  """Deletes a single `FundingParameter` using a unique key."""
  deleteFundingParameterByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingParameterByRowIdInput!
  ): DeleteFundingParameterPayload

  """Deletes a single `FundingStream` using its globally unique id."""
  deleteFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamInput!
  ): DeleteFundingStreamPayload

  """Deletes a single `FundingStream` using a unique key."""
  deleteFundingStreamByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamByRowIdInput!
  ): DeleteFundingStreamPayload

  """Deletes a single `FundingStreamRfp` using its globally unique id."""
  deleteFundingStreamRfp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpInput!
  ): DeleteFundingStreamRfpPayload

  """Deletes a single `FundingStreamRfp` using a unique key."""
  deleteFundingStreamRfpByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpByRowIdInput!
  ): DeleteFundingStreamRfpPayload

  """
  Deletes a single `FundingStreamRfpProjectStatus` using its globally unique id.
  """
  deleteFundingStreamRfpProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpProjectStatusInput!
  ): DeleteFundingStreamRfpProjectStatusPayload

  """Deletes a single `FundingStreamRfpProjectStatus` using a unique key."""
  deleteFundingStreamRfpProjectStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpProjectStatusByRowIdInput!
  ): DeleteFundingStreamRfpProjectStatusPayload

  """Deletes a single `MilestoneReport` using its globally unique id."""
  deleteMilestoneReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMilestoneReportInput!
  ): DeleteMilestoneReportPayload

  """Deletes a single `MilestoneReport` using a unique key."""
  deleteMilestoneReportByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMilestoneReportByRowIdInput!
  ): DeleteMilestoneReportPayload

  """Deletes a single `ProjectContact` using its globally unique id."""
  deleteProjectContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectContactInput!
  ): DeleteProjectContactPayload

  """Deletes a single `ProjectContact` using a unique key."""
  deleteProjectContactByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectContactByRowIdInput!
  ): DeleteProjectContactPayload

  """Deletes a single `ProjectManager` using its globally unique id."""
  deleteProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerInput!
  ): DeleteProjectManagerPayload

  """Deletes a single `ProjectManager` using a unique key."""
  deleteProjectManagerByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerByRowIdInput!
  ): DeleteProjectManagerPayload

  """Deletes a single `ProjectManagerLabel` using its globally unique id."""
  deleteProjectManagerLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerLabelInput!
  ): DeleteProjectManagerLabelPayload

  """Deletes a single `ProjectManagerLabel` using a unique key."""
  deleteProjectManagerLabelByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerLabelByLabelInput!
  ): DeleteProjectManagerLabelPayload

  """Deletes a single `ProjectManagerLabel` using a unique key."""
  deleteProjectManagerLabelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerLabelByRowIdInput!
  ): DeleteProjectManagerLabelPayload
  deleteProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionInput!
  ): DeleteProjectRevisionPayload

  """
  Deletes a single `ProjectRevisionAmendmentType` using its globally unique id.
  """
  deleteProjectRevisionAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionAmendmentTypeInput!
  ): DeleteProjectRevisionAmendmentTypePayload

  """Deletes a single `ProjectRevisionAmendmentType` using a unique key."""
  deleteProjectRevisionAmendmentTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionAmendmentTypeByRowIdInput!
  ): DeleteProjectRevisionAmendmentTypePayload

  """Deletes a single `ProjectStatus` using its globally unique id."""
  deleteProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectStatusInput!
  ): DeleteProjectStatusPayload

  """Deletes a single `ProjectStatus` using a unique key."""
  deleteProjectStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectStatusByRowIdInput!
  ): DeleteProjectStatusPayload

  """Deletes a single `ProjectType` using its globally unique id."""
  deleteProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectTypeInput!
  ): DeleteProjectTypePayload

  """Deletes a single `ProjectType` using a unique key."""
  deleteProjectTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectTypeByNameInput!
  ): DeleteProjectTypePayload

  """Deletes a single `ProjectType` using a unique key."""
  deleteProjectTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectTypeByRowIdInput!
  ): DeleteProjectTypePayload

  """Deletes a single `RevisionStatus` using its globally unique id."""
  deleteRevisionStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRevisionStatusInput!
  ): DeleteRevisionStatusPayload

  """Deletes a single `RevisionStatus` using a unique key."""
  deleteRevisionStatusByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRevisionStatusByNameInput!
  ): DeleteRevisionStatusPayload

  """Deletes a single `RevisionType` using its globally unique id."""
  deleteRevisionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRevisionTypeInput!
  ): DeleteRevisionTypePayload

  """Deletes a single `RevisionType` using a unique key."""
  deleteRevisionTypeByType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRevisionTypeByTypeInput!
  ): DeleteRevisionTypePayload

  """Deletes a single `Sector` using its globally unique id."""
  deleteSector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSectorInput!
  ): DeleteSectorPayload

  """Deletes a single `Sector` using a unique key."""
  deleteSectorBySectorName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSectorBySectorNameInput!
  ): DeleteSectorPayload

  """
    Custom mutation to discard a form change for an additional funding source.
  
  """
  discardAdditionalFundingSourceFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DiscardAdditionalFundingSourceFormChangeInput!
  ): DiscardAdditionalFundingSourceFormChangePayload
  discardEmissionIntensityReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DiscardEmissionIntensityReportInput!
  ): DiscardEmissionIntensityReportPayload
  discardFundingParameterFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DiscardFundingParameterFormChangeInput!
  ): DiscardFundingParameterFormChangePayload

  """
    Custom mutation to generate annual reports for a revision between emissions intensity report_due_date and project_assets_life_end_date.
  
  """
  generateAnnualReports(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GenerateAnnualReportsInput!
  ): GenerateAnnualReportsPayload

  """
    Custom mutation to generate quarterly reports for a revision between contract_start_date and  measurement_period_end_date.
  
  """
  generateQuarterlyReports(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GenerateQuarterlyReportsInput!
  ): GenerateQuarterlyReportsPayload
  stageDirtyFormChanges(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: StageDirtyFormChangesInput!
  ): StageDirtyFormChangesPayload

  """Custom mutation that stages a form_change record"""
  stageFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: StageFormChangeInput!
  ): StageFormChangePayload
  undoFormChanges(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UndoFormChangesInput!
  ): UndoFormChangesPayload

  """
  Updates a single `AdditionalFundingSource` using its globally unique id and a patch.
  """
  updateAdditionalFundingSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalFundingSourceInput!
  ): UpdateAdditionalFundingSourcePayload

  """
  Updates a single `AdditionalFundingSource` using a unique key and a patch.
  """
  updateAdditionalFundingSourceByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalFundingSourceByRowIdInput!
  ): UpdateAdditionalFundingSourcePayload

  """
  Updates a single `AdditionalFundingSourceStatus` using its globally unique id and a patch.
  """
  updateAdditionalFundingSourceStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalFundingSourceStatusInput!
  ): UpdateAdditionalFundingSourceStatusPayload

  """
  Updates a single `AdditionalFundingSourceStatus` using a unique key and a patch.
  """
  updateAdditionalFundingSourceStatusByStatusName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalFundingSourceStatusByStatusNameInput!
  ): UpdateAdditionalFundingSourceStatusPayload

  """
  Updates a single `AmendmentType` using its globally unique id and a patch.
  """
  updateAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAmendmentTypeInput!
  ): UpdateAmendmentTypePayload

  """Updates a single `AmendmentType` using a unique key and a patch."""
  updateAmendmentTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAmendmentTypeByNameInput!
  ): UpdateAmendmentTypePayload

  """
  Updates a single `Attachment` using its globally unique id and a patch.
  """
  updateAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentInput!
  ): UpdateAttachmentPayload

  """Updates a single `Attachment` using a unique key and a patch."""
  updateAttachmentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentByRowIdInput!
  ): UpdateAttachmentPayload

  """
  Updates a single `ChangeStatus` using its globally unique id and a patch.
  """
  updateChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusInput!
  ): UpdateChangeStatusPayload

  """Updates a single `ChangeStatus` using a unique key and a patch."""
  updateChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusByStatusInput!
  ): UpdateChangeStatusPayload

  """Updates a single `CifUser` using its globally unique id and a patch."""
  updateCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserInput!
  ): UpdateCifUserPayload

  """Updates a single `CifUser` using a unique key and a patch."""
  updateCifUserByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserByRowIdInput!
  ): UpdateCifUserPayload

  """
  Updates a single `EmissionIntensityPaymentPercent` using its globally unique id and a patch.
  """
  updateEmissionIntensityPaymentPercent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityPaymentPercentInput!
  ): UpdateEmissionIntensityPaymentPercentPayload

  """
  Updates a single `EmissionIntensityPaymentPercent` using a unique key and a patch.
  """
  updateEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformanceInput!
  ): UpdateEmissionIntensityPaymentPercentPayload

  """
  Updates a single `EmissionIntensityPaymentPercent` using a unique key and a patch.
  """
  updateEmissionIntensityPaymentPercentByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityPaymentPercentByRowIdInput!
  ): UpdateEmissionIntensityPaymentPercentPayload

  """
  Updates a single `EmissionIntensityReport` using its globally unique id and a patch.
  """
  updateEmissionIntensityReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityReportInput!
  ): UpdateEmissionIntensityReportPayload

  """
  Updates a single `EmissionIntensityReport` using a unique key and a patch.
  """
  updateEmissionIntensityReportByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityReportByRowIdInput!
  ): UpdateEmissionIntensityReportPayload

  """Updates a single `Form` using its globally unique id and a patch."""
  updateForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormInput!
  ): UpdateFormPayload

  """Updates a single `Form` using a unique key and a patch."""
  updateFormByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormByRowIdInput!
  ): UpdateFormPayload

  """Updates a single `Form` using a unique key and a patch."""
  updateFormBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormBySlugInput!
  ): UpdateFormPayload

  """
  Custom mutation that sets the change status to pending on every form_change update
  """
  updateFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormChangeInput!
  ): UpdateFormChangePayload

  """
  Updates a single `FundingParameter` using its globally unique id and a patch.
  """
  updateFundingParameter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingParameterInput!
  ): UpdateFundingParameterPayload

  """Updates a single `FundingParameter` using a unique key and a patch."""
  updateFundingParameterByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingParameterByRowIdInput!
  ): UpdateFundingParameterPayload

  """
  Updates a single `FundingStream` using its globally unique id and a patch.
  """
  updateFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamInput!
  ): UpdateFundingStreamPayload

  """Updates a single `FundingStream` using a unique key and a patch."""
  updateFundingStreamByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamByRowIdInput!
  ): UpdateFundingStreamPayload

  """
  Updates a single `FundingStreamRfp` using its globally unique id and a patch.
  """
  updateFundingStreamRfp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpInput!
  ): UpdateFundingStreamRfpPayload

  """Updates a single `FundingStreamRfp` using a unique key and a patch."""
  updateFundingStreamRfpByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpByRowIdInput!
  ): UpdateFundingStreamRfpPayload

  """
  Updates a single `FundingStreamRfpProjectStatus` using its globally unique id and a patch.
  """
  updateFundingStreamRfpProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpProjectStatusInput!
  ): UpdateFundingStreamRfpProjectStatusPayload

  """
  Updates a single `FundingStreamRfpProjectStatus` using a unique key and a patch.
  """
  updateFundingStreamRfpProjectStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpProjectStatusByRowIdInput!
  ): UpdateFundingStreamRfpProjectStatusPayload

  """
  Updates a single `MilestoneReport` using its globally unique id and a patch.
  """
  updateMilestoneReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMilestoneReportInput!
  ): UpdateMilestoneReportPayload

  """Updates a single `MilestoneReport` using a unique key and a patch."""
  updateMilestoneReportByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMilestoneReportByRowIdInput!
  ): UpdateMilestoneReportPayload

  """
  Function creates a user if a user with the matching session_sub does not exist, otherwise returns the matching user
  """
  updateOrCreateUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrCreateUserFromSessionInput!
  ): UpdateOrCreateUserFromSessionPayload

  """
  Updates a single `ProjectContact` using its globally unique id and a patch.
  """
  updateProjectContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectContactInput!
  ): UpdateProjectContactPayload

  """Updates a single `ProjectContact` using a unique key and a patch."""
  updateProjectContactByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectContactByRowIdInput!
  ): UpdateProjectContactPayload

  """
  Updates a single `ProjectManager` using its globally unique id and a patch.
  """
  updateProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerInput!
  ): UpdateProjectManagerPayload

  """Updates a single `ProjectManager` using a unique key and a patch."""
  updateProjectManagerByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerByRowIdInput!
  ): UpdateProjectManagerPayload

  """
  Updates a single `ProjectManagerLabel` using its globally unique id and a patch.
  """
  updateProjectManagerLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerLabelInput!
  ): UpdateProjectManagerLabelPayload

  """Updates a single `ProjectManagerLabel` using a unique key and a patch."""
  updateProjectManagerLabelByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerLabelByLabelInput!
  ): UpdateProjectManagerLabelPayload

  """Updates a single `ProjectManagerLabel` using a unique key and a patch."""
  updateProjectManagerLabelByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerLabelByRowIdInput!
  ): UpdateProjectManagerLabelPayload

  """
  Updates a single `ProjectRevision` using its globally unique id and a patch.
  """
  updateProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionInput!
  ): UpdateProjectRevisionPayload

  """
  Updates a single `ProjectRevisionAmendmentType` using its globally unique id and a patch.
  """
  updateProjectRevisionAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionAmendmentTypeInput!
  ): UpdateProjectRevisionAmendmentTypePayload

  """
  Updates a single `ProjectRevisionAmendmentType` using a unique key and a patch.
  """
  updateProjectRevisionAmendmentTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionAmendmentTypeByRowIdInput!
  ): UpdateProjectRevisionAmendmentTypePayload

  """Updates a single `ProjectRevision` using a unique key and a patch."""
  updateProjectRevisionByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionByRowIdInput!
  ): UpdateProjectRevisionPayload

  """
  Updates a single `ProjectStatus` using its globally unique id and a patch.
  """
  updateProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectStatusInput!
  ): UpdateProjectStatusPayload

  """Updates a single `ProjectStatus` using a unique key and a patch."""
  updateProjectStatusByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectStatusByRowIdInput!
  ): UpdateProjectStatusPayload

  """
  Updates a single `ProjectType` using its globally unique id and a patch.
  """
  updateProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectTypeInput!
  ): UpdateProjectTypePayload

  """Updates a single `ProjectType` using a unique key and a patch."""
  updateProjectTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectTypeByNameInput!
  ): UpdateProjectTypePayload

  """Updates a single `ProjectType` using a unique key and a patch."""
  updateProjectTypeByRowId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectTypeByRowIdInput!
  ): UpdateProjectTypePayload

  """
  Updates a single `ReportType` using its globally unique id and a patch.
  """
  updateReportType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportTypeInput!
  ): UpdateReportTypePayload

  """Updates a single `ReportType` using a unique key and a patch."""
  updateReportTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportTypeByNameInput!
  ): UpdateReportTypePayload

  """
  Updates a single `RevisionStatus` using its globally unique id and a patch.
  """
  updateRevisionStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRevisionStatusInput!
  ): UpdateRevisionStatusPayload

  """Updates a single `RevisionStatus` using a unique key and a patch."""
  updateRevisionStatusByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRevisionStatusByNameInput!
  ): UpdateRevisionStatusPayload

  """
  Updates a single `RevisionType` using its globally unique id and a patch.
  """
  updateRevisionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRevisionTypeInput!
  ): UpdateRevisionTypePayload

  """Updates a single `RevisionType` using a unique key and a patch."""
  updateRevisionTypeByType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRevisionTypeByTypeInput!
  ): UpdateRevisionTypePayload

  """Updates a single `Sector` using its globally unique id and a patch."""
  updateSector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSectorInput!
  ): UpdateSectorPayload

  """Updates a single `Sector` using a unique key and a patch."""
  updateSectorBySectorName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSectorBySectorNameInput!
  ): UpdateSectorPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Table containing information about a CIF operator"""
type Operator implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """The bc registry id assigned to this operator"""
  bcRegistryId: String

  """Reads a single `CifUser` that is related to this `Operator`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Operator`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Operator`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectOperatorIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorCifUsersByProjectOperatorIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectOperatorIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectOperatorIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorFundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The legal name of this operator"""
  legalName: String

  """
  The operator code is a set of characters that uniquely identifies the operator and is used in the cif.project table as part of the propsal_reference
  """
  operatorCode: String

  """
  Returns the pending form change editing the operator created by the current user, if it exists.
  """
  pendingFormChange: FormChange

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectOperatorIdAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorProjectStatusesByProjectOperatorIdAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByProjectOperatorIdAndProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorProjectTypesByProjectOperatorIdAndProjectTypeManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the operator"""
  rowId: Int!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByProjectOperatorIdAndSectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorSectorsByProjectOperatorIdAndSectorNameManyToManyConnection!

  """The legal name of this operator as last imported from SWRS"""
  swrsLegalName: String

  """
  The organisation ID from the ggircs database as assigned by the federal Single Window Reporting System
  """
  swrsOrganisationId: Int

  """The trade name of this operator as last imported from SWRS"""
  swrsTradeName: String

  """The trade name of this operator"""
  tradeName: String

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorCifUsersByProjectOperatorIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type OperatorCifUsersByProjectOperatorIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `Operator` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OperatorCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `bcRegistryId` field."""
  bcRegistryId: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `legalName` field."""
  legalName: String

  """Checks for equality with the object’s `operatorCode` field."""
  operatorCode: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `swrsLegalName` field."""
  swrsLegalName: String

  """Checks for equality with the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: Int

  """Checks for equality with the object’s `swrsTradeName` field."""
  swrsTradeName: String

  """Checks for equality with the object’s `tradeName` field."""
  tradeName: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Operator` object types. All fields are combined with a logical ‘and.’
"""
input OperatorFilter {
  """Checks for all expressions in this list."""
  and: [OperatorFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `bcRegistryId` field."""
  bcRegistryId: StringFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `legalName` field."""
  legalName: StringFilter

  """Negates the expression."""
  not: OperatorFilter

  """Filter by the object’s `operatorCode` field."""
  operatorCode: StringFilter

  """Checks for any expressions in this list."""
  or: [OperatorFilter!]

  """Filter by the object’s `projectsByOperatorId` relation."""
  projectsByOperatorId: OperatorToManyProjectFilter

  """Some related `projectsByOperatorId` exist."""
  projectsByOperatorIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `swrsLegalName` field."""
  swrsLegalName: StringFilter

  """Filter by the object’s `swrsOrganisationId` field."""
  swrsOrganisationId: IntFilter

  """Filter by the object’s `swrsTradeName` field."""
  swrsTradeName: StringFilter

  """Filter by the object’s `tradeName` field."""
  tradeName: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type OperatorFundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorFundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type OperatorFundingStreamRfpsByProjectOperatorIdAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type OperatorProjectStatusesByProjectOperatorIdAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorProjectStatusesByProjectOperatorIdAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type OperatorProjectStatusesByProjectOperatorIdAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectType` values, with data from `Project`.
"""
type OperatorProjectTypesByProjectOperatorIdAndProjectTypeManyToManyConnection {
  """
  A list of edges which contains the `ProjectType`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorProjectTypesByProjectOperatorIdAndProjectTypeManyToManyEdge!]!

  """A list of `ProjectType` objects."""
  nodes: [ProjectType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectType` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectType` edge in the connection, with data from `Project`."""
type OperatorProjectTypesByProjectOperatorIdAndProjectTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectType` at the end of the edge."""
  node: ProjectType

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Sector` values, with data from `Project`."""
type OperatorSectorsByProjectOperatorIdAndSectorNameManyToManyConnection {
  """
  A list of edges which contains the `Sector`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [OperatorSectorsByProjectOperatorIdAndSectorNameManyToManyEdge!]!

  """A list of `Sector` objects."""
  nodes: [Sector]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sector` you could get from the connection."""
  totalCount: Int!
}

"""A `Sector` edge in the connection, with data from `Project`."""
type OperatorSectorsByProjectOperatorIdAndSectorNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sector` at the end of the edge."""
  node: Sector

  """Reads and enables pagination through a set of `Project`."""
  projectsBySectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input OperatorToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `Operator` values."""
type OperatorsConnection {
  """
  A list of edges which contains the `Operator` and cursor to aid in pagination.
  """
  edges: [OperatorsEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection."""
type OperatorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator
}

"""Methods to use when ordering `Operator`."""
enum OperatorsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  BC_REGISTRY_ID_ASC
  BC_REGISTRY_ID_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  LEGAL_NAME_ASC
  LEGAL_NAME_DESC
  NATURAL
  OPERATOR_CODE_ASC
  OPERATOR_CODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_OPERATOR_ID__COUNT_ASC
  PROJECTS_BY_OPERATOR_ID__COUNT_DESC
  SWRS_LEGAL_NAME_ASC
  SWRS_LEGAL_NAME_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  SWRS_TRADE_NAME_ASC
  SWRS_TRADE_NAME_DESC
  TRADE_NAME_ASC
  TRADE_NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""Table containing information about reporting requirements payments"""
type Payment implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `Payment`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Payment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Payment`."""
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """The date the payment was issued"""
  dateSentToCsnr: Datetime

  """
  The adjusted value of the gross amount of the payment which is the amount before deducting any holdback amount
  """
  grossAmount: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  The adjusted value of the net amount of the payment which is the amount actually paid out, after deducting any holdback amount
  """
  netAmount: BigFloat

  """
  Reads a single `ReportingRequirement` that is related to this `Payment`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """Foreign key references the cif.reporting_requirement table"""
  reportingRequirementId: Int!

  """Unique ID for the payment"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `Payment` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PaymentCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `dateSentToCsnr` field."""
  dateSentToCsnr: Datetime

  """Checks for equality with the object’s `grossAmount` field."""
  grossAmount: BigFloat

  """Checks for equality with the object’s `netAmount` field."""
  netAmount: BigFloat

  """Checks for equality with the object’s `reportingRequirementId` field."""
  reportingRequirementId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Payment` object types. All fields are combined with a logical ‘and.’
"""
input PaymentFilter {
  """Checks for all expressions in this list."""
  and: [PaymentFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `dateSentToCsnr` field."""
  dateSentToCsnr: DatetimeFilter

  """Filter by the object’s `grossAmount` field."""
  grossAmount: BigFloatFilter

  """Filter by the object’s `netAmount` field."""
  netAmount: BigFloatFilter

  """Negates the expression."""
  not: PaymentFilter

  """Checks for any expressions in this list."""
  or: [PaymentFilter!]

  """
  Filter by the object’s `reportingRequirementByReportingRequirementId` relation.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirementFilter

  """Filter by the object’s `reportingRequirementId` field."""
  reportingRequirementId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""A connection to a list of `Payment` values."""
type PaymentsConnection {
  """
  A list of edges which contains the `Payment` and cursor to aid in pagination.
  """
  edges: [PaymentsEdge!]!

  """A list of `Payment` objects."""
  nodes: [Payment]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Payment` you could get from the connection."""
  totalCount: Int!
}

"""A `Payment` edge in the connection."""
type PaymentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Payment` at the end of the edge."""
  node: Payment
}

"""Methods to use when ordering `Payment`."""
enum PaymentsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DATE_SENT_TO_CSNR_ASC
  DATE_SENT_TO_CSNR_DESC
  GROSS_AMOUNT_ASC
  GROSS_AMOUNT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  NET_AMOUNT_ASC
  NET_AMOUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_AT_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_AT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_BY_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ARCHIVED_BY_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__COMMENTS_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__COMMENTS_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_AT_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_AT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_BY_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__CREATED_BY_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__DESCRIPTION_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__DESCRIPTION_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ID_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__ID_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__PROJECT_ID_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__PROJECT_ID_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORTING_REQUIREMENT_INDEX_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORTING_REQUIREMENT_INDEX_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_DUE_DATE_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_DUE_DATE_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_TYPE_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__REPORT_TYPE_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__SUBMITTED_DATE_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__SUBMITTED_DATE_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_AT_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_AT_DESC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_BY_ASC
  REPORTING_REQUIREMENT_BY_REPORTING_REQUIREMENT_ID__UPDATED_BY_DESC
  REPORTING_REQUIREMENT_ID_ASC
  REPORTING_REQUIREMENT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about a CIF Project"""
type Project implements Node {
  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByAdditionalFundingSourceProjectIdAndStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectAdditionalFundingSourceStatusesByAdditionalFundingSourceProjectIdAndStatusManyToManyConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """
  Any additional information about this project in reference to the industry sector such as a sub-sector
  """
  additionalSectorInformation: String

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionProjectIdAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Project`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceProjectIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByAdditionalFundingSourceProjectIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByAdditionalFundingSourceProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAdditionalFundingSourceProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByAdditionalFundingSourceProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentProjectIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByAttachmentProjectIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByAttachmentProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByAttachmentProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingParameterProjectIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByFundingParameterProjectIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingParameterProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByFundingParameterProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingParameterProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByFundingParameterProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactProjectIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectContactProjectIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectContactProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectContactProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectContactProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementProjectIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByReportingRequirementProjectIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementProjectIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByReportingRequirementProjectIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementProjectIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectCifUsersByReportingRequirementProjectIdAndUpdatedByManyToManyConnection!

  """General comments pertaining to the project"""
  comments: String

  """Reads and enables pagination through a set of `Contact`."""
  contactsByProjectContactProjectIdAndContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsByProjectContactProjectIdAndContactIdManyToManyConnection!

  """The contract number of the project"""
  contractNumber: String

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """Reads a single `FundingStreamRfp` that is related to this `Project`."""
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """
  The id of the funding_stream_rfp (cif.funding_stream_rfp.id) that was selected when creating the project
  """
  fundingStreamRfpId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Returns the latest project revision with a change_status of committed for the given project
  """
  latestCommittedProjectRevision: ProjectRevision

  """Reads a single `Operator` that is related to this `Project`."""
  operatorByOperatorId: Operator

  """Foreign key references the cif.operator table"""
  operatorId: Int!

  """Returns the pending project revision for the project"""
  pendingProjectRevision: ProjectRevision

  """
  Returns a concatenated list of the project managers (used for filtering the projects table)
  """
  primaryManagers: String

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  projectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectProjectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """The name of the project"""
  projectName: String!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads a single `ProjectStatus` that is related to this `Project`."""
  projectStatusByProjectStatusId: ProjectStatus

  """
  The id of the project_status (cif.project_status.id) that the project is currently in
  """
  projectStatusId: Int!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByAttachmentProjectIdAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectProjectStatusesByAttachmentProjectIdAndProjectStatusIdManyToManyConnection!

  """The type of the project (e.g. fuel switching)"""
  projectType: String

  """Reads a single `ProjectType` that is related to this `Project`."""
  projectTypeByProjectType: ProjectType

  """
  Unique identifier internal to the CIF team. As of the 2022 RFPs, the current format is YYYY-RFP-0-ABCD-000. Projects for the 2019 and 2020 RFPs may use a different format.
  """
  proposalReference: String!

  """Reads and enables pagination through a set of `ReportType`."""
  reportTypesByReportingRequirementProjectIdAndReportType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectReportTypesByReportingRequirementProjectIdAndReportTypeManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByProjectRevisionProjectIdAndRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionStatusesByProjectRevisionProjectIdAndRevisionStatusManyToManyConnection!

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByProjectRevisionProjectIdAndRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionTypesByProjectRevisionProjectIdAndRevisionTypeManyToManyConnection!

  """Unique ID for the project"""
  rowId: Int!

  """The score of the project after evaluation by the CIF team"""
  score: BigFloat

  """Reads a single `Sector` that is related to this `Project`."""
  sectorBySectorName: Sector

  """The industry sector this project relates to"""
  sectorName: String

  """Summary of the project"""
  summary: String!

  """The total amount of funding requested for the project"""
  totalFundingRequest: BigFloat

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `AdditionalFundingSourceStatus` values, with data from `AdditionalFundingSource`.
"""
type ProjectAdditionalFundingSourceStatusesByAdditionalFundingSourceProjectIdAndStatusManyToManyConnection {
  """
  A list of edges which contains the `AdditionalFundingSourceStatus`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [ProjectAdditionalFundingSourceStatusesByAdditionalFundingSourceProjectIdAndStatusManyToManyEdge!]!

  """A list of `AdditionalFundingSourceStatus` objects."""
  nodes: [AdditionalFundingSourceStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AdditionalFundingSourceStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `AdditionalFundingSourceStatus` edge in the connection, with data from `AdditionalFundingSource`.
"""
type ProjectAdditionalFundingSourceStatusesByAdditionalFundingSourceProjectIdAndStatusManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AdditionalFundingSourceStatus` at the end of the edge."""
  node: AdditionalFundingSourceStatus
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type ProjectChangeStatusesByProjectRevisionProjectIdAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type ProjectCifUsersByAdditionalFundingSourceProjectIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByAdditionalFundingSourceProjectIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type ProjectCifUsersByAdditionalFundingSourceProjectIdAndArchivedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type ProjectCifUsersByAdditionalFundingSourceProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByAdditionalFundingSourceProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type ProjectCifUsersByAdditionalFundingSourceProjectIdAndCreatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `AdditionalFundingSource`.
"""
type ProjectCifUsersByAdditionalFundingSourceProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `AdditionalFundingSource`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByAdditionalFundingSourceProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `AdditionalFundingSource`.
"""
type ProjectCifUsersByAdditionalFundingSourceProjectIdAndUpdatedByManyToManyEdge {
  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type ProjectCifUsersByAttachmentProjectIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByAttachmentProjectIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type ProjectCifUsersByAttachmentProjectIdAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type ProjectCifUsersByAttachmentProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByAttachmentProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type ProjectCifUsersByAttachmentProjectIdAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type ProjectCifUsersByAttachmentProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByAttachmentProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type ProjectCifUsersByAttachmentProjectIdAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingParameter`.
"""
type ProjectCifUsersByFundingParameterProjectIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByFundingParameterProjectIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingParameter`."""
type ProjectCifUsersByFundingParameterProjectIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingParameter`.
"""
type ProjectCifUsersByFundingParameterProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByFundingParameterProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingParameter`."""
type ProjectCifUsersByFundingParameterProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingParameter`.
"""
type ProjectCifUsersByFundingParameterProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingParameter`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByFundingParameterProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FundingParameter`."""
type ProjectCifUsersByFundingParameterProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FundingParameter`."""
  fundingParametersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ProjectCifUsersByProjectContactProjectIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectContactProjectIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ProjectCifUsersByProjectContactProjectIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ProjectCifUsersByProjectContactProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectContactProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ProjectCifUsersByProjectContactProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectContact`.
"""
type ProjectCifUsersByProjectContactProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectContactProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectContact`."""
type ProjectCifUsersByProjectContactProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectCifUsersByProjectManagerProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ProjectCifUsersByProjectRevisionProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type ProjectCifUsersByProjectRevisionProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type ProjectCifUsersByReportingRequirementProjectIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByReportingRequirementProjectIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type ProjectCifUsersByReportingRequirementProjectIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type ProjectCifUsersByReportingRequirementProjectIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByReportingRequirementProjectIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type ProjectCifUsersByReportingRequirementProjectIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type ProjectCifUsersByReportingRequirementProjectIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [ProjectCifUsersByReportingRequirementProjectIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type ProjectCifUsersByReportingRequirementProjectIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """
  Checks for equality with the object’s `additionalSectorInformation` field.
  """
  additionalSectorInformation: String

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `contractNumber` field."""
  contractNumber: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `fundingStreamRfpId` field."""
  fundingStreamRfpId: Int

  """Checks for equality with the object’s `operatorId` field."""
  operatorId: Int

  """Checks for equality with the object’s `primaryManagers` field."""
  primaryManagers: String

  """Checks for equality with the object’s `projectName` field."""
  projectName: String

  """Checks for equality with the object’s `projectStatusId` field."""
  projectStatusId: Int

  """Checks for equality with the object’s `projectType` field."""
  projectType: String

  """Checks for equality with the object’s `proposalReference` field."""
  proposalReference: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `score` field."""
  score: BigFloat

  """Checks for equality with the object’s `sectorName` field."""
  sectorName: String

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `totalFundingRequest` field."""
  totalFundingRequest: BigFloat

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""Join table to track assignment of contacts to projects"""
type ProjectContact implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByUpdatedBy: CifUser

  """Reads a single `Contact` that is related to this `ProjectContact`."""
  contactByContactId: Contact

  """Foreign key to the contact"""
  contactId: Int!

  """The zero-based index of the contact in the project"""
  contactIndex: Int!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Project` that is related to this `ProjectContact`."""
  projectByProjectId: Project

  """Foreign key to the project"""
  projectId: Int!

  """Unique ID for the project contact record"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `ProjectContact` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectContactCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `contactId` field."""
  contactId: Int

  """Checks for equality with the object’s `contactIndex` field."""
  contactIndex: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectContact` object types. All fields are combined with a logical ‘and.’
"""
input ProjectContactFilter {
  """Checks for all expressions in this list."""
  and: [ProjectContactFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `contactByContactId` relation."""
  contactByContactId: ContactFilter

  """Filter by the object’s `contactId` field."""
  contactId: IntFilter

  """Filter by the object’s `contactIndex` field."""
  contactIndex: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Negates the expression."""
  not: ProjectContactFilter

  """Checks for any expressions in this list."""
  or: [ProjectContactFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ProjectContact`"""
input ProjectContactInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Foreign key to the contact"""
  contactId: Int!

  """The zero-based index of the contact in the project"""
  contactIndex: Int!

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ProjectContact`. Fields that are set will be updated.
"""
input ProjectContactPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Foreign key to the contact"""
  contactId: Int

  """The zero-based index of the contact in the project"""
  contactIndex: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `Contact` values, with data from `ProjectContact`.
"""
type ProjectContactsByProjectContactProjectIdAndContactIdManyToManyConnection {
  """
  A list of edges which contains the `Contact`, info from the `ProjectContact`, and the cursor to aid in pagination.
  """
  edges: [ProjectContactsByProjectContactProjectIdAndContactIdManyToManyEdge!]!

  """A list of `Contact` objects."""
  nodes: [Contact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contact` you could get from the connection."""
  totalCount: Int!
}

"""A `Contact` edge in the connection, with data from `ProjectContact`."""
type ProjectContactsByProjectContactProjectIdAndContactIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contact` at the end of the edge."""
  node: Contact

  """Reads and enables pagination through a set of `ProjectContact`."""
  projectContactsByContactId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection!
}

"""A connection to a list of `ProjectContact` values."""
type ProjectContactsConnection {
  """
  A list of edges which contains the `ProjectContact` and cursor to aid in pagination.
  """
  edges: [ProjectContactsEdge!]!

  """A list of `ProjectContact` objects."""
  nodes: [ProjectContact]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectContact` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectContact` edge in the connection."""
type ProjectContactsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectContact` at the end of the edge."""
  node: ProjectContact
}

"""Methods to use when ordering `ProjectContact`."""
enum ProjectContactsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CONTACT_BY_CONTACT_ID__ARCHIVED_AT_ASC
  CONTACT_BY_CONTACT_ID__ARCHIVED_AT_DESC
  CONTACT_BY_CONTACT_ID__ARCHIVED_BY_ASC
  CONTACT_BY_CONTACT_ID__ARCHIVED_BY_DESC
  CONTACT_BY_CONTACT_ID__COMMENTS_ASC
  CONTACT_BY_CONTACT_ID__COMMENTS_DESC
  CONTACT_BY_CONTACT_ID__COMPANY_NAME_ASC
  CONTACT_BY_CONTACT_ID__COMPANY_NAME_DESC
  CONTACT_BY_CONTACT_ID__CONTACT_POSITION_ASC
  CONTACT_BY_CONTACT_ID__CONTACT_POSITION_DESC
  CONTACT_BY_CONTACT_ID__CREATED_AT_ASC
  CONTACT_BY_CONTACT_ID__CREATED_AT_DESC
  CONTACT_BY_CONTACT_ID__CREATED_BY_ASC
  CONTACT_BY_CONTACT_ID__CREATED_BY_DESC
  CONTACT_BY_CONTACT_ID__EMAIL_ASC
  CONTACT_BY_CONTACT_ID__EMAIL_DESC
  CONTACT_BY_CONTACT_ID__FAMILY_NAME_ASC
  CONTACT_BY_CONTACT_ID__FAMILY_NAME_DESC
  CONTACT_BY_CONTACT_ID__FULL_NAME_ASC
  CONTACT_BY_CONTACT_ID__FULL_NAME_DESC
  CONTACT_BY_CONTACT_ID__FULL_PHONE_ASC
  CONTACT_BY_CONTACT_ID__FULL_PHONE_DESC
  CONTACT_BY_CONTACT_ID__GIVEN_NAME_ASC
  CONTACT_BY_CONTACT_ID__GIVEN_NAME_DESC
  CONTACT_BY_CONTACT_ID__ID_ASC
  CONTACT_BY_CONTACT_ID__ID_DESC
  CONTACT_BY_CONTACT_ID__PHONE_ASC
  CONTACT_BY_CONTACT_ID__PHONE_DESC
  CONTACT_BY_CONTACT_ID__PHONE_EXT_ASC
  CONTACT_BY_CONTACT_ID__PHONE_EXT_DESC
  CONTACT_BY_CONTACT_ID__UPDATED_AT_ASC
  CONTACT_BY_CONTACT_ID__UPDATED_AT_DESC
  CONTACT_BY_CONTACT_ID__UPDATED_BY_ASC
  CONTACT_BY_CONTACT_ID__UPDATED_BY_DESC
  CONTACT_ID_ASC
  CONTACT_ID_DESC
  CONTACT_INDEX_ASC
  CONTACT_INDEX_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_ASC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__COMMENTS_ASC
  PROJECT_BY_PROJECT_ID__COMMENTS_DESC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_ASC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SCORE_ASC
  PROJECT_BY_PROJECT_ID__SCORE_DESC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_ASC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against `Project` object types. All fields are combined with a logical ‘and.’
"""
input ProjectFilter {
  """Filter by the object’s `additionalFundingSourcesByProjectId` relation."""
  additionalFundingSourcesByProjectId: ProjectToManyAdditionalFundingSourceFilter

  """Some related `additionalFundingSourcesByProjectId` exist."""
  additionalFundingSourcesByProjectIdExist: Boolean

  """Filter by the object’s `additionalSectorInformation` field."""
  additionalSectorInformation: StringFilter

  """Checks for all expressions in this list."""
  and: [ProjectFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `attachmentsByProjectId` relation."""
  attachmentsByProjectId: ProjectToManyAttachmentFilter

  """Some related `attachmentsByProjectId` exist."""
  attachmentsByProjectIdExist: Boolean

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `comments` field."""
  comments: StringFilter

  """Filter by the object’s `contractNumber` field."""
  contractNumber: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `fundingParametersByProjectId` relation."""
  fundingParametersByProjectId: ProjectToManyFundingParameterFilter

  """Some related `fundingParametersByProjectId` exist."""
  fundingParametersByProjectIdExist: Boolean

  """
  Filter by the object’s `fundingStreamRfpByFundingStreamRfpId` relation.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfpFilter

  """Filter by the object’s `fundingStreamRfpId` field."""
  fundingStreamRfpId: IntFilter

  """Negates the expression."""
  not: ProjectFilter

  """Filter by the object’s `operatorByOperatorId` relation."""
  operatorByOperatorId: OperatorFilter

  """Filter by the object’s `operatorId` field."""
  operatorId: IntFilter

  """Checks for any expressions in this list."""
  or: [ProjectFilter!]

  """Filter by the object’s `primaryManagers` field."""
  primaryManagers: StringFilter

  """Filter by the object’s `projectContactsByProjectId` relation."""
  projectContactsByProjectId: ProjectToManyProjectContactFilter

  """Some related `projectContactsByProjectId` exist."""
  projectContactsByProjectIdExist: Boolean

  """Filter by the object’s `projectManagersByProjectId` relation."""
  projectManagersByProjectId: ProjectToManyProjectManagerFilter

  """Some related `projectManagersByProjectId` exist."""
  projectManagersByProjectIdExist: Boolean

  """Filter by the object’s `projectName` field."""
  projectName: StringFilter

  """Filter by the object’s `projectRevisionsByProjectId` relation."""
  projectRevisionsByProjectId: ProjectToManyProjectRevisionFilter

  """Some related `projectRevisionsByProjectId` exist."""
  projectRevisionsByProjectIdExist: Boolean

  """Filter by the object’s `projectStatusByProjectStatusId` relation."""
  projectStatusByProjectStatusId: ProjectStatusFilter

  """Filter by the object’s `projectStatusId` field."""
  projectStatusId: IntFilter

  """Filter by the object’s `projectType` field."""
  projectType: StringFilter

  """Filter by the object’s `projectTypeByProjectType` relation."""
  projectTypeByProjectType: ProjectTypeFilter

  """A related `projectTypeByProjectType` exists."""
  projectTypeByProjectTypeExists: Boolean

  """Filter by the object’s `proposalReference` field."""
  proposalReference: StringFilter

  """Filter by the object’s `reportingRequirementsByProjectId` relation."""
  reportingRequirementsByProjectId: ProjectToManyReportingRequirementFilter

  """Some related `reportingRequirementsByProjectId` exist."""
  reportingRequirementsByProjectIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `score` field."""
  score: BigFloatFilter

  """Filter by the object’s `sectorBySectorName` relation."""
  sectorBySectorName: SectorFilter

  """A related `sectorBySectorName` exists."""
  sectorBySectorNameExists: Boolean

  """Filter by the object’s `sectorName` field."""
  sectorName: StringFilter

  """Filter by the object’s `summary` field."""
  summary: StringFilter

  """Filter by the object’s `totalFundingRequest` field."""
  totalFundingRequest: BigFloatFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
Join table to track assignment of cif users to projects, as project managers
"""
type ProjectManager implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """Foreign key to the cif user"""
  cifUserId: Int!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """Foreign key to the project"""
  projectId: Int!

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Foreign key to the project_manager_label table. Defines the list of labels that cif_users can be assigned to as a manager of a project
  """
  projectManagerLabelId: Int!

  """Unique ID for the project manager record"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `ProjectManager` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectManagerCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `cifUserId` field."""
  cifUserId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `projectManagerLabelId` field."""
  projectManagerLabelId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input ProjectManagerFilter {
  """Checks for all expressions in this list."""
  and: [ProjectManagerFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCifUserId` relation."""
  cifUserByCifUserId: CifUserFilter

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `cifUserId` field."""
  cifUserId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Negates the expression."""
  not: ProjectManagerFilter

  """Checks for any expressions in this list."""
  or: [ProjectManagerFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """
  Filter by the object’s `projectManagerLabelByProjectManagerLabelId` relation.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabelFilter

  """Filter by the object’s `projectManagerLabelId` field."""
  projectManagerLabelId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ProjectManager`"""
input ProjectManagerInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Foreign key to the cif user"""
  cifUserId: Int!

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int!

  """
  Foreign key to the project_manager_label table. Defines the list of labels that cif_users can be assigned to as a manager of a project
  """
  projectManagerLabelId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Lookup table for project manager labels. Records define the labels that project managers can be assigned to a project as
"""
type ProjectManagerLabel implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectManagerLabelIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectManagerLabelIdAndCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCifUserIdManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectManagerLabelIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectManagerProjectManagerLabelIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The label that project managers can be assigned to a project as"""
  label: String!

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectManagerProjectManagerLabelIdAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelProjectsByProjectManagerProjectManagerLabelIdAndProjectIdManyToManyConnection!

  """Unique ID for the project_manager_label record"""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCifUserIdManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCifUserIdManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCifUserIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCifUserId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelCifUsersByProjectManagerProjectManagerLabelIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A condition to be used against `ProjectManagerLabel` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProjectManagerLabelCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectManagerLabel` object types. All fields are combined with a logical ‘and.’
"""
input ProjectManagerLabelFilter {
  """Checks for all expressions in this list."""
  and: [ProjectManagerLabelFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `label` field."""
  label: StringFilter

  """Negates the expression."""
  not: ProjectManagerLabelFilter

  """Checks for any expressions in this list."""
  or: [ProjectManagerLabelFilter!]

  """
  Filter by the object’s `projectManagersByProjectManagerLabelId` relation.
  """
  projectManagersByProjectManagerLabelId: ProjectManagerLabelToManyProjectManagerFilter

  """Some related `projectManagersByProjectManagerLabelId` exist."""
  projectManagersByProjectManagerLabelIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ProjectManagerLabel`"""
input ProjectManagerLabelInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The label that project managers can be assigned to a project as"""
  label: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ProjectManagerLabel`. Fields that are set will be updated.
"""
input ProjectManagerLabelPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The label that project managers can be assigned to a project as"""
  label: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `Project` values, with data from `ProjectManager`.
"""
type ProjectManagerLabelProjectsByProjectManagerProjectManagerLabelIdAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelProjectsByProjectManagerProjectManagerLabelIdAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectManager`."""
type ProjectManagerLabelProjectsByProjectManagerProjectManagerLabelIdAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A filter to be used against many `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input ProjectManagerLabelToManyProjectManagerFilter {
  """
  Every related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerFilter

  """
  No related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerFilter

  """
  Some related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerFilter
}

"""A connection to a list of `ProjectManagerLabel` values."""
type ProjectManagerLabelsConnection {
  """
  A list of edges which contains the `ProjectManagerLabel` and cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelsEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectManagerLabel` edge in the connection."""
type ProjectManagerLabelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel
}

"""Methods to use when ordering `ProjectManagerLabel`."""
enum ProjectManagerLabelsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  LABEL_ASC
  LABEL_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_MANAGERS_BY_PROJECT_MANAGER_LABEL_ID__COUNT_ASC
  PROJECT_MANAGERS_BY_PROJECT_MANAGER_LABEL_ID__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
Represents an update to a `ProjectManager`. Fields that are set will be updated.
"""
input ProjectManagerPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Foreign key to the cif user"""
  cifUserId: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project"""
  projectId: Int

  """
  Foreign key to the project_manager_label table. Defines the list of labels that cif_users can be assigned to as a manager of a project
  """
  projectManagerLabelId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `ProjectManager` values."""
type ProjectManagersConnection {
  """
  A list of edges which contains the `ProjectManager` and cursor to aid in pagination.
  """
  edges: [ProjectManagersEdge!]!

  """A list of `ProjectManager` objects."""
  nodes: [ProjectManager]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectManager` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectManager` edge in the connection."""
type ProjectManagersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManager` at the end of the edge."""
  node: ProjectManager
}

"""Methods to use when ordering `ProjectManager`."""
enum ProjectManagersOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CIF_USER_ID__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CIF_USER_ID__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CIF_USER_ID__ARCHIVED_AT_ASC
  CIF_USER_BY_CIF_USER_ID__ARCHIVED_AT_DESC
  CIF_USER_BY_CIF_USER_ID__ARCHIVED_BY_ASC
  CIF_USER_BY_CIF_USER_ID__ARCHIVED_BY_DESC
  CIF_USER_BY_CIF_USER_ID__CREATED_AT_ASC
  CIF_USER_BY_CIF_USER_ID__CREATED_AT_DESC
  CIF_USER_BY_CIF_USER_ID__CREATED_BY_ASC
  CIF_USER_BY_CIF_USER_ID__CREATED_BY_DESC
  CIF_USER_BY_CIF_USER_ID__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CIF_USER_ID__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CIF_USER_ID__FAMILY_NAME_ASC
  CIF_USER_BY_CIF_USER_ID__FAMILY_NAME_DESC
  CIF_USER_BY_CIF_USER_ID__FULL_NAME_ASC
  CIF_USER_BY_CIF_USER_ID__FULL_NAME_DESC
  CIF_USER_BY_CIF_USER_ID__GIVEN_NAME_ASC
  CIF_USER_BY_CIF_USER_ID__GIVEN_NAME_DESC
  CIF_USER_BY_CIF_USER_ID__ID_ASC
  CIF_USER_BY_CIF_USER_ID__ID_DESC
  CIF_USER_BY_CIF_USER_ID__SESSION_SUB_ASC
  CIF_USER_BY_CIF_USER_ID__SESSION_SUB_DESC
  CIF_USER_BY_CIF_USER_ID__UPDATED_AT_ASC
  CIF_USER_BY_CIF_USER_ID__UPDATED_AT_DESC
  CIF_USER_BY_CIF_USER_ID__UPDATED_BY_ASC
  CIF_USER_BY_CIF_USER_ID__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CIF_USER_ID_ASC
  CIF_USER_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_ASC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__COMMENTS_ASC
  PROJECT_BY_PROJECT_ID__COMMENTS_DESC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_ASC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SCORE_ASC
  PROJECT_BY_PROJECT_ID__SCORE_DESC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_ASC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ARCHIVED_AT_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ARCHIVED_AT_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ARCHIVED_BY_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ARCHIVED_BY_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__CREATED_AT_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__CREATED_AT_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__CREATED_BY_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__CREATED_BY_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ID_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__ID_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__LABEL_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__LABEL_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__UPDATED_AT_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__UPDATED_AT_DESC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__UPDATED_BY_ASC
  PROJECT_MANAGER_LABEL_BY_PROJECT_MANAGER_LABEL_ID__UPDATED_BY_DESC
  PROJECT_MANAGER_LABEL_ID_ASC
  PROJECT_MANAGER_LABEL_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A connection to a list of `ProjectManagerLabel` values, with data from `ProjectManager`.
"""
type ProjectProjectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectManagerLabel`, info from the `ProjectManager`, and the cursor to aid in pagination.
  """
  edges: [ProjectProjectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelIdManyToManyEdge!]!

  """A list of `ProjectManagerLabel` objects."""
  nodes: [ProjectManagerLabel]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection, with data from `ProjectManager`.
"""
type ProjectProjectManagerLabelsByProjectManagerProjectIdAndProjectManagerLabelIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectManagerLabel` at the end of the edge."""
  node: ProjectManagerLabel

  """Reads and enables pagination through a set of `ProjectManager`."""
  projectManagersByProjectManagerLabelId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectStatus` values, with data from `Attachment`.
"""
type ProjectProjectStatusesByAttachmentProjectIdAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ProjectProjectStatusesByAttachmentProjectIdAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Attachment`."""
type ProjectProjectStatusesByAttachmentProjectIdAndProjectStatusIdManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""
A connection to a list of `ReportType` values, with data from `ReportingRequirement`.
"""
type ProjectReportTypesByReportingRequirementProjectIdAndReportTypeManyToManyConnection {
  """
  A list of edges which contains the `ReportType`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [ProjectReportTypesByReportingRequirementProjectIdAndReportTypeManyToManyEdge!]!

  """A list of `ReportType` objects."""
  nodes: [ReportType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportType` you could get from the connection."""
  totalCount: Int!
}

"""
A `ReportType` edge in the connection, with data from `ReportingRequirement`.
"""
type ProjectReportTypesByReportingRequirementProjectIdAndReportTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportType` at the end of the edge."""
  node: ReportType

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByReportType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""Table containing all the changes for a project revision"""
type ProjectRevision implements Node {
  """Reads and enables pagination through a set of `AmendmentType`."""
  amendmentTypesByProjectRevisionAmendmentTypeProjectRevisionIdAndAmendmentType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesByProjectRevisionAmendmentTypeProjectRevisionIdAndAmendmentTypeManyToManyConnection!

  """Explanation of why the revision was made"""
  changeReason: String

  """Foreign key to the status of the project revision"""
  changeStatus: String

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByFormChangeProjectRevisionIdAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeProjectRevisionIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFormChangeProjectRevisionIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndUpdatedByManyToManyConnection!

  """Comments on the project revision"""
  comments: String

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  Returns the timestamptz for updated_at if the change_status is committed, otherwise null
  """
  effectiveDate: Datetime

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByFormChangeProjectRevisionIdAndPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionFormChangesByFormChangeProjectRevisionIdAndPreviousFormChangeIdManyToManyConnection!

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """
  Computed column to dynamically retrieve the form_change records relating to the project_revision from a given table
  """
  formChangesFor(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int
    formDataTableName: String!
    jsonMatcher: String

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    reportType: String
  ): FormChangesConnection!

  """Reads and enables pagination through a set of `Form`."""
  formsByFormChangeProjectRevisionIdAndJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionFormsByFormChangeProjectRevisionIdAndJsonSchemaNameManyToManyConnection!

  """Computed column to total the net payments made for a project revision"""
  grossPaymentAmount: BigFloat

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Boolean value to indicate if the revision is the first revision for the project
  """
  isFirstRevision: Boolean

  """
  Computed column to return both form completion statuses and reporting requirement statuses for individual milestones
  """
  milestoneReportStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportStatusReturnFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): MilestoneReportStatusReturnsConnection!
  netPaymentAmount: BigFloat

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project

  """
  Computed column for graphql to retrieve the change related to the project record, within a project revision
  """
  projectFormChange: FormChange

  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int

  """
  Computed column returns a composite value for each record in project_manager_label and the last related form_change (including archived records) if it exists
  """
  projectManagerFormChangesByLabel(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
  ): ManagerFormChangesByLabelCompositeReturnsConnection!

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByProjectRevisionId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!

  """Computed column to determine the rank of a project"""
  rank: Int

  """The status of the revision of a project"""
  revisionStatus: String!

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """The type of the project revision (e.g. General Revision)"""
  revisionType: String!

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType

  """Unique ID for the project revision"""
  rowId: Int!

  """
  Computed column to return a tasklist status for any tasklist form with an optional json matcher on the form selection
  """
  tasklistStatusFor(formDataTableName: String!, jsonMatcher: String): String

  """
      Computed column to return the TEIMP payment amount, based on:
      - X% being the TEIMP payment percentage calculated from the emissions performance (Schedule G)
      - Gross and Net payment amounts to date
      Formula:
      TEIMP payment amount = X% * (Gross payment to date - Net payment to date)
  
  """
  teimpPaymentAmount: BigFloat

  """
      Computed column to return the TEIMP payment percentage, calculated as specified in the schedule G.
      The calculation for determining emission intensity performance uses three metrics and a calculation:
      Metrics:
      - BEI: Baseline Emission Intensity
      - PEI: Post-Project Emission Intensity
      - TEI: Target Emission Intensity
      Calculation:
      - Emission Intensity Payment Percentage = (BEI - PEI) / (BEI - TEI) * 100
  
  """
  teimpPaymentPercentage: BigFloat

  """
      Computed column to return the total project value.
      Calculation:
      - Total Project Value = Maximum Funding Amount + Proponent Cost + Additional Funding Amount(s)
  
  """
  totalProjectValue: BigFloat

  """
  Returns the row number of the project revision within the scope of a project and among all other revisions of the same type.
  """
  typeRowNumber: Int

  """
  Computed column to return the form_change for the earliest due reporting requirement that hasn't been submitted, optionally constrained by the report type
  """
  upcomingReportingRequirementFormChange(reportType: String): FormChange

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""A join table between project revisions and amendment types."""
type ProjectRevisionAmendmentType implements Node {
  """Foreign key to the amendment type"""
  amendmentType: String!

  """
  Reads a single `AmendmentType` that is related to this `ProjectRevisionAmendmentType`.
  """
  amendmentTypeByAmendmentType: AmendmentType

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Reads a single `ProjectRevision` that is related to this `ProjectRevisionAmendmentType`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """Foreign key to the project revision"""
  projectRevisionId: Int!

  """Unique ID for the project revision amendment type."""
  rowId: Int!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A condition to be used against `ProjectRevisionAmendmentType` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectRevisionAmendmentTypeCondition {
  """Checks for equality with the object’s `amendmentType` field."""
  amendmentType: String

  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `projectRevisionId` field."""
  projectRevisionId: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectRevisionAmendmentType` object types. All fields are combined with a logical ‘and.’
"""
input ProjectRevisionAmendmentTypeFilter {
  """Filter by the object’s `amendmentType` field."""
  amendmentType: StringFilter

  """Filter by the object’s `amendmentTypeByAmendmentType` relation."""
  amendmentTypeByAmendmentType: AmendmentTypeFilter

  """Checks for all expressions in this list."""
  and: [ProjectRevisionAmendmentTypeFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Negates the expression."""
  not: ProjectRevisionAmendmentTypeFilter

  """Checks for any expressions in this list."""
  or: [ProjectRevisionAmendmentTypeFilter!]

  """Filter by the object’s `projectRevisionByProjectRevisionId` relation."""
  projectRevisionByProjectRevisionId: ProjectRevisionFilter

  """Filter by the object’s `projectRevisionId` field."""
  projectRevisionId: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ProjectRevisionAmendmentType`"""
input ProjectRevisionAmendmentTypeInput {
  """Foreign key to the amendment type"""
  amendmentType: String!

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project revision"""
  projectRevisionId: Int!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ProjectRevisionAmendmentType`. Fields that are set will be updated.
"""
input ProjectRevisionAmendmentTypePatch {
  """Foreign key to the amendment type"""
  amendmentType: String

  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Foreign key to the project revision"""
  projectRevisionId: Int

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `AmendmentType` values, with data from `ProjectRevisionAmendmentType`.
"""
type ProjectRevisionAmendmentTypesByProjectRevisionAmendmentTypeProjectRevisionIdAndAmendmentTypeManyToManyConnection {
  """
  A list of edges which contains the `AmendmentType`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionAmendmentTypesByProjectRevisionAmendmentTypeProjectRevisionIdAndAmendmentTypeManyToManyEdge!]!

  """A list of `AmendmentType` objects."""
  nodes: [AmendmentType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AmendmentType` you could get from the connection."""
  totalCount: Int!
}

"""
A `AmendmentType` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type ProjectRevisionAmendmentTypesByProjectRevisionAmendmentTypeProjectRevisionIdAndAmendmentTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AmendmentType` at the end of the edge."""
  node: AmendmentType

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByAmendmentType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""A connection to a list of `ProjectRevisionAmendmentType` values."""
type ProjectRevisionAmendmentTypesConnection {
  """
  A list of edges which contains the `ProjectRevisionAmendmentType` and cursor to aid in pagination.
  """
  edges: [ProjectRevisionAmendmentTypesEdge!]!

  """A list of `ProjectRevisionAmendmentType` objects."""
  nodes: [ProjectRevisionAmendmentType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevisionAmendmentType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectRevisionAmendmentType` edge in the connection."""
type ProjectRevisionAmendmentTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectRevisionAmendmentType` at the end of the edge."""
  node: ProjectRevisionAmendmentType
}

"""Methods to use when ordering `ProjectRevisionAmendmentType`."""
enum ProjectRevisionAmendmentTypesOrderBy {
  AMENDMENT_TYPE_ASC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__ARCHIVED_AT_ASC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__ARCHIVED_AT_DESC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__ARCHIVED_BY_ASC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__ARCHIVED_BY_DESC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__CREATED_AT_ASC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__CREATED_AT_DESC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__CREATED_BY_ASC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__CREATED_BY_DESC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__NAME_ASC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__NAME_DESC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__UPDATED_AT_ASC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__UPDATED_AT_DESC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__UPDATED_BY_ASC
  AMENDMENT_TYPE_BY_AMENDMENT_TYPE__UPDATED_BY_DESC
  AMENDMENT_TYPE_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_REASON_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_REASON_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_STATUS_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CHANGE_STATUS_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__COMMENTS_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__COMMENTS_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_AT_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_AT_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_BY_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__CREATED_BY_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__EFFECTIVE_DATE_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__EFFECTIVE_DATE_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__ID_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__ID_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__IS_FIRST_REVISION_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__IS_FIRST_REVISION_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__PROJECT_ID_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__PROJECT_ID_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__REVISION_STATUS_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__REVISION_STATUS_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__REVISION_TYPE_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__REVISION_TYPE_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_AT_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_AT_DESC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_BY_ASC
  PROJECT_REVISION_BY_PROJECT_REVISION_ID__UPDATED_BY_DESC
  PROJECT_REVISION_ID_ASC
  PROJECT_REVISION_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A connection to a list of `ChangeStatus` values, with data from `FormChange`.
"""
type ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ChangeStatus` edge in the connection, with data from `FormChange`."""
type ProjectRevisionChangeStatusesByFormChangeProjectRevisionIdAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FormChange`.
"""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `FormChange`."""
type ProjectRevisionCifUsersByFormChangeProjectRevisionIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevisionAmendmentType`.
"""
type ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevisionAmendmentType`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ProjectRevisionAmendmentType`.
"""
type ProjectRevisionCifUsersByProjectRevisionAmendmentTypeProjectRevisionIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
A condition to be used against `ProjectRevision` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectRevisionCondition {
  """Checks for equality with the object’s `changeReason` field."""
  changeReason: String

  """Checks for equality with the object’s `changeStatus` field."""
  changeStatus: String

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `isFirstRevision` field."""
  isFirstRevision: Boolean

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `revisionStatus` field."""
  revisionStatus: String

  """Checks for equality with the object’s `revisionType` field."""
  revisionType: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input ProjectRevisionFilter {
  """Checks for all expressions in this list."""
  and: [ProjectRevisionFilter!]

  """Filter by the object’s `changeReason` field."""
  changeReason: StringFilter

  """Filter by the object’s `changeStatus` field."""
  changeStatus: StringFilter

  """Filter by the object’s `changeStatusByChangeStatus` relation."""
  changeStatusByChangeStatus: ChangeStatusFilter

  """A related `changeStatusByChangeStatus` exists."""
  changeStatusByChangeStatusExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `comments` field."""
  comments: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `effectiveDate` field."""
  effectiveDate: DatetimeFilter

  """Filter by the object’s `formChangesByProjectRevisionId` relation."""
  formChangesByProjectRevisionId: ProjectRevisionToManyFormChangeFilter

  """Some related `formChangesByProjectRevisionId` exist."""
  formChangesByProjectRevisionIdExist: Boolean

  """Filter by the object’s `grossPaymentAmount` field."""
  grossPaymentAmount: BigFloatFilter

  """Filter by the object’s `isFirstRevision` field."""
  isFirstRevision: BooleanFilter

  """Filter by the object’s `netPaymentAmount` field."""
  netPaymentAmount: BigFloatFilter

  """Negates the expression."""
  not: ProjectRevisionFilter

  """Checks for any expressions in this list."""
  or: [ProjectRevisionFilter!]

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """A related `projectByProjectId` exists."""
  projectByProjectIdExists: Boolean

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """
  Filter by the object’s `projectRevisionAmendmentTypesByProjectRevisionId` relation.
  """
  projectRevisionAmendmentTypesByProjectRevisionId: ProjectRevisionToManyProjectRevisionAmendmentTypeFilter

  """Some related `projectRevisionAmendmentTypesByProjectRevisionId` exist."""
  projectRevisionAmendmentTypesByProjectRevisionIdExist: Boolean

  """Filter by the object’s `rank` field."""
  rank: IntFilter

  """Filter by the object’s `revisionStatus` field."""
  revisionStatus: StringFilter

  """Filter by the object’s `revisionStatusByRevisionStatus` relation."""
  revisionStatusByRevisionStatus: RevisionStatusFilter

  """Filter by the object’s `revisionType` field."""
  revisionType: StringFilter

  """Filter by the object’s `revisionTypeByRevisionType` relation."""
  revisionTypeByRevisionType: RevisionTypeFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `teimpPaymentAmount` field."""
  teimpPaymentAmount: BigFloatFilter

  """Filter by the object’s `teimpPaymentPercentage` field."""
  teimpPaymentPercentage: BigFloatFilter

  """Filter by the object’s `totalProjectValue` field."""
  totalProjectValue: BigFloatFilter

  """Filter by the object’s `typeRowNumber` field."""
  typeRowNumber: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FormChange` values, with data from `FormChange`.
"""
type ProjectRevisionFormChangesByFormChangeProjectRevisionIdAndPreviousFormChangeIdManyToManyConnection {
  """
  A list of edges which contains the `FormChange`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionFormChangesByFormChangeProjectRevisionIdAndPreviousFormChangeIdManyToManyEdge!]!

  """A list of `FormChange` objects."""
  nodes: [FormChange]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `FormChange` you could get from the connection."""
  totalCount: Int!
}

"""A `FormChange` edge in the connection, with data from `FormChange`."""
type ProjectRevisionFormChangesByFormChangeProjectRevisionIdAndPreviousFormChangeIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByPreviousFormChangeId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `FormChange` at the end of the edge."""
  node: FormChange
}

"""A connection to a list of `Form` values, with data from `FormChange`."""
type ProjectRevisionFormsByFormChangeProjectRevisionIdAndJsonSchemaNameManyToManyConnection {
  """
  A list of edges which contains the `Form`, info from the `FormChange`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionFormsByFormChangeProjectRevisionIdAndJsonSchemaNameManyToManyEdge!]!

  """A list of `Form` objects."""
  nodes: [Form]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Form` you could get from the connection."""
  totalCount: Int!
}

"""A `Form` edge in the connection, with data from `FormChange`."""
type ProjectRevisionFormsByFormChangeProjectRevisionIdAndJsonSchemaNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `FormChange`."""
  formChangesByJsonSchemaName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection!

  """The `Form` at the end of the edge."""
  node: Form
}

"""
Represents an update to a `ProjectRevision`. Fields that are set will be updated.
"""
input ProjectRevisionPatch {
  """Explanation of why the revision was made"""
  changeReason: String

  """Foreign key to the status of the project revision"""
  changeStatus: String

  """Comments on the project revision"""
  comments: String

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  Boolean value to indicate if the revision is the first revision for the project
  """
  isFirstRevision: Boolean

  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int

  """The status of the revision of a project"""
  revisionStatus: String

  """The type of the project revision (e.g. General Revision)"""
  revisionType: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `RevisionStatus` values, with data from `ProjectRevision`.
"""
type ProjectRevisionStatusesByProjectRevisionProjectIdAndRevisionStatusManyToManyConnection {
  """
  A list of edges which contains the `RevisionStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionStatusesByProjectRevisionProjectIdAndRevisionStatusManyToManyEdge!]!

  """A list of `RevisionStatus` objects."""
  nodes: [RevisionStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionStatus` edge in the connection, with data from `ProjectRevision`.
"""
type ProjectRevisionStatusesByProjectRevisionProjectIdAndRevisionStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionStatus` at the end of the edge."""
  node: RevisionStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A filter to be used against many `FormChange` object types. All fields are combined with a logical ‘and.’
"""
input ProjectRevisionToManyFormChangeFilter {
  """
  Every related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FormChangeFilter

  """
  No related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FormChangeFilter

  """
  Some related `FormChange` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FormChangeFilter
}

"""
A filter to be used against many `ProjectRevisionAmendmentType` object types. All fields are combined with a logical ‘and.’
"""
input ProjectRevisionToManyProjectRevisionAmendmentTypeFilter {
  """
  Every related `ProjectRevisionAmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionAmendmentTypeFilter

  """
  No related `ProjectRevisionAmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionAmendmentTypeFilter

  """
  Some related `ProjectRevisionAmendmentType` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionAmendmentTypeFilter
}

"""
A connection to a list of `RevisionType` values, with data from `ProjectRevision`.
"""
type ProjectRevisionTypesByProjectRevisionProjectIdAndRevisionTypeManyToManyConnection {
  """
  A list of edges which contains the `RevisionType`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [ProjectRevisionTypesByProjectRevisionProjectIdAndRevisionTypeManyToManyEdge!]!

  """A list of `RevisionType` objects."""
  nodes: [RevisionType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionType` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionType` edge in the connection, with data from `ProjectRevision`.
"""
type ProjectRevisionTypesByProjectRevisionProjectIdAndRevisionTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionType` at the end of the edge."""
  node: RevisionType

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""A connection to a list of `ProjectRevision` values."""
type ProjectRevisionsConnection {
  """
  A list of edges which contains the `ProjectRevision` and cursor to aid in pagination.
  """
  edges: [ProjectRevisionsEdge!]!

  """A list of `ProjectRevision` objects."""
  nodes: [ProjectRevision]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProjectRevision` edge in the connection."""
type ProjectRevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectRevision` at the end of the edge."""
  node: ProjectRevision
}

"""Methods to use when ordering `ProjectRevision`."""
enum ProjectRevisionsOrderBy {
  CHANGE_REASON_ASC
  CHANGE_REASON_DESC
  CHANGE_STATUS_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ACTIVE_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ACTIVE_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__ARCHIVED_BY_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__CREATED_BY_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__STATUS_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__STATUS_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__TRIGGERS_COMMIT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__TRIGGERS_COMMIT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_AT_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_AT_DESC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_BY_ASC
  CHANGE_STATUS_BY_CHANGE_STATUS__UPDATED_BY_DESC
  CHANGE_STATUS_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  EFFECTIVE_DATE_ASC
  EFFECTIVE_DATE_DESC
  FORM_CHANGES_BY_PROJECT_REVISION_ID__COUNT_ASC
  FORM_CHANGES_BY_PROJECT_REVISION_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  IS_FIRST_REVISION_ASC
  IS_FIRST_REVISION_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_ASC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__COMMENTS_ASC
  PROJECT_BY_PROJECT_ID__COMMENTS_DESC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_ASC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SCORE_ASC
  PROJECT_BY_PROJECT_ID__SCORE_DESC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_ASC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_PROJECT_REVISION_ID__COUNT_ASC
  PROJECT_REVISION_AMENDMENT_TYPES_BY_PROJECT_REVISION_ID__COUNT_DESC
  REVISION_STATUS_ASC
  REVISION_STATUS_BY_REVISION_STATUS__ARCHIVED_AT_ASC
  REVISION_STATUS_BY_REVISION_STATUS__ARCHIVED_AT_DESC
  REVISION_STATUS_BY_REVISION_STATUS__ARCHIVED_BY_ASC
  REVISION_STATUS_BY_REVISION_STATUS__ARCHIVED_BY_DESC
  REVISION_STATUS_BY_REVISION_STATUS__CREATED_AT_ASC
  REVISION_STATUS_BY_REVISION_STATUS__CREATED_AT_DESC
  REVISION_STATUS_BY_REVISION_STATUS__CREATED_BY_ASC
  REVISION_STATUS_BY_REVISION_STATUS__CREATED_BY_DESC
  REVISION_STATUS_BY_REVISION_STATUS__IS_AMENDMENT_SPECIFIC_ASC
  REVISION_STATUS_BY_REVISION_STATUS__IS_AMENDMENT_SPECIFIC_DESC
  REVISION_STATUS_BY_REVISION_STATUS__NAME_ASC
  REVISION_STATUS_BY_REVISION_STATUS__NAME_DESC
  REVISION_STATUS_BY_REVISION_STATUS__UPDATED_AT_ASC
  REVISION_STATUS_BY_REVISION_STATUS__UPDATED_AT_DESC
  REVISION_STATUS_BY_REVISION_STATUS__UPDATED_BY_ASC
  REVISION_STATUS_BY_REVISION_STATUS__UPDATED_BY_DESC
  REVISION_STATUS_DESC
  REVISION_TYPE_ASC
  REVISION_TYPE_BY_REVISION_TYPE__ARCHIVED_AT_ASC
  REVISION_TYPE_BY_REVISION_TYPE__ARCHIVED_AT_DESC
  REVISION_TYPE_BY_REVISION_TYPE__ARCHIVED_BY_ASC
  REVISION_TYPE_BY_REVISION_TYPE__ARCHIVED_BY_DESC
  REVISION_TYPE_BY_REVISION_TYPE__CREATED_AT_ASC
  REVISION_TYPE_BY_REVISION_TYPE__CREATED_AT_DESC
  REVISION_TYPE_BY_REVISION_TYPE__CREATED_BY_ASC
  REVISION_TYPE_BY_REVISION_TYPE__CREATED_BY_DESC
  REVISION_TYPE_BY_REVISION_TYPE__TYPE_ASC
  REVISION_TYPE_BY_REVISION_TYPE__TYPE_DESC
  REVISION_TYPE_BY_REVISION_TYPE__UPDATED_AT_ASC
  REVISION_TYPE_BY_REVISION_TYPE__UPDATED_AT_DESC
  REVISION_TYPE_BY_REVISION_TYPE__UPDATED_BY_ASC
  REVISION_TYPE_BY_REVISION_TYPE__UPDATED_BY_DESC
  REVISION_TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about possible project statuses"""
type ProjectStatus implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentProjectStatusIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByAttachmentProjectStatusIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentProjectStatusIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByAttachmentProjectStatusIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByAttachmentProjectStatusIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByAttachmentProjectStatusIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectProjectStatusIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByProjectProjectStatusIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectProjectStatusIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByProjectProjectStatusIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectProjectStatusIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusCifUsersByProjectProjectStatusIdAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Description of the project_status"""
  description: String

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusFundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpIdManyToManyConnection!

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusFundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Name of the project_status"""
  name: String!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectProjectStatusIdAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusOperatorsByProjectProjectStatusIdAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByProjectProjectStatusIdAndProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusProjectTypesByProjectProjectStatusIdAndProjectTypeManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByAttachmentProjectStatusIdAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusProjectsByAttachmentProjectStatusIdAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the project_status"""
  rowId: Int!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByProjectProjectStatusIdAndSectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusSectorsByProjectProjectStatusIdAndSectorNameManyToManyConnection!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type ProjectStatusCifUsersByAttachmentProjectStatusIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByAttachmentProjectStatusIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type ProjectStatusCifUsersByAttachmentProjectStatusIdAndArchivedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type ProjectStatusCifUsersByAttachmentProjectStatusIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByAttachmentProjectStatusIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type ProjectStatusCifUsersByAttachmentProjectStatusIdAndCreatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `Attachment`.
"""
type ProjectStatusCifUsersByAttachmentProjectStatusIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByAttachmentProjectStatusIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Attachment`."""
type ProjectStatusCifUsersByAttachmentProjectStatusIdAndUpdatedByManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusCifUsersByFundingStreamRfpProjectStatusProjectStatusIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByProjectProjectStatusIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByProjectProjectStatusIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusCifUsersByProjectProjectStatusIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type ProjectStatusCifUsersByProjectProjectStatusIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `ProjectStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectStatusCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input ProjectStatusFilter {
  """Checks for all expressions in this list."""
  and: [ProjectStatusFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `attachmentsByProjectStatusId` relation."""
  attachmentsByProjectStatusId: ProjectStatusToManyAttachmentFilter

  """Some related `attachmentsByProjectStatusId` exist."""
  attachmentsByProjectStatusIdExist: Boolean

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """
  Filter by the object’s `fundingStreamRfpProjectStatusesByProjectStatusId` relation.
  """
  fundingStreamRfpProjectStatusesByProjectStatusId: ProjectStatusToManyFundingStreamRfpProjectStatusFilter

  """Some related `fundingStreamRfpProjectStatusesByProjectStatusId` exist."""
  fundingStreamRfpProjectStatusesByProjectStatusIdExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ProjectStatusFilter

  """Checks for any expressions in this list."""
  or: [ProjectStatusFilter!]

  """Filter by the object’s `projectsByProjectStatusId` relation."""
  projectsByProjectStatusId: ProjectStatusToManyProjectFilter

  """Some related `projectsByProjectStatusId` exist."""
  projectsByProjectStatusIdExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusFundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `FundingStreamRfpProjectStatus`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusFundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `FundingStreamRfp` edge in the connection, with data from `FundingStreamRfpProjectStatus`.
"""
type ProjectStatusFundingStreamRfpsByFundingStreamRfpProjectStatusProjectStatusIdAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpProjectStatusesByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection!

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type ProjectStatusFundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusFundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type ProjectStatusFundingStreamRfpsByProjectProjectStatusIdAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""An input for mutations affecting `ProjectStatus`"""
input ProjectStatusInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the project_status"""
  description: String

  """Name of the project_status"""
  name: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type ProjectStatusOperatorsByProjectProjectStatusIdAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusOperatorsByProjectProjectStatusIdAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type ProjectStatusOperatorsByProjectProjectStatusIdAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `ProjectStatus`. Fields that are set will be updated.
"""
input ProjectStatusPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """Description of the project_status"""
  description: String

  """Name of the project_status"""
  name: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectType` values, with data from `Project`.
"""
type ProjectStatusProjectTypesByProjectProjectStatusIdAndProjectTypeManyToManyConnection {
  """
  A list of edges which contains the `ProjectType`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusProjectTypesByProjectProjectStatusIdAndProjectTypeManyToManyEdge!]!

  """A list of `ProjectType` objects."""
  nodes: [ProjectType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectType` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectType` edge in the connection, with data from `Project`."""
type ProjectStatusProjectTypesByProjectProjectStatusIdAndProjectTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectType` at the end of the edge."""
  node: ProjectType

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `Project` values, with data from `Attachment`.
"""
type ProjectStatusProjectsByAttachmentProjectStatusIdAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `Attachment`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusProjectsByAttachmentProjectStatusIdAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `Attachment`."""
type ProjectStatusProjectsByAttachmentProjectStatusIdAndProjectIdManyToManyEdge {
  """Reads and enables pagination through a set of `Attachment`."""
  attachmentsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""A connection to a list of `Sector` values, with data from `Project`."""
type ProjectStatusSectorsByProjectProjectStatusIdAndSectorNameManyToManyConnection {
  """
  A list of edges which contains the `Sector`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectStatusSectorsByProjectProjectStatusIdAndSectorNameManyToManyEdge!]!

  """A list of `Sector` objects."""
  nodes: [Sector]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sector` you could get from the connection."""
  totalCount: Int!
}

"""A `Sector` edge in the connection, with data from `Project`."""
type ProjectStatusSectorsByProjectProjectStatusIdAndSectorNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sector` at the end of the edge."""
  node: Sector

  """Reads and enables pagination through a set of `Project`."""
  projectsBySectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A filter to be used against many `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input ProjectStatusToManyAttachmentFilter {
  """
  Every related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttachmentFilter

  """
  No related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttachmentFilter

  """
  Some related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttachmentFilter
}

"""
A filter to be used against many `FundingStreamRfpProjectStatus` object types. All fields are combined with a logical ‘and.’
"""
input ProjectStatusToManyFundingStreamRfpProjectStatusFilter {
  """
  Every related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingStreamRfpProjectStatusFilter

  """
  No related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingStreamRfpProjectStatusFilter

  """
  Some related `FundingStreamRfpProjectStatus` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingStreamRfpProjectStatusFilter
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input ProjectStatusToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `ProjectStatus` values."""
type ProjectStatusesConnection {
  """
  A list of edges which contains the `ProjectStatus` and cursor to aid in pagination.
  """
  edges: [ProjectStatusesEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection."""
type ProjectStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus
}

"""Methods to use when ordering `ProjectStatus`."""
enum ProjectStatusesOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ATTACHMENTS_BY_PROJECT_STATUS_ID__COUNT_ASC
  ATTACHMENTS_BY_PROJECT_STATUS_ID__COUNT_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_PROJECT_STATUS_ID__COUNT_ASC
  FUNDING_STREAM_RFP_PROJECT_STATUSES_BY_PROJECT_STATUS_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_PROJECT_STATUS_ID__COUNT_ASC
  PROJECTS_BY_PROJECT_STATUS_ID__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""
A filter to be used against many `AdditionalFundingSource` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyAdditionalFundingSourceFilter {
  """
  Every related `AdditionalFundingSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AdditionalFundingSourceFilter

  """
  No related `AdditionalFundingSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AdditionalFundingSourceFilter

  """
  Some related `AdditionalFundingSource` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AdditionalFundingSourceFilter
}

"""
A filter to be used against many `Attachment` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyAttachmentFilter {
  """
  Every related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AttachmentFilter

  """
  No related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AttachmentFilter

  """
  Some related `Attachment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AttachmentFilter
}

"""
A filter to be used against many `FundingParameter` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyFundingParameterFilter {
  """
  Every related `FundingParameter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FundingParameterFilter

  """
  No related `FundingParameter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FundingParameterFilter

  """
  Some related `FundingParameter` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FundingParameterFilter
}

"""
A filter to be used against many `ProjectContact` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyProjectContactFilter {
  """
  Every related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectContactFilter

  """
  No related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectContactFilter

  """
  Some related `ProjectContact` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectContactFilter
}

"""
A filter to be used against many `ProjectManager` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyProjectManagerFilter {
  """
  Every related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectManagerFilter

  """
  No related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectManagerFilter

  """
  Some related `ProjectManager` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectManagerFilter
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""
A filter to be used against many `ReportingRequirement` object types. All fields are combined with a logical ‘and.’
"""
input ProjectToManyReportingRequirementFilter {
  """
  Every related `ReportingRequirement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportingRequirementFilter

  """
  No related `ReportingRequirement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportingRequirementFilter

  """
  Some related `ReportingRequirement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportingRequirementFilter
}

"""Table containing information about project types"""
type ProjectType implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectProjectTypeAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypeCifUsersByProjectProjectTypeAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectProjectTypeAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypeCifUsersByProjectProjectTypeAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectProjectTypeAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypeCifUsersByProjectProjectTypeAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectProjectTypeAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypeFundingStreamRfpsByProjectProjectTypeAndFundingStreamRfpIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """The name of the project_type"""
  name: String!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectProjectTypeAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypeOperatorsByProjectProjectTypeAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectProjectTypeAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypeProjectStatusesByProjectProjectTypeAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """Unique ID for the project_type"""
  rowId: Int!

  """Reads and enables pagination through a set of `Sector`."""
  sectorsByProjectProjectTypeAndSectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypeSectorsByProjectProjectTypeAndSectorNameManyToManyConnection!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type ProjectTypeCifUsersByProjectProjectTypeAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectTypeCifUsersByProjectProjectTypeAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type ProjectTypeCifUsersByProjectProjectTypeAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type ProjectTypeCifUsersByProjectProjectTypeAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectTypeCifUsersByProjectProjectTypeAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type ProjectTypeCifUsersByProjectProjectTypeAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type ProjectTypeCifUsersByProjectProjectTypeAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectTypeCifUsersByProjectProjectTypeAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type ProjectTypeCifUsersByProjectProjectTypeAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `ProjectType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProjectTypeCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ProjectType` object types. All fields are combined with a logical ‘and.’
"""
input ProjectTypeFilter {
  """Checks for all expressions in this list."""
  and: [ProjectTypeFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ProjectTypeFilter

  """Checks for any expressions in this list."""
  or: [ProjectTypeFilter!]

  """Filter by the object’s `projectsByProjectType` relation."""
  projectsByProjectType: ProjectTypeToManyProjectFilter

  """Some related `projectsByProjectType` exist."""
  projectsByProjectTypeExist: Boolean

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type ProjectTypeFundingStreamRfpsByProjectProjectTypeAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectTypeFundingStreamRfpsByProjectProjectTypeAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type ProjectTypeFundingStreamRfpsByProjectProjectTypeAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""An input for mutations affecting `ProjectType`"""
input ProjectTypeInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the project_type"""
  name: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type ProjectTypeOperatorsByProjectProjectTypeAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectTypeOperatorsByProjectProjectTypeAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type ProjectTypeOperatorsByProjectProjectTypeAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `ProjectType`. Fields that are set will be updated.
"""
input ProjectTypePatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the project_type"""
  name: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type ProjectTypeProjectStatusesByProjectProjectTypeAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectTypeProjectStatusesByProjectProjectTypeAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type ProjectTypeProjectStatusesByProjectProjectTypeAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `Sector` values, with data from `Project`."""
type ProjectTypeSectorsByProjectProjectTypeAndSectorNameManyToManyConnection {
  """
  A list of edges which contains the `Sector`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [ProjectTypeSectorsByProjectProjectTypeAndSectorNameManyToManyEdge!]!

  """A list of `Sector` objects."""
  nodes: [Sector]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sector` you could get from the connection."""
  totalCount: Int!
}

"""A `Sector` edge in the connection, with data from `Project`."""
type ProjectTypeSectorsByProjectProjectTypeAndSectorNameManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sector` at the end of the edge."""
  node: Sector

  """Reads and enables pagination through a set of `Project`."""
  projectsBySectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input ProjectTypeToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `ProjectType` values."""
type ProjectTypesConnection {
  """
  A list of edges which contains the `ProjectType` and cursor to aid in pagination.
  """
  edges: [ProjectTypesEdge!]!

  """A list of `ProjectType` objects."""
  nodes: [ProjectType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectType` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectType` edge in the connection."""
type ProjectTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectType` at the end of the edge."""
  node: ProjectType
}

"""Methods to use when ordering `ProjectType`."""
enum ProjectTypesOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_PROJECT_TYPE__COUNT_ASC
  PROJECTS_BY_PROJECT_TYPE__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""A connection to a list of `Project` values."""
type ProjectsConnection {
  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection."""
type ProjectsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project
}

"""Methods to use when ordering `Project`."""
enum ProjectsOrderBy {
  ADDITIONAL_FUNDING_SOURCES_BY_PROJECT_ID__COUNT_ASC
  ADDITIONAL_FUNDING_SOURCES_BY_PROJECT_ID__COUNT_DESC
  ADDITIONAL_SECTOR_INFORMATION_ASC
  ADDITIONAL_SECTOR_INFORMATION_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ATTACHMENTS_BY_PROJECT_ID__COUNT_ASC
  ATTACHMENTS_BY_PROJECT_ID__COUNT_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  CONTRACT_NUMBER_ASC
  CONTRACT_NUMBER_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  FUNDING_PARAMETERS_BY_PROJECT_ID__COUNT_ASC
  FUNDING_PARAMETERS_BY_PROJECT_ID__COUNT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ARCHIVED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__CREATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__FUNDING_STREAM_ID_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__FUNDING_STREAM_ID_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ID_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__ID_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_AT_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_AT_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_BY_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__UPDATED_BY_DESC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__YEAR_ASC
  FUNDING_STREAM_RFP_BY_FUNDING_STREAM_RFP_ID__YEAR_DESC
  FUNDING_STREAM_RFP_ID_ASC
  FUNDING_STREAM_RFP_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  OPERATOR_BY_OPERATOR_ID__ARCHIVED_AT_ASC
  OPERATOR_BY_OPERATOR_ID__ARCHIVED_AT_DESC
  OPERATOR_BY_OPERATOR_ID__ARCHIVED_BY_ASC
  OPERATOR_BY_OPERATOR_ID__ARCHIVED_BY_DESC
  OPERATOR_BY_OPERATOR_ID__BC_REGISTRY_ID_ASC
  OPERATOR_BY_OPERATOR_ID__BC_REGISTRY_ID_DESC
  OPERATOR_BY_OPERATOR_ID__CREATED_AT_ASC
  OPERATOR_BY_OPERATOR_ID__CREATED_AT_DESC
  OPERATOR_BY_OPERATOR_ID__CREATED_BY_ASC
  OPERATOR_BY_OPERATOR_ID__CREATED_BY_DESC
  OPERATOR_BY_OPERATOR_ID__ID_ASC
  OPERATOR_BY_OPERATOR_ID__ID_DESC
  OPERATOR_BY_OPERATOR_ID__LEGAL_NAME_ASC
  OPERATOR_BY_OPERATOR_ID__LEGAL_NAME_DESC
  OPERATOR_BY_OPERATOR_ID__OPERATOR_CODE_ASC
  OPERATOR_BY_OPERATOR_ID__OPERATOR_CODE_DESC
  OPERATOR_BY_OPERATOR_ID__SWRS_LEGAL_NAME_ASC
  OPERATOR_BY_OPERATOR_ID__SWRS_LEGAL_NAME_DESC
  OPERATOR_BY_OPERATOR_ID__SWRS_ORGANISATION_ID_ASC
  OPERATOR_BY_OPERATOR_ID__SWRS_ORGANISATION_ID_DESC
  OPERATOR_BY_OPERATOR_ID__SWRS_TRADE_NAME_ASC
  OPERATOR_BY_OPERATOR_ID__SWRS_TRADE_NAME_DESC
  OPERATOR_BY_OPERATOR_ID__TRADE_NAME_ASC
  OPERATOR_BY_OPERATOR_ID__TRADE_NAME_DESC
  OPERATOR_BY_OPERATOR_ID__UPDATED_AT_ASC
  OPERATOR_BY_OPERATOR_ID__UPDATED_AT_DESC
  OPERATOR_BY_OPERATOR_ID__UPDATED_BY_ASC
  OPERATOR_BY_OPERATOR_ID__UPDATED_BY_DESC
  OPERATOR_ID_ASC
  OPERATOR_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_CONTACTS_BY_PROJECT_ID__COUNT_ASC
  PROJECT_CONTACTS_BY_PROJECT_ID__COUNT_DESC
  PROJECT_MANAGERS_BY_PROJECT_ID__COUNT_ASC
  PROJECT_MANAGERS_BY_PROJECT_ID__COUNT_DESC
  PROJECT_NAME_ASC
  PROJECT_NAME_DESC
  PROJECT_REVISIONS_BY_PROJECT_ID__COUNT_ASC
  PROJECT_REVISIONS_BY_PROJECT_ID__COUNT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ARCHIVED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__CREATED_BY_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__DESCRIPTION_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__ID_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__NAME_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_AT_DESC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_ASC
  PROJECT_STATUS_BY_PROJECT_STATUS_ID__UPDATED_BY_DESC
  PROJECT_STATUS_ID_ASC
  PROJECT_STATUS_ID_DESC
  PROJECT_TYPE_ASC
  PROJECT_TYPE_BY_PROJECT_TYPE__ARCHIVED_AT_ASC
  PROJECT_TYPE_BY_PROJECT_TYPE__ARCHIVED_AT_DESC
  PROJECT_TYPE_BY_PROJECT_TYPE__ARCHIVED_BY_ASC
  PROJECT_TYPE_BY_PROJECT_TYPE__ARCHIVED_BY_DESC
  PROJECT_TYPE_BY_PROJECT_TYPE__CREATED_AT_ASC
  PROJECT_TYPE_BY_PROJECT_TYPE__CREATED_AT_DESC
  PROJECT_TYPE_BY_PROJECT_TYPE__CREATED_BY_ASC
  PROJECT_TYPE_BY_PROJECT_TYPE__CREATED_BY_DESC
  PROJECT_TYPE_BY_PROJECT_TYPE__ID_ASC
  PROJECT_TYPE_BY_PROJECT_TYPE__ID_DESC
  PROJECT_TYPE_BY_PROJECT_TYPE__NAME_ASC
  PROJECT_TYPE_BY_PROJECT_TYPE__NAME_DESC
  PROJECT_TYPE_BY_PROJECT_TYPE__UPDATED_AT_ASC
  PROJECT_TYPE_BY_PROJECT_TYPE__UPDATED_AT_DESC
  PROJECT_TYPE_BY_PROJECT_TYPE__UPDATED_BY_ASC
  PROJECT_TYPE_BY_PROJECT_TYPE__UPDATED_BY_DESC
  PROJECT_TYPE_DESC
  PROPOSAL_REFERENCE_ASC
  PROPOSAL_REFERENCE_DESC
  REPORTING_REQUIREMENTS_BY_PROJECT_ID__COUNT_ASC
  REPORTING_REQUIREMENTS_BY_PROJECT_ID__COUNT_DESC
  SCORE_ASC
  SCORE_DESC
  SECTOR_BY_SECTOR_NAME__ARCHIVED_AT_ASC
  SECTOR_BY_SECTOR_NAME__ARCHIVED_AT_DESC
  SECTOR_BY_SECTOR_NAME__ARCHIVED_BY_ASC
  SECTOR_BY_SECTOR_NAME__ARCHIVED_BY_DESC
  SECTOR_BY_SECTOR_NAME__CREATED_AT_ASC
  SECTOR_BY_SECTOR_NAME__CREATED_AT_DESC
  SECTOR_BY_SECTOR_NAME__CREATED_BY_ASC
  SECTOR_BY_SECTOR_NAME__CREATED_BY_DESC
  SECTOR_BY_SECTOR_NAME__SECTOR_NAME_ASC
  SECTOR_BY_SECTOR_NAME__SECTOR_NAME_DESC
  SECTOR_BY_SECTOR_NAME__UPDATED_AT_ASC
  SECTOR_BY_SECTOR_NAME__UPDATED_AT_DESC
  SECTOR_BY_SECTOR_NAME__UPDATED_BY_ASC
  SECTOR_BY_SECTOR_NAME__UPDATED_BY_DESC
  SECTOR_NAME_ASC
  SECTOR_NAME_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  TOTAL_FUNDING_REQUEST_ASC
  TOTAL_FUNDING_REQUEST_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Reads a single `AdditionalFundingSource` using its globally unique `ID`.
  """
  additionalFundingSource(
    """
    The globally unique `ID` to be used in selecting a single `AdditionalFundingSource`.
    """
    id: ID!
  ): AdditionalFundingSource
  additionalFundingSourceByRowId(rowId: Int!): AdditionalFundingSource

  """
  Reads a single `AdditionalFundingSourceStatus` using its globally unique `ID`.
  """
  additionalFundingSourceStatus(
    """
    The globally unique `ID` to be used in selecting a single `AdditionalFundingSourceStatus`.
    """
    id: ID!
  ): AdditionalFundingSourceStatus
  additionalFundingSourceStatusByStatusName(statusName: String!): AdditionalFundingSourceStatus

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  allAdditionalFundingSourceStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesConnection

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  allAdditionalFundingSources(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AdditionalFundingSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesConnection

  """Reads and enables pagination through a set of `AmendmentType`."""
  allAmendmentTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesConnection

  """Reads and enables pagination through a set of `Attachment`."""
  allAttachments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AttachmentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsConnection

  """Reads and enables pagination through a set of `ChangeStatus`."""
  allChangeStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesConnection

  """Reads and enables pagination through a set of `CifUser`."""
  allCifUsers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersConnection

  """Reads and enables pagination through a set of `Contact`."""
  allContacts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contact`."""
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsConnection

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  allEmissionIntensityPaymentPercents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityPaymentPercentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsConnection

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  allEmissionIntensityReports(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection

  """Reads and enables pagination through a set of `FormChange`."""
  allFormChanges(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormChangeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesConnection

  """Reads and enables pagination through a set of `Form`."""
  allForms(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FormFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsConnection

  """Reads and enables pagination through a set of `FundingParameter`."""
  allFundingParameters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingParameterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersConnection

  """
  Reads and enables pagination through a set of `FundingStreamRfpProjectStatus`.
  """
  allFundingStreamRfpProjectStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesConnection

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  allFundingStreamRfps(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsConnection

  """Reads and enables pagination through a set of `FundingStream`."""
  allFundingStreams(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsConnection

  """Reads and enables pagination through a set of `MilestoneReport`."""
  allMilestoneReports(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection

  """Reads and enables pagination through a set of `Operator`."""
  allOperators(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsConnection

  """Reads and enables pagination through a set of `Payment`."""
  allPayments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection

  """Reads and enables pagination through a set of `ProjectContact`."""
  allProjectContacts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectContactFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsConnection

  """Reads and enables pagination through a set of `ProjectManagerLabel`."""
  allProjectManagerLabels(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerLabelFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsConnection

  """Reads and enables pagination through a set of `ProjectManager`."""
  allProjectManagers(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectManagerFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersConnection

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  allProjectRevisionAmendmentTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionAmendmentTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesConnection

  """Reads and enables pagination through a set of `ProjectRevision`."""
  allProjectRevisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection

  """Reads and enables pagination through a set of `ProjectStatus`."""
  allProjectStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesConnection

  """Reads and enables pagination through a set of `ProjectType`."""
  allProjectTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesConnection

  """Reads and enables pagination through a set of `Project`."""
  allProjects(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection

  """Reads and enables pagination through a set of `ReportType`."""
  allReportTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesConnection

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  allReportingRequirements(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection

  """Reads and enables pagination through a set of `RevisionStatus`."""
  allRevisionStatuses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesConnection

  """Reads and enables pagination through a set of `RevisionType`."""
  allRevisionTypes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesConnection

  """Reads and enables pagination through a set of `Sector`."""
  allSectors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SectorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsConnection

  """Reads a single `AmendmentType` using its globally unique `ID`."""
  amendmentType(
    """
    The globally unique `ID` to be used in selecting a single `AmendmentType`.
    """
    id: ID!
  ): AmendmentType
  amendmentTypeByName(name: String!): AmendmentType

  """Reads a single `Attachment` using its globally unique `ID`."""
  attachment(
    """
    The globally unique `ID` to be used in selecting a single `Attachment`.
    """
    id: ID!
  ): Attachment
  attachmentByRowId(rowId: Int!): Attachment

  """Reads a single `ChangeStatus` using its globally unique `ID`."""
  changeStatus(
    """
    The globally unique `ID` to be used in selecting a single `ChangeStatus`.
    """
    id: ID!
  ): ChangeStatus
  changeStatusByStatus(status: String!): ChangeStatus

  """Reads a single `CifUser` using its globally unique `ID`."""
  cifUser(
    """The globally unique `ID` to be used in selecting a single `CifUser`."""
    id: ID!
  ): CifUser
  cifUserByRowId(rowId: Int!): CifUser

  """Reads a single `Contact` using its globally unique `ID`."""
  contact(
    """The globally unique `ID` to be used in selecting a single `Contact`."""
    id: ID!
  ): Contact
  contactByEmail(email: String!): Contact
  contactByRowId(rowId: Int!): Contact

  """
  Reads a single `EmissionIntensityPaymentPercent` using its globally unique `ID`.
  """
  emissionIntensityPaymentPercent(
    """
    The globally unique `ID` to be used in selecting a single `EmissionIntensityPaymentPercent`.
    """
    id: ID!
  ): EmissionIntensityPaymentPercent
  emissionIntensityPaymentPercentByMaxEmissionIntensityPerformance(maxEmissionIntensityPerformance: BigFloat!): EmissionIntensityPaymentPercent
  emissionIntensityPaymentPercentByRowId(rowId: Int!): EmissionIntensityPaymentPercent

  """
  Reads a single `EmissionIntensityReport` using its globally unique `ID`.
  """
  emissionIntensityReport(
    """
    The globally unique `ID` to be used in selecting a single `EmissionIntensityReport`.
    """
    id: ID!
  ): EmissionIntensityReport
  emissionIntensityReportByRowId(rowId: Int!): EmissionIntensityReport

  """Reads a single `Form` using its globally unique `ID`."""
  form(
    """The globally unique `ID` to be used in selecting a single `Form`."""
    id: ID!
  ): Form
  formByRowId(rowId: Int!): Form
  formBySlug(slug: String!): Form

  """Reads a single `FormChange` using its globally unique `ID`."""
  formChange(
    """
    The globally unique `ID` to be used in selecting a single `FormChange`.
    """
    id: ID!
  ): FormChange
  formChangeByRowId(rowId: Int!): FormChange

  """Reads a single `FundingParameter` using its globally unique `ID`."""
  fundingParameter(
    """
    The globally unique `ID` to be used in selecting a single `FundingParameter`.
    """
    id: ID!
  ): FundingParameter
  fundingParameterByRowId(rowId: Int!): FundingParameter

  """Reads a single `FundingStream` using its globally unique `ID`."""
  fundingStream(
    """
    The globally unique `ID` to be used in selecting a single `FundingStream`.
    """
    id: ID!
  ): FundingStream
  fundingStreamByRowId(rowId: Int!): FundingStream

  """Reads a single `FundingStreamRfp` using its globally unique `ID`."""
  fundingStreamRfp(
    """
    The globally unique `ID` to be used in selecting a single `FundingStreamRfp`.
    """
    id: ID!
  ): FundingStreamRfp
  fundingStreamRfpByRowId(rowId: Int!): FundingStreamRfp

  """
  Reads a single `FundingStreamRfpProjectStatus` using its globally unique `ID`.
  """
  fundingStreamRfpProjectStatus(
    """
    The globally unique `ID` to be used in selecting a single `FundingStreamRfpProjectStatus`.
    """
    id: ID!
  ): FundingStreamRfpProjectStatus
  fundingStreamRfpProjectStatusByRowId(rowId: Int!): FundingStreamRfpProjectStatus

  """
  A utility function to return a set of statuses for form_change records relating to a single revision
  """
  getFormStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StringFilter

    """Only read the first `n` values of the set."""
    first: Int
    formDataTableName: String!
    jsonMatcher: JSON

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int
    projectRevisionId: Int!
  ): GetFormStatusConnection

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Reads a single `MilestoneReport` using its globally unique `ID`."""
  milestoneReport(
    """
    The globally unique `ID` to be used in selecting a single `MilestoneReport`.
    """
    id: ID!
  ): MilestoneReport
  milestoneReportByRowId(rowId: Int!): MilestoneReport

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads a single `Operator` using its globally unique `ID`."""
  operator(
    """The globally unique `ID` to be used in selecting a single `Operator`."""
    id: ID!
  ): Operator
  operatorByRowId(rowId: Int!): Operator
  operatorBySwrsOrganisationId(swrsOrganisationId: Int!): Operator

  """Reads a single `Payment` using its globally unique `ID`."""
  payment(
    """The globally unique `ID` to be used in selecting a single `Payment`."""
    id: ID!
  ): Payment
  paymentByRowId(rowId: Int!): Payment

  """
  returns a form_change for a table in the pending state for the current user, i.e. allows to resume the creation of any table row
  """
  pendingNewFormChangeForTable(tableName: String!): FormChange

  """
  returns a project_revision for a new project in the pending state for the current user, i.e. allows to resume a project creation
  """
  pendingNewProjectRevision: ProjectRevision

  """Reads a single `Project` using its globally unique `ID`."""
  project(
    """The globally unique `ID` to be used in selecting a single `Project`."""
    id: ID!
  ): Project
  projectByProposalReference(proposalReference: String!): Project
  projectByRowId(rowId: Int!): Project

  """Reads a single `ProjectContact` using its globally unique `ID`."""
  projectContact(
    """
    The globally unique `ID` to be used in selecting a single `ProjectContact`.
    """
    id: ID!
  ): ProjectContact
  projectContactByRowId(rowId: Int!): ProjectContact

  """Reads a single `ProjectManager` using its globally unique `ID`."""
  projectManager(
    """
    The globally unique `ID` to be used in selecting a single `ProjectManager`.
    """
    id: ID!
  ): ProjectManager
  projectManagerByRowId(rowId: Int!): ProjectManager

  """Reads a single `ProjectManagerLabel` using its globally unique `ID`."""
  projectManagerLabel(
    """
    The globally unique `ID` to be used in selecting a single `ProjectManagerLabel`.
    """
    id: ID!
  ): ProjectManagerLabel
  projectManagerLabelByLabel(label: String!): ProjectManagerLabel
  projectManagerLabelByRowId(rowId: Int!): ProjectManagerLabel

  """Reads a single `ProjectRevision` using its globally unique `ID`."""
  projectRevision(
    """
    The globally unique `ID` to be used in selecting a single `ProjectRevision`.
    """
    id: ID!
  ): ProjectRevision

  """
  Reads a single `ProjectRevisionAmendmentType` using its globally unique `ID`.
  """
  projectRevisionAmendmentType(
    """
    The globally unique `ID` to be used in selecting a single `ProjectRevisionAmendmentType`.
    """
    id: ID!
  ): ProjectRevisionAmendmentType
  projectRevisionAmendmentTypeByRowId(rowId: Int!): ProjectRevisionAmendmentType
  projectRevisionByRowId(rowId: Int!): ProjectRevision

  """Reads a single `ProjectStatus` using its globally unique `ID`."""
  projectStatus(
    """
    The globally unique `ID` to be used in selecting a single `ProjectStatus`.
    """
    id: ID!
  ): ProjectStatus
  projectStatusByRowId(rowId: Int!): ProjectStatus

  """Reads a single `ProjectType` using its globally unique `ID`."""
  projectType(
    """
    The globally unique `ID` to be used in selecting a single `ProjectType`.
    """
    id: ID!
  ): ProjectType
  projectTypeByName(name: String!): ProjectType
  projectTypeByRowId(rowId: Int!): ProjectType

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """Reads a single `ReportType` using its globally unique `ID`."""
  reportType(
    """
    The globally unique `ID` to be used in selecting a single `ReportType`.
    """
    id: ID!
  ): ReportType
  reportTypeByName(name: String!): ReportType

  """Reads a single `ReportingRequirement` using its globally unique `ID`."""
  reportingRequirement(
    """
    The globally unique `ID` to be used in selecting a single `ReportingRequirement`.
    """
    id: ID!
  ): ReportingRequirement
  reportingRequirementByRowId(rowId: Int!): ReportingRequirement

  """Reads a single `RevisionStatus` using its globally unique `ID`."""
  revisionStatus(
    """
    The globally unique `ID` to be used in selecting a single `RevisionStatus`.
    """
    id: ID!
  ): RevisionStatus
  revisionStatusByName(name: String!): RevisionStatus

  """Reads a single `RevisionType` using its globally unique `ID`."""
  revisionType(
    """
    The globally unique `ID` to be used in selecting a single `RevisionType`.
    """
    id: ID!
  ): RevisionType
  revisionTypeByType(type: String!): RevisionType

  """Reads a single `Sector` using its globally unique `ID`."""
  sector(
    """The globally unique `ID` to be used in selecting a single `Sector`."""
    id: ID!
  ): Sector
  sectorBySectorName(sectorName: String!): Sector
  session: KeycloakJwt
}

"""A builtin object identifier type for a function with argument types"""
scalar RegProcedure

"""Table containing information about report types"""
type ReportType implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `ReportType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ReportType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ReportType`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementReportTypeAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypeCifUsersByReportingRequirementReportTypeAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementReportTypeAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypeCifUsersByReportingRequirementReportTypeAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByReportingRequirementReportTypeAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypeCifUsersByReportingRequirementReportTypeAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  Boolean value indicates if this report type has payments associated with it.
  """
  hasExpenses: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Boolean value indicates if this report type record is a Milestone. There are several different milestones and this value allows for easier filtering.
  """
  isMilestone: Boolean

  """The name of the report type as the primary key"""
  name: String!

  """Reads and enables pagination through a set of `Project`."""
  projectsByReportingRequirementReportTypeAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypeProjectsByReportingRequirementReportTypeAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByReportType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type ReportTypeCifUsersByReportingRequirementReportTypeAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [ReportTypeCifUsersByReportingRequirementReportTypeAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type ReportTypeCifUsersByReportingRequirementReportTypeAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type ReportTypeCifUsersByReportingRequirementReportTypeAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [ReportTypeCifUsersByReportingRequirementReportTypeAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type ReportTypeCifUsersByReportingRequirementReportTypeAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ReportingRequirement`.
"""
type ReportTypeCifUsersByReportingRequirementReportTypeAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [ReportTypeCifUsersByReportingRequirementReportTypeAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `ReportingRequirement`.
"""
type ReportTypeCifUsersByReportingRequirementReportTypeAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A condition to be used against `ReportType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ReportTypeCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `hasExpenses` field."""
  hasExpenses: Boolean

  """Checks for equality with the object’s `isMilestone` field."""
  isMilestone: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ReportType` object types. All fields are combined with a logical ‘and.’
"""
input ReportTypeFilter {
  """Checks for all expressions in this list."""
  and: [ReportTypeFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `hasExpenses` field."""
  hasExpenses: BooleanFilter

  """Filter by the object’s `isMilestone` field."""
  isMilestone: BooleanFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ReportTypeFilter

  """Checks for any expressions in this list."""
  or: [ReportTypeFilter!]

  """Filter by the object’s `reportingRequirementsByReportType` relation."""
  reportingRequirementsByReportType: ReportTypeToManyReportingRequirementFilter

  """Some related `reportingRequirementsByReportType` exist."""
  reportingRequirementsByReportTypeExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `ReportType`"""
input ReportTypeInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  Boolean value indicates if this report type has payments associated with it.
  """
  hasExpenses: Boolean

  """
  Boolean value indicates if this report type record is a Milestone. There are several different milestones and this value allows for easier filtering.
  """
  isMilestone: Boolean

  """The name of the report type as the primary key"""
  name: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `ReportType`. Fields that are set will be updated.
"""
input ReportTypePatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  Boolean value indicates if this report type has payments associated with it.
  """
  hasExpenses: Boolean

  """
  Boolean value indicates if this report type record is a Milestone. There are several different milestones and this value allows for easier filtering.
  """
  isMilestone: Boolean

  """The name of the report type as the primary key"""
  name: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `Project` values, with data from `ReportingRequirement`.
"""
type ReportTypeProjectsByReportingRequirementReportTypeAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ReportingRequirement`, and the cursor to aid in pagination.
  """
  edges: [ReportTypeProjectsByReportingRequirementReportTypeAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""
A `Project` edge in the connection, with data from `ReportingRequirement`.
"""
type ReportTypeProjectsByReportingRequirementReportTypeAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ReportingRequirement`."""
  reportingRequirementsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ReportingRequirementFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ReportingRequirement`."""
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsConnection!
}

"""
A filter to be used against many `ReportingRequirement` object types. All fields are combined with a logical ‘and.’
"""
input ReportTypeToManyReportingRequirementFilter {
  """
  Every related `ReportingRequirement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ReportingRequirementFilter

  """
  No related `ReportingRequirement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ReportingRequirementFilter

  """
  Some related `ReportingRequirement` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ReportingRequirementFilter
}

"""A connection to a list of `ReportType` values."""
type ReportTypesConnection {
  """
  A list of edges which contains the `ReportType` and cursor to aid in pagination.
  """
  edges: [ReportTypesEdge!]!

  """A list of `ReportType` objects."""
  nodes: [ReportType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ReportType` you could get from the connection."""
  totalCount: Int!
}

"""A `ReportType` edge in the connection."""
type ReportTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportType` at the end of the edge."""
  node: ReportType
}

"""Methods to use when ordering `ReportType`."""
enum ReportTypesOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  HAS_EXPENSES_ASC
  HAS_EXPENSES_DESC
  IS_MILESTONE_ASC
  IS_MILESTONE_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REPORTING_REQUIREMENTS_BY_REPORT_TYPE__COUNT_ASC
  REPORTING_REQUIREMENTS_BY_REPORT_TYPE__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about reporting requirements"""
type ReportingRequirement implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityReportReportingRequirementIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityReportReportingRequirementIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByEmissionIntensityReportReportingRequirementIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByMilestoneReportReportingRequirementIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByMilestoneReportReportingRequirementIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByMilestoneReportReportingRequirementIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndUpdatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByPaymentReportingRequirementIdAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementCifUsersByPaymentReportingRequirementIdAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByPaymentReportingRequirementIdAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementCifUsersByPaymentReportingRequirementIdAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByPaymentReportingRequirementIdAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementCifUsersByPaymentReportingRequirementIdAndUpdatedByManyToManyConnection!

  """Comments about the reporting requirement"""
  comments: String

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """A user defined description of a reporting requirement"""
  description: String

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """
  Returns the value of the has_expenses column for the report_type of the given reporting_requirement
  """
  hasExpenses: Boolean

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByReportingRequirementId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!

  """
  Reads a single `Project` that is related to this `ReportingRequirement`.
  """
  projectByProjectId: Project

  """Foreign key references the cif.project table"""
  projectId: Int!

  """The date the reporting requirement is due"""
  reportDueDate: Datetime

  """Foreign key references the cif.report_type table"""
  reportType: String!

  """
  Reads a single `ReportType` that is related to this `ReportingRequirement`.
  """
  reportTypeByReportType: ReportType

  """An index that identifies the order of the reporting requirement"""
  reportingRequirementIndex: Int!

  """Unique ID for the reporting requirement"""
  rowId: Int!

  """The date the reporting requirement was submitted"""
  submittedDate: Datetime

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityReport`.
"""
type ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityReport`.
"""
type ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityReport`.
"""
type ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityReport`.
"""
type ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `EmissionIntensityReport`.
"""
type ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `EmissionIntensityReport`, and the cursor to aid in pagination.
  """
  edges: [ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""
A `CifUser` edge in the connection, with data from `EmissionIntensityReport`.
"""
type ReportingRequirementCifUsersByEmissionIntensityReportReportingRequirementIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EmissionIntensityReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `MilestoneReport`.
"""
type ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `MilestoneReport`."""
type ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `MilestoneReport`.
"""
type ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `MilestoneReport`."""
type ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""
A connection to a list of `CifUser` values, with data from `MilestoneReport`.
"""
type ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `MilestoneReport`, and the cursor to aid in pagination.
  """
  edges: [ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `MilestoneReport`."""
type ReportingRequirementCifUsersByMilestoneReportReportingRequirementIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MilestoneReport`."""
  milestoneReportsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MilestoneReportFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsConnection!

  """The `CifUser` at the end of the edge."""
  node: CifUser
}

"""A connection to a list of `CifUser` values, with data from `Payment`."""
type ReportingRequirementCifUsersByPaymentReportingRequirementIdAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [ReportingRequirementCifUsersByPaymentReportingRequirementIdAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Payment`."""
type ReportingRequirementCifUsersByPaymentReportingRequirementIdAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Payment`."""
type ReportingRequirementCifUsersByPaymentReportingRequirementIdAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [ReportingRequirementCifUsersByPaymentReportingRequirementIdAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Payment`."""
type ReportingRequirementCifUsersByPaymentReportingRequirementIdAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Payment`."""
type ReportingRequirementCifUsersByPaymentReportingRequirementIdAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Payment`, and the cursor to aid in pagination.
  """
  edges: [ReportingRequirementCifUsersByPaymentReportingRequirementIdAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Payment`."""
type ReportingRequirementCifUsersByPaymentReportingRequirementIdAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Payment`."""
  paymentsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PaymentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Payment`."""
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsConnection!
}

"""
A condition to be used against `ReportingRequirement` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ReportingRequirementCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `projectId` field."""
  projectId: Int

  """Checks for equality with the object’s `reportDueDate` field."""
  reportDueDate: Datetime

  """Checks for equality with the object’s `reportType` field."""
  reportType: String

  """
  Checks for equality with the object’s `reportingRequirementIndex` field.
  """
  reportingRequirementIndex: Int

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int

  """Checks for equality with the object’s `submittedDate` field."""
  submittedDate: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `ReportingRequirement` object types. All fields are combined with a logical ‘and.’
"""
input ReportingRequirementFilter {
  """Checks for all expressions in this list."""
  and: [ReportingRequirementFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `comments` field."""
  comments: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """
  Filter by the object’s `emissionIntensityReportsByReportingRequirementId` relation.
  """
  emissionIntensityReportsByReportingRequirementId: ReportingRequirementToManyEmissionIntensityReportFilter

  """Some related `emissionIntensityReportsByReportingRequirementId` exist."""
  emissionIntensityReportsByReportingRequirementIdExist: Boolean

  """Filter by the object’s `hasExpenses` field."""
  hasExpenses: BooleanFilter

  """
  Filter by the object’s `milestoneReportsByReportingRequirementId` relation.
  """
  milestoneReportsByReportingRequirementId: ReportingRequirementToManyMilestoneReportFilter

  """Some related `milestoneReportsByReportingRequirementId` exist."""
  milestoneReportsByReportingRequirementIdExist: Boolean

  """Negates the expression."""
  not: ReportingRequirementFilter

  """Checks for any expressions in this list."""
  or: [ReportingRequirementFilter!]

  """Filter by the object’s `paymentsByReportingRequirementId` relation."""
  paymentsByReportingRequirementId: ReportingRequirementToManyPaymentFilter

  """Some related `paymentsByReportingRequirementId` exist."""
  paymentsByReportingRequirementIdExist: Boolean

  """Filter by the object’s `projectByProjectId` relation."""
  projectByProjectId: ProjectFilter

  """Filter by the object’s `projectId` field."""
  projectId: IntFilter

  """Filter by the object’s `reportDueDate` field."""
  reportDueDate: DatetimeFilter

  """Filter by the object’s `reportType` field."""
  reportType: StringFilter

  """Filter by the object’s `reportTypeByReportType` relation."""
  reportTypeByReportType: ReportTypeFilter

  """Filter by the object’s `reportingRequirementIndex` field."""
  reportingRequirementIndex: IntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Filter by the object’s `submittedDate` field."""
  submittedDate: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A filter to be used against many `EmissionIntensityReport` object types. All fields are combined with a logical ‘and.’
"""
input ReportingRequirementToManyEmissionIntensityReportFilter {
  """
  Every related `EmissionIntensityReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EmissionIntensityReportFilter

  """
  No related `EmissionIntensityReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EmissionIntensityReportFilter

  """
  Some related `EmissionIntensityReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EmissionIntensityReportFilter
}

"""
A filter to be used against many `MilestoneReport` object types. All fields are combined with a logical ‘and.’
"""
input ReportingRequirementToManyMilestoneReportFilter {
  """
  Every related `MilestoneReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MilestoneReportFilter

  """
  No related `MilestoneReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MilestoneReportFilter

  """
  Some related `MilestoneReport` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MilestoneReportFilter
}

"""
A filter to be used against many `Payment` object types. All fields are combined with a logical ‘and.’
"""
input ReportingRequirementToManyPaymentFilter {
  """
  Every related `Payment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PaymentFilter

  """
  No related `Payment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PaymentFilter

  """
  Some related `Payment` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PaymentFilter
}

"""A connection to a list of `ReportingRequirement` values."""
type ReportingRequirementsConnection {
  """
  A list of edges which contains the `ReportingRequirement` and cursor to aid in pagination.
  """
  edges: [ReportingRequirementsEdge!]!

  """A list of `ReportingRequirement` objects."""
  nodes: [ReportingRequirement]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ReportingRequirement` edge in the connection."""
type ReportingRequirementsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ReportingRequirement` at the end of the edge."""
  node: ReportingRequirement
}

"""Methods to use when ordering `ReportingRequirement`."""
enum ReportingRequirementsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EMISSION_INTENSITY_REPORTS_BY_REPORTING_REQUIREMENT_ID__COUNT_ASC
  EMISSION_INTENSITY_REPORTS_BY_REPORTING_REQUIREMENT_ID__COUNT_DESC
  ID_ASC
  ID_DESC
  MILESTONE_REPORTS_BY_REPORTING_REQUIREMENT_ID__COUNT_ASC
  MILESTONE_REPORTS_BY_REPORTING_REQUIREMENT_ID__COUNT_DESC
  NATURAL
  PAYMENTS_BY_REPORTING_REQUIREMENT_ID__COUNT_ASC
  PAYMENTS_BY_REPORTING_REQUIREMENT_ID__COUNT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_ASC
  PROJECT_BY_PROJECT_ID__ADDITIONAL_SECTOR_INFORMATION_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_AT_DESC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_ASC
  PROJECT_BY_PROJECT_ID__ARCHIVED_BY_DESC
  PROJECT_BY_PROJECT_ID__COMMENTS_ASC
  PROJECT_BY_PROJECT_ID__COMMENTS_DESC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_ASC
  PROJECT_BY_PROJECT_ID__CONTRACT_NUMBER_DESC
  PROJECT_BY_PROJECT_ID__CREATED_AT_ASC
  PROJECT_BY_PROJECT_ID__CREATED_AT_DESC
  PROJECT_BY_PROJECT_ID__CREATED_BY_ASC
  PROJECT_BY_PROJECT_ID__CREATED_BY_DESC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_ASC
  PROJECT_BY_PROJECT_ID__FUNDING_STREAM_RFP_ID_DESC
  PROJECT_BY_PROJECT_ID__ID_ASC
  PROJECT_BY_PROJECT_ID__ID_DESC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_ASC
  PROJECT_BY_PROJECT_ID__OPERATOR_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_NAME_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_STATUS_ID_DESC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_ASC
  PROJECT_BY_PROJECT_ID__PROJECT_TYPE_DESC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_ASC
  PROJECT_BY_PROJECT_ID__PROPOSAL_REFERENCE_DESC
  PROJECT_BY_PROJECT_ID__SCORE_ASC
  PROJECT_BY_PROJECT_ID__SCORE_DESC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_ASC
  PROJECT_BY_PROJECT_ID__SECTOR_NAME_DESC
  PROJECT_BY_PROJECT_ID__SUMMARY_ASC
  PROJECT_BY_PROJECT_ID__SUMMARY_DESC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_ASC
  PROJECT_BY_PROJECT_ID__TOTAL_FUNDING_REQUEST_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_AT_DESC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_ASC
  PROJECT_BY_PROJECT_ID__UPDATED_BY_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  REPORTING_REQUIREMENT_INDEX_ASC
  REPORTING_REQUIREMENT_INDEX_DESC
  REPORT_DUE_DATE_ASC
  REPORT_DUE_DATE_DESC
  REPORT_TYPE_ASC
  REPORT_TYPE_BY_REPORT_TYPE__ARCHIVED_AT_ASC
  REPORT_TYPE_BY_REPORT_TYPE__ARCHIVED_AT_DESC
  REPORT_TYPE_BY_REPORT_TYPE__ARCHIVED_BY_ASC
  REPORT_TYPE_BY_REPORT_TYPE__ARCHIVED_BY_DESC
  REPORT_TYPE_BY_REPORT_TYPE__CREATED_AT_ASC
  REPORT_TYPE_BY_REPORT_TYPE__CREATED_AT_DESC
  REPORT_TYPE_BY_REPORT_TYPE__CREATED_BY_ASC
  REPORT_TYPE_BY_REPORT_TYPE__CREATED_BY_DESC
  REPORT_TYPE_BY_REPORT_TYPE__HAS_EXPENSES_ASC
  REPORT_TYPE_BY_REPORT_TYPE__HAS_EXPENSES_DESC
  REPORT_TYPE_BY_REPORT_TYPE__IS_MILESTONE_ASC
  REPORT_TYPE_BY_REPORT_TYPE__IS_MILESTONE_DESC
  REPORT_TYPE_BY_REPORT_TYPE__NAME_ASC
  REPORT_TYPE_BY_REPORT_TYPE__NAME_DESC
  REPORT_TYPE_BY_REPORT_TYPE__UPDATED_AT_ASC
  REPORT_TYPE_BY_REPORT_TYPE__UPDATED_AT_DESC
  REPORT_TYPE_BY_REPORT_TYPE__UPDATED_BY_ASC
  REPORT_TYPE_BY_REPORT_TYPE__UPDATED_BY_DESC
  REPORT_TYPE_DESC
  SUBMITTED_DATE_ASC
  SUBMITTED_DATE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about amendment statuses"""
type RevisionStatus implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionRevisionStatusAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusChangeStatusesByProjectRevisionRevisionStatusAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionRevisionStatusAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusCifUsersByProjectRevisionRevisionStatusAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionRevisionStatusAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusCifUsersByProjectRevisionRevisionStatusAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """
  Boolean value to indicate if the revision status can only be used for amendments
  """
  isAmendmentSpecific: Boolean!

  """The name of the amendment status as the primary key"""
  name: String!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionRevisionStatusAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusProjectsByProjectRevisionRevisionStatusAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `RevisionType`."""
  revisionTypesByProjectRevisionRevisionStatusAndRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusRevisionTypesByProjectRevisionRevisionStatusAndRevisionTypeManyToManyConnection!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type RevisionStatusChangeStatusesByProjectRevisionRevisionStatusAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionStatusChangeStatusesByProjectRevisionRevisionStatusAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type RevisionStatusChangeStatusesByProjectRevisionRevisionStatusAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type RevisionStatusCifUsersByProjectRevisionRevisionStatusAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionStatusCifUsersByProjectRevisionRevisionStatusAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type RevisionStatusCifUsersByProjectRevisionRevisionStatusAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type RevisionStatusCifUsersByProjectRevisionRevisionStatusAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionStatusCifUsersByProjectRevisionRevisionStatusAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type RevisionStatusCifUsersByProjectRevisionRevisionStatusAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A condition to be used against `RevisionStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RevisionStatusCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `isAmendmentSpecific` field."""
  isAmendmentSpecific: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `RevisionStatus` object types. All fields are combined with a logical ‘and.’
"""
input RevisionStatusFilter {
  """Checks for all expressions in this list."""
  and: [RevisionStatusFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Filter by the object’s `isAmendmentSpecific` field."""
  isAmendmentSpecific: BooleanFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: RevisionStatusFilter

  """Checks for any expressions in this list."""
  or: [RevisionStatusFilter!]

  """Filter by the object’s `projectRevisionsByRevisionStatus` relation."""
  projectRevisionsByRevisionStatus: RevisionStatusToManyProjectRevisionFilter

  """Some related `projectRevisionsByRevisionStatus` exist."""
  projectRevisionsByRevisionStatusExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `RevisionStatus`"""
input RevisionStatusInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  Boolean value to indicate if the revision status can only be used for amendments
  """
  isAmendmentSpecific: Boolean!

  """The name of the amendment status as the primary key"""
  name: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `RevisionStatus`. Fields that are set will be updated.
"""
input RevisionStatusPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """
  Boolean value to indicate if the revision status can only be used for amendments
  """
  isAmendmentSpecific: Boolean

  """The name of the amendment status as the primary key"""
  name: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type RevisionStatusProjectsByProjectRevisionRevisionStatusAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionStatusProjectsByProjectRevisionRevisionStatusAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type RevisionStatusProjectsByProjectRevisionRevisionStatusAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `RevisionType` values, with data from `ProjectRevision`.
"""
type RevisionStatusRevisionTypesByProjectRevisionRevisionStatusAndRevisionTypeManyToManyConnection {
  """
  A list of edges which contains the `RevisionType`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionStatusRevisionTypesByProjectRevisionRevisionStatusAndRevisionTypeManyToManyEdge!]!

  """A list of `RevisionType` objects."""
  nodes: [RevisionType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionType` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionType` edge in the connection, with data from `ProjectRevision`.
"""
type RevisionStatusRevisionTypesByProjectRevisionRevisionStatusAndRevisionTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionType` at the end of the edge."""
  node: RevisionType

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input RevisionStatusToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""A connection to a list of `RevisionStatus` values."""
type RevisionStatusesConnection {
  """
  A list of edges which contains the `RevisionStatus` and cursor to aid in pagination.
  """
  edges: [RevisionStatusesEdge!]!

  """A list of `RevisionStatus` objects."""
  nodes: [RevisionStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `RevisionStatus` edge in the connection."""
type RevisionStatusesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionStatus` at the end of the edge."""
  node: RevisionStatus
}

"""Methods to use when ordering `RevisionStatus`."""
enum RevisionStatusesOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  IS_AMENDMENT_SPECIFIC_ASC
  IS_AMENDMENT_SPECIFIC_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_REVISIONS_BY_REVISION_STATUS__COUNT_ASC
  PROJECT_REVISIONS_BY_REVISION_STATUS__COUNT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Table containing information about revision types"""
type RevisionType implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads and enables pagination through a set of `ChangeStatus`."""
  changeStatusesByProjectRevisionRevisionTypeAndChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChangeStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypeChangeStatusesByProjectRevisionRevisionTypeAndChangeStatusManyToManyConnection!

  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionRevisionTypeAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypeCifUsersByProjectRevisionRevisionTypeAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectRevisionRevisionTypeAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypeCifUsersByProjectRevisionRevisionTypeAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectRevisionRevisionTypeAndProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypeProjectsByProjectRevisionRevisionTypeAndProjectIdManyToManyConnection!

  """Reads and enables pagination through a set of `RevisionStatus`."""
  revisionStatusesByProjectRevisionRevisionTypeAndRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypeRevisionStatusesByProjectRevisionRevisionTypeAndRevisionStatusManyToManyConnection!

  """The type of the revision type as the primary key"""
  type: String!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ChangeStatus` values, with data from `ProjectRevision`.
"""
type RevisionTypeChangeStatusesByProjectRevisionRevisionTypeAndChangeStatusManyToManyConnection {
  """
  A list of edges which contains the `ChangeStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionTypeChangeStatusesByProjectRevisionRevisionTypeAndChangeStatusManyToManyEdge!]!

  """A list of `ChangeStatus` objects."""
  nodes: [ChangeStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChangeStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `ChangeStatus` edge in the connection, with data from `ProjectRevision`.
"""
type RevisionTypeChangeStatusesByProjectRevisionRevisionTypeAndChangeStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChangeStatus` at the end of the edge."""
  node: ChangeStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByChangeStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type RevisionTypeCifUsersByProjectRevisionRevisionTypeAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionTypeCifUsersByProjectRevisionRevisionTypeAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type RevisionTypeCifUsersByProjectRevisionRevisionTypeAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `CifUser` values, with data from `ProjectRevision`.
"""
type RevisionTypeCifUsersByProjectRevisionRevisionTypeAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionTypeCifUsersByProjectRevisionRevisionTypeAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `ProjectRevision`."""
type RevisionTypeCifUsersByProjectRevisionRevisionTypeAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A condition to be used against `RevisionType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RevisionTypeCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `RevisionType` object types. All fields are combined with a logical ‘and.’
"""
input RevisionTypeFilter {
  """Checks for all expressions in this list."""
  and: [RevisionTypeFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Negates the expression."""
  not: RevisionTypeFilter

  """Checks for any expressions in this list."""
  or: [RevisionTypeFilter!]

  """Filter by the object’s `projectRevisionsByRevisionType` relation."""
  projectRevisionsByRevisionType: RevisionTypeToManyProjectRevisionFilter

  """Some related `projectRevisionsByRevisionType` exist."""
  projectRevisionsByRevisionTypeExist: Boolean

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""An input for mutations affecting `RevisionType`"""
input RevisionTypeInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The type of the revision type as the primary key"""
  type: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
Represents an update to a `RevisionType`. Fields that are set will be updated.
"""
input RevisionTypePatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The type of the revision type as the primary key"""
  type: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `Project` values, with data from `ProjectRevision`.
"""
type RevisionTypeProjectsByProjectRevisionRevisionTypeAndProjectIdManyToManyConnection {
  """
  A list of edges which contains the `Project`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionTypeProjectsByProjectRevisionRevisionTypeAndProjectIdManyToManyEdge!]!

  """A list of `Project` objects."""
  nodes: [Project]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Project` you could get from the connection."""
  totalCount: Int!
}

"""A `Project` edge in the connection, with data from `ProjectRevision`."""
type RevisionTypeProjectsByProjectRevisionRevisionTypeAndProjectIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Project` at the end of the edge."""
  node: Project

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByProjectId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `RevisionStatus` values, with data from `ProjectRevision`.
"""
type RevisionTypeRevisionStatusesByProjectRevisionRevisionTypeAndRevisionStatusManyToManyConnection {
  """
  A list of edges which contains the `RevisionStatus`, info from the `ProjectRevision`, and the cursor to aid in pagination.
  """
  edges: [RevisionTypeRevisionStatusesByProjectRevisionRevisionTypeAndRevisionStatusManyToManyEdge!]!

  """A list of `RevisionStatus` objects."""
  nodes: [RevisionStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionStatus` you could get from the connection."""
  totalCount: Int!
}

"""
A `RevisionStatus` edge in the connection, with data from `ProjectRevision`.
"""
type RevisionTypeRevisionStatusesByProjectRevisionRevisionTypeAndRevisionStatusManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionStatus` at the end of the edge."""
  node: RevisionStatus

  """Reads and enables pagination through a set of `ProjectRevision`."""
  projectRevisionsByRevisionStatus(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectRevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsConnection!
}

"""
A filter to be used against many `ProjectRevision` object types. All fields are combined with a logical ‘and.’
"""
input RevisionTypeToManyProjectRevisionFilter {
  """
  Every related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectRevisionFilter

  """
  No related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectRevisionFilter

  """
  Some related `ProjectRevision` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectRevisionFilter
}

"""A connection to a list of `RevisionType` values."""
type RevisionTypesConnection {
  """
  A list of edges which contains the `RevisionType` and cursor to aid in pagination.
  """
  edges: [RevisionTypesEdge!]!

  """A list of `RevisionType` objects."""
  nodes: [RevisionType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `RevisionType` you could get from the connection."""
  totalCount: Int!
}

"""A `RevisionType` edge in the connection."""
type RevisionTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `RevisionType` at the end of the edge."""
  node: RevisionType
}

"""Methods to use when ordering `RevisionType`."""
enum RevisionTypesOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECT_REVISIONS_BY_REVISION_TYPE__COUNT_ASC
  PROJECT_REVISIONS_BY_REVISION_TYPE__COUNT_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""Lookup table for industry sectors used by the CleanBC Industry Fund"""
type Sector implements Node {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByUpdatedBy: CifUser

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectSectorNameAndArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorCifUsersByProjectSectorNameAndArchivedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectSectorNameAndCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorCifUsersByProjectSectorNameAndCreatedByManyToManyConnection!

  """Reads and enables pagination through a set of `CifUser`."""
  cifUsersByProjectSectorNameAndUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CifUserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorCifUsersByProjectSectorNameAndUpdatedByManyToManyConnection!

  """created at timestamp"""
  createdAt: Datetime!

  """created by user id"""
  createdBy: Int

  """Reads and enables pagination through a set of `FundingStreamRfp`."""
  fundingStreamRfpsByProjectSectorNameAndFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FundingStreamRfpFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorFundingStreamRfpsByProjectSectorNameAndFundingStreamRfpIdManyToManyConnection!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!

  """Reads and enables pagination through a set of `Operator`."""
  operatorsByProjectSectorNameAndOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OperatorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Operator`."""
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorOperatorsByProjectSectorNameAndOperatorIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectStatus`."""
  projectStatusesByProjectSectorNameAndProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectStatusFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorProjectStatusesByProjectSectorNameAndProjectStatusIdManyToManyConnection!

  """Reads and enables pagination through a set of `ProjectType`."""
  projectTypesByProjectSectorNameAndProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectTypeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorProjectTypesByProjectSectorNameAndProjectTypeManyToManyConnection!

  """Reads and enables pagination through a set of `Project`."""
  projectsBySectorName(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = INHERIT

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!

  """The name of the sector as the primary key"""
  sectorName: String!

  """updated at timestamp"""
  updatedAt: Datetime!

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type SectorCifUsersByProjectSectorNameAndArchivedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [SectorCifUsersByProjectSectorNameAndArchivedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type SectorCifUsersByProjectSectorNameAndArchivedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByArchivedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type SectorCifUsersByProjectSectorNameAndCreatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [SectorCifUsersByProjectSectorNameAndCreatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type SectorCifUsersByProjectSectorNameAndCreatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByCreatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""A connection to a list of `CifUser` values, with data from `Project`."""
type SectorCifUsersByProjectSectorNameAndUpdatedByManyToManyConnection {
  """
  A list of edges which contains the `CifUser`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [SectorCifUsersByProjectSectorNameAndUpdatedByManyToManyEdge!]!

  """A list of `CifUser` objects."""
  nodes: [CifUser]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CifUser` you could get from the connection."""
  totalCount: Int!
}

"""A `CifUser` edge in the connection, with data from `Project`."""
type SectorCifUsersByProjectSectorNameAndUpdatedByManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CifUser` at the end of the edge."""
  node: CifUser

  """Reads and enables pagination through a set of `Project`."""
  projectsByUpdatedBy(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A condition to be used against `Sector` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SectorCondition {
  """Checks for equality with the object’s `archivedAt` field."""
  archivedAt: Datetime

  """Checks for equality with the object’s `archivedBy` field."""
  archivedBy: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `createdBy` field."""
  createdBy: Int

  """Checks for equality with the object’s `sectorName` field."""
  sectorName: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updatedBy` field."""
  updatedBy: Int
}

"""
A filter to be used against `Sector` object types. All fields are combined with a logical ‘and.’
"""
input SectorFilter {
  """Checks for all expressions in this list."""
  and: [SectorFilter!]

  """Filter by the object’s `archivedAt` field."""
  archivedAt: DatetimeFilter

  """Filter by the object’s `archivedBy` field."""
  archivedBy: IntFilter

  """Filter by the object’s `cifUserByArchivedBy` relation."""
  cifUserByArchivedBy: CifUserFilter

  """A related `cifUserByArchivedBy` exists."""
  cifUserByArchivedByExists: Boolean

  """Filter by the object’s `cifUserByCreatedBy` relation."""
  cifUserByCreatedBy: CifUserFilter

  """A related `cifUserByCreatedBy` exists."""
  cifUserByCreatedByExists: Boolean

  """Filter by the object’s `cifUserByUpdatedBy` relation."""
  cifUserByUpdatedBy: CifUserFilter

  """A related `cifUserByUpdatedBy` exists."""
  cifUserByUpdatedByExists: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `createdBy` field."""
  createdBy: IntFilter

  """Negates the expression."""
  not: SectorFilter

  """Checks for any expressions in this list."""
  or: [SectorFilter!]

  """Filter by the object’s `projectsBySectorName` relation."""
  projectsBySectorName: SectorToManyProjectFilter

  """Some related `projectsBySectorName` exist."""
  projectsBySectorNameExist: Boolean

  """Filter by the object’s `sectorName` field."""
  sectorName: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updatedBy` field."""
  updatedBy: IntFilter
}

"""
A connection to a list of `FundingStreamRfp` values, with data from `Project`.
"""
type SectorFundingStreamRfpsByProjectSectorNameAndFundingStreamRfpIdManyToManyConnection {
  """
  A list of edges which contains the `FundingStreamRfp`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [SectorFundingStreamRfpsByProjectSectorNameAndFundingStreamRfpIdManyToManyEdge!]!

  """A list of `FundingStreamRfp` objects."""
  nodes: [FundingStreamRfp]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FundingStreamRfp` edge in the connection, with data from `Project`."""
type SectorFundingStreamRfpsByProjectSectorNameAndFundingStreamRfpIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FundingStreamRfp` at the end of the edge."""
  node: FundingStreamRfp

  """Reads and enables pagination through a set of `Project`."""
  projectsByFundingStreamRfpId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""An input for mutations affecting `Sector`"""
input SectorInput {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the sector as the primary key"""
  sectorName: String!

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""A connection to a list of `Operator` values, with data from `Project`."""
type SectorOperatorsByProjectSectorNameAndOperatorIdManyToManyConnection {
  """
  A list of edges which contains the `Operator`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [SectorOperatorsByProjectSectorNameAndOperatorIdManyToManyEdge!]!

  """A list of `Operator` objects."""
  nodes: [Operator]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operator` you could get from the connection."""
  totalCount: Int!
}

"""A `Operator` edge in the connection, with data from `Project`."""
type SectorOperatorsByProjectSectorNameAndOperatorIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operator` at the end of the edge."""
  node: Operator

  """Reads and enables pagination through a set of `Project`."""
  projectsByOperatorId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
Represents an update to a `Sector`. Fields that are set will be updated.
"""
input SectorPatch {
  """archived at timestamp"""
  archivedAt: Datetime

  """archived by user id"""
  archivedBy: Int

  """created at timestamp"""
  createdAt: Datetime

  """created by user id"""
  createdBy: Int

  """The name of the sector as the primary key"""
  sectorName: String

  """updated at timestamp"""
  updatedAt: Datetime

  """updated by user id"""
  updatedBy: Int
}

"""
A connection to a list of `ProjectStatus` values, with data from `Project`.
"""
type SectorProjectStatusesByProjectSectorNameAndProjectStatusIdManyToManyConnection {
  """
  A list of edges which contains the `ProjectStatus`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [SectorProjectStatusesByProjectSectorNameAndProjectStatusIdManyToManyEdge!]!

  """A list of `ProjectStatus` objects."""
  nodes: [ProjectStatus]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectStatus` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectStatus` edge in the connection, with data from `Project`."""
type SectorProjectStatusesByProjectSectorNameAndProjectStatusIdManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectStatus` at the end of the edge."""
  node: ProjectStatus

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectStatusId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A connection to a list of `ProjectType` values, with data from `Project`.
"""
type SectorProjectTypesByProjectSectorNameAndProjectTypeManyToManyConnection {
  """
  A list of edges which contains the `ProjectType`, info from the `Project`, and the cursor to aid in pagination.
  """
  edges: [SectorProjectTypesByProjectSectorNameAndProjectTypeManyToManyEdge!]!

  """A list of `ProjectType` objects."""
  nodes: [ProjectType]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProjectType` you could get from the connection."""
  totalCount: Int!
}

"""A `ProjectType` edge in the connection, with data from `Project`."""
type SectorProjectTypesByProjectSectorNameAndProjectTypeManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProjectType` at the end of the edge."""
  node: ProjectType

  """Reads and enables pagination through a set of `Project`."""
  projectsByProjectType(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProjectFilter

    """Only read the first `n` values of the set."""
    first: Int

    """
    Indicates whether archived items should be included in the results or not.
    """
    includeArchived: IncludeArchivedOption = NO

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Project`."""
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsConnection!
}

"""
A filter to be used against many `Project` object types. All fields are combined with a logical ‘and.’
"""
input SectorToManyProjectFilter {
  """
  Every related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProjectFilter

  """
  No related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProjectFilter

  """
  Some related `Project` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProjectFilter
}

"""A connection to a list of `Sector` values."""
type SectorsConnection {
  """
  A list of edges which contains the `Sector` and cursor to aid in pagination.
  """
  edges: [SectorsEdge!]!

  """A list of `Sector` objects."""
  nodes: [Sector]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sector` you could get from the connection."""
  totalCount: Int!
}

"""A `Sector` edge in the connection."""
type SectorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sector` at the end of the edge."""
  node: Sector
}

"""Methods to use when ordering `Sector`."""
enum SectorsOrderBy {
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_ARCHIVED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__CREATED_BY_DESC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_ARCHIVED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__FULL_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_ARCHIVED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_ARCHIVED_BY__ID_ASC
  CIF_USER_BY_ARCHIVED_BY__ID_DESC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_ASC
  CIF_USER_BY_ARCHIVED_BY__SESSION_SUB_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_AT_DESC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_ASC
  CIF_USER_BY_ARCHIVED_BY__UPDATED_BY_DESC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_CREATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_CREATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_CREATED_BY__CREATED_AT_ASC
  CIF_USER_BY_CREATED_BY__CREATED_AT_DESC
  CIF_USER_BY_CREATED_BY__CREATED_BY_ASC
  CIF_USER_BY_CREATED_BY__CREATED_BY_DESC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_CREATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_CREATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_CREATED_BY__FULL_NAME_ASC
  CIF_USER_BY_CREATED_BY__FULL_NAME_DESC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_CREATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_CREATED_BY__ID_ASC
  CIF_USER_BY_CREATED_BY__ID_DESC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_CREATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_CREATED_BY__UPDATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_ASC
  CIF_USER_BY_UPDATED_BY__ALLOW_SUB_UPDATE_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_AT_DESC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_ASC
  CIF_USER_BY_UPDATED_BY__ARCHIVED_BY_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__CREATED_BY_DESC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_ASC
  CIF_USER_BY_UPDATED_BY__EMAIL_ADDRESS_DESC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FAMILY_NAME_DESC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_ASC
  CIF_USER_BY_UPDATED_BY__FULL_NAME_DESC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_ASC
  CIF_USER_BY_UPDATED_BY__GIVEN_NAME_DESC
  CIF_USER_BY_UPDATED_BY__ID_ASC
  CIF_USER_BY_UPDATED_BY__ID_DESC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_ASC
  CIF_USER_BY_UPDATED_BY__SESSION_SUB_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_AT_DESC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_ASC
  CIF_USER_BY_UPDATED_BY__UPDATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROJECTS_BY_SECTOR_NAME__COUNT_ASC
  PROJECTS_BY_SECTOR_NAME__COUNT_DESC
  SECTOR_NAME_ASC
  SECTOR_NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
}

"""All input for the `stageDirtyFormChanges` mutation."""
input StageDirtyFormChangesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectRevisionId: Int!
}

"""The output of our `stageDirtyFormChanges` mutation."""
type StageDirtyFormChangesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `stageFormChange` mutation."""
input StageFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formChangePatch: FormChangePatch!
  rowId: Int!
}

"""The output of our `stageFormChange` mutation."""
type StageFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Form` that is related to this `FormChange`."""
  formByJsonSchemaName: Form
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `undoFormChanges` mutation."""
input UndoFormChangesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formChangesIds: [Int]!
}

"""The output of our `undoFormChanges` mutation."""
type UndoFormChangesPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType
}

"""All input for the `updateAdditionalFundingSourceByRowId` mutation."""
input UpdateAdditionalFundingSourceByRowIdInput {
  """
  An object where the defined keys will be set on the `AdditionalFundingSource` being updated.
  """
  additionalFundingSourcePatch: AdditionalFundingSourcePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the additional funding source"""
  rowId: Int!
}

"""All input for the `updateAdditionalFundingSource` mutation."""
input UpdateAdditionalFundingSourceInput {
  """
  An object where the defined keys will be set on the `AdditionalFundingSource` being updated.
  """
  additionalFundingSourcePatch: AdditionalFundingSourcePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalFundingSource` to be updated.
  """
  id: ID!
}

"""The output of our update `AdditionalFundingSource` mutation."""
type UpdateAdditionalFundingSourcePayload {
  """The `AdditionalFundingSource` that was updated by this mutation."""
  additionalFundingSource: AdditionalFundingSource

  """An edge for our `AdditionalFundingSource`. May be used by Relay 1."""
  additionalFundingSourceEdge(
    """The method to use when ordering `AdditionalFundingSource`."""
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesEdge

  """
  Reads a single `AdditionalFundingSourceStatus` that is related to this `AdditionalFundingSource`.
  """
  additionalFundingSourceStatusByStatus: AdditionalFundingSourceStatus

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Project` that is related to this `AdditionalFundingSource`.
  """
  projectByProjectId: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateAdditionalFundingSourceStatusByStatusName` mutation.
"""
input UpdateAdditionalFundingSourceStatusByStatusNameInput {
  """
  An object where the defined keys will be set on the `AdditionalFundingSourceStatus` being updated.
  """
  additionalFundingSourceStatusPatch: AdditionalFundingSourceStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status as the primary key"""
  statusName: String!
}

"""All input for the `updateAdditionalFundingSourceStatus` mutation."""
input UpdateAdditionalFundingSourceStatusInput {
  """
  An object where the defined keys will be set on the `AdditionalFundingSourceStatus` being updated.
  """
  additionalFundingSourceStatusPatch: AdditionalFundingSourceStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalFundingSourceStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `AdditionalFundingSourceStatus` mutation."""
type UpdateAdditionalFundingSourceStatusPayload {
  """The `AdditionalFundingSourceStatus` that was updated by this mutation."""
  additionalFundingSourceStatus: AdditionalFundingSourceStatus

  """
  An edge for our `AdditionalFundingSourceStatus`. May be used by Relay 1.
  """
  additionalFundingSourceStatusEdge(
    """The method to use when ordering `AdditionalFundingSourceStatus`."""
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesEdge

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateAmendmentTypeByName` mutation."""
input UpdateAmendmentTypeByNameInput {
  """
  An object where the defined keys will be set on the `AmendmentType` being updated.
  """
  amendmentTypePatch: AmendmentTypePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the amendment type as the primary key"""
  name: String!
}

"""All input for the `updateAmendmentType` mutation."""
input UpdateAmendmentTypeInput {
  """
  An object where the defined keys will be set on the `AmendmentType` being updated.
  """
  amendmentTypePatch: AmendmentTypePatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AmendmentType` to be updated.
  """
  id: ID!
}

"""The output of our update `AmendmentType` mutation."""
type UpdateAmendmentTypePayload {
  """The `AmendmentType` that was updated by this mutation."""
  amendmentType: AmendmentType

  """An edge for our `AmendmentType`. May be used by Relay 1."""
  amendmentTypeEdge(
    """The method to use when ordering `AmendmentType`."""
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesEdge

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `AmendmentType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateAttachmentByRowId` mutation."""
input UpdateAttachmentByRowIdInput {
  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the attachment"""
  rowId: Int!
}

"""All input for the `updateAttachment` mutation."""
input UpdateAttachmentInput {
  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be updated.
  """
  id: ID!
}

"""The output of our update `Attachment` mutation."""
type UpdateAttachmentPayload {
  """The `Attachment` that was updated by this mutation."""
  attachment: Attachment

  """An edge for our `Attachment`. May be used by Relay 1."""
  attachmentEdge(
    """The method to use when ordering `Attachment`."""
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Attachment`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `Attachment`."""
  projectByProjectId: Project

  """Reads a single `ProjectStatus` that is related to this `Attachment`."""
  projectStatusByProjectStatusId: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateChangeStatusByStatus` mutation."""
input UpdateChangeStatusByStatusInput {
  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the status, e.g. "pending", "committed", ..."""
  status: String!
}

"""All input for the `updateChangeStatus` mutation."""
input UpdateChangeStatusInput {
  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `ChangeStatus` mutation."""
type UpdateChangeStatusPayload {
  """The `ChangeStatus` that was updated by this mutation."""
  changeStatus: ChangeStatus

  """An edge for our `ChangeStatus`. May be used by Relay 1."""
  changeStatusEdge(
    """The method to use when ordering `ChangeStatus`."""
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ChangeStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCifUserByRowId` mutation."""
input UpdateCifUserByRowIdInput {
  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Unique ID for the user"""
  rowId: Int!
}

"""All input for the `updateCifUser` mutation."""
input UpdateCifUserInput {
  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be updated.
  """
  id: ID!
}

"""The output of our update `CifUser` mutation."""
type UpdateCifUserPayload {
  """The `CifUser` that was updated by this mutation."""
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformance` mutation.
"""
input UpdateEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionIntensityPaymentPercent` being updated.
  """
  emissionIntensityPaymentPercentPatch: EmissionIntensityPaymentPercentPatch!

  """
    The calculated emission intensity performance.
    This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  
  """
  maxEmissionIntensityPerformance: BigFloat!
}

"""
All input for the `updateEmissionIntensityPaymentPercentByRowId` mutation.
"""
input UpdateEmissionIntensityPaymentPercentByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionIntensityPaymentPercent` being updated.
  """
  emissionIntensityPaymentPercentPatch: EmissionIntensityPaymentPercentPatch!

  """Unique ID for the emission_intensity_payment_percent"""
  rowId: Int!
}

"""All input for the `updateEmissionIntensityPaymentPercent` mutation."""
input UpdateEmissionIntensityPaymentPercentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionIntensityPaymentPercent` being updated.
  """
  emissionIntensityPaymentPercentPatch: EmissionIntensityPaymentPercentPatch!

  """
  The globally unique `ID` which will identify a single `EmissionIntensityPaymentPercent` to be updated.
  """
  id: ID!
}

"""The output of our update `EmissionIntensityPaymentPercent` mutation."""
type UpdateEmissionIntensityPaymentPercentPayload {
  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EmissionIntensityPaymentPercent` that was updated by this mutation.
  """
  emissionIntensityPaymentPercent: EmissionIntensityPaymentPercent

  """
  An edge for our `EmissionIntensityPaymentPercent`. May be used by Relay 1.
  """
  emissionIntensityPaymentPercentEdge(
    """The method to use when ordering `EmissionIntensityPaymentPercent`."""
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateEmissionIntensityReportByRowId` mutation."""
input UpdateEmissionIntensityReportByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionIntensityReport` being updated.
  """
  emissionIntensityReportPatch: EmissionIntensityReportPatch!

  """Unique ID for the emission_intensity_report"""
  rowId: Int!
}

"""All input for the `updateEmissionIntensityReport` mutation."""
input UpdateEmissionIntensityReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionIntensityReport` being updated.
  """
  emissionIntensityReportPatch: EmissionIntensityReportPatch!

  """
  The globally unique `ID` which will identify a single `EmissionIntensityReport` to be updated.
  """
  id: ID!
}

"""The output of our update `EmissionIntensityReport` mutation."""
type UpdateEmissionIntensityReportPayload {
  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EmissionIntensityReport` that was updated by this mutation."""
  emissionIntensityReport: EmissionIntensityReport

  """An edge for our `EmissionIntensityReport`. May be used by Relay 1."""
  emissionIntensityReportEdge(
    """The method to use when ordering `EmissionIntensityReport`."""
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `EmissionIntensityReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement
}

"""All input for the `updateFormByRowId` mutation."""
input UpdateFormByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!

  """Unique ID for the form data."""
  rowId: Int!
}

"""All input for the `updateFormBySlug` mutation."""
input UpdateFormBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!

  """Unique short name identifier for the json_schema data."""
  slug: String!
}

"""All input for the `updateFormChange` mutation."""
input UpdateFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formChangePatch: FormChangePatch!
  rowId: Int!
}

"""The output of our `updateFormChange` mutation."""
type UpdateFormChangePayload {
  """Reads a single `ChangeStatus` that is related to this `FormChange`."""
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FormChange`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Form` that is related to this `FormChange`."""
  formByJsonSchemaName: Form
  formChange: FormChange

  """Reads a single `FormChange` that is related to this `FormChange`."""
  formChangeByPreviousFormChangeId: FormChange

  """An edge for our `FormChange`. May be used by Relay 1."""
  formChangeEdge(
    """The method to use when ordering `FormChange`."""
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge

  """Reads a single `ProjectRevision` that is related to this `FormChange`."""
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateForm` mutation."""
input UpdateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!

  """
  The globally unique `ID` which will identify a single `Form` to be updated.
  """
  id: ID!
}

"""The output of our update `Form` mutation."""
type UpdateFormPayload {
  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Form`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Form` that was updated by this mutation."""
  form: Form

  """An edge for our `Form`. May be used by Relay 1."""
  formEdge(
    """The method to use when ordering `Form`."""
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFundingParameterByRowId` mutation."""
input UpdateFundingParameterByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingParameter` being updated.
  """
  fundingParameterPatch: FundingParameterPatch!

  """Unique ID for the funding agreement data"""
  rowId: Int!
}

"""All input for the `updateFundingParameter` mutation."""
input UpdateFundingParameterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingParameter` being updated.
  """
  fundingParameterPatch: FundingParameterPatch!

  """
  The globally unique `ID` which will identify a single `FundingParameter` to be updated.
  """
  id: ID!
}

"""The output of our update `FundingParameter` mutation."""
type UpdateFundingParameterPayload {
  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingParameter`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FundingParameter` that was updated by this mutation."""
  fundingParameter: FundingParameter

  """An edge for our `FundingParameter`. May be used by Relay 1."""
  fundingParameterEdge(
    """The method to use when ordering `FundingParameter`."""
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersEdge

  """Reads a single `Project` that is related to this `FundingParameter`."""
  projectByProjectId: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFundingStreamByRowId` mutation."""
input UpdateFundingStreamByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStream` being updated.
  """
  fundingStreamPatch: FundingStreamPatch!

  """Unique ID for the funding_stream"""
  rowId: Int!
}

"""All input for the `updateFundingStream` mutation."""
input UpdateFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStream` being updated.
  """
  fundingStreamPatch: FundingStreamPatch!

  """
  The globally unique `ID` which will identify a single `FundingStream` to be updated.
  """
  id: ID!
}

"""The output of our update `FundingStream` mutation."""
type UpdateFundingStreamPayload {
  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStream`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FundingStream` that was updated by this mutation."""
  fundingStream: FundingStream

  """An edge for our `FundingStream`. May be used by Relay 1."""
  fundingStreamEdge(
    """The method to use when ordering `FundingStream`."""
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFundingStreamRfpByRowId` mutation."""
input UpdateFundingStreamRfpByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamRfp` being updated.
  """
  fundingStreamRfpPatch: FundingStreamRfpPatch!

  """Unique ID for the funding_stream_rfp"""
  rowId: Int!
}

"""All input for the `updateFundingStreamRfp` mutation."""
input UpdateFundingStreamRfpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamRfp` being updated.
  """
  fundingStreamRfpPatch: FundingStreamRfpPatch!

  """
  The globally unique `ID` which will identify a single `FundingStreamRfp` to be updated.
  """
  id: ID!
}

"""The output of our update `FundingStreamRfp` mutation."""
type UpdateFundingStreamRfpPayload {
  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `FundingStreamRfp`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """The `FundingStreamRfp` that was updated by this mutation."""
  fundingStreamRfp: FundingStreamRfp

  """An edge for our `FundingStreamRfp`. May be used by Relay 1."""
  fundingStreamRfpEdge(
    """The method to use when ordering `FundingStreamRfp`."""
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateFundingStreamRfpProjectStatusByRowId` mutation.
"""
input UpdateFundingStreamRfpProjectStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamRfpProjectStatus` being updated.
  """
  fundingStreamRfpProjectStatusPatch: FundingStreamRfpProjectStatusPatch!

  """Primary key for funding_stream_rfp_project_status table"""
  rowId: Int!
}

"""All input for the `updateFundingStreamRfpProjectStatus` mutation."""
input UpdateFundingStreamRfpProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamRfpProjectStatus` being updated.
  """
  fundingStreamRfpProjectStatusPatch: FundingStreamRfpProjectStatusPatch!

  """
  The globally unique `ID` which will identify a single `FundingStreamRfpProjectStatus` to be updated.
  """
  id: ID!
}

"""The output of our update `FundingStreamRfpProjectStatus` mutation."""
type UpdateFundingStreamRfpProjectStatusPayload {
  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfpProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `FundingStreamRfp` that is related to this `FundingStreamRfpProjectStatus`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """The `FundingStreamRfpProjectStatus` that was updated by this mutation."""
  fundingStreamRfpProjectStatus: FundingStreamRfpProjectStatus

  """
  An edge for our `FundingStreamRfpProjectStatus`. May be used by Relay 1.
  """
  fundingStreamRfpProjectStatusEdge(
    """The method to use when ordering `FundingStreamRfpProjectStatus`."""
    orderBy: [FundingStreamRfpProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpProjectStatusesEdge

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamRfpProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMilestoneReportByRowId` mutation."""
input UpdateMilestoneReportByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MilestoneReport` being updated.
  """
  milestoneReportPatch: MilestoneReportPatch!

  """Unique ID for the milestone_report"""
  rowId: Int!
}

"""All input for the `updateMilestoneReport` mutation."""
input UpdateMilestoneReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MilestoneReport` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `MilestoneReport` being updated.
  """
  milestoneReportPatch: MilestoneReportPatch!
}

"""The output of our update `MilestoneReport` mutation."""
type UpdateMilestoneReportPayload {
  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `MilestoneReport`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MilestoneReport` that was updated by this mutation."""
  milestoneReport: MilestoneReport

  """An edge for our `MilestoneReport`. May be used by Relay 1."""
  milestoneReportEdge(
    """The method to use when ordering `MilestoneReport`."""
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `MilestoneReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement
}

"""All input for the `updateOrCreateUserFromSession` mutation."""
input UpdateOrCreateUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `updateOrCreateUserFromSession` mutation."""
type UpdateOrCreateUserFromSessionPayload {
  cifUser: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `CifUser`."""
  cifUserByUpdatedBy: CifUser

  """An edge for our `CifUser`. May be used by Relay 1."""
  cifUserEdge(
    """The method to use when ordering `CifUser`."""
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectContactByRowId` mutation."""
input UpdateProjectContactByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectContact` being updated.
  """
  projectContactPatch: ProjectContactPatch!

  """Unique ID for the project contact record"""
  rowId: Int!
}

"""All input for the `updateProjectContact` mutation."""
input UpdateProjectContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectContact` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectContact` being updated.
  """
  projectContactPatch: ProjectContactPatch!
}

"""The output of our update `ProjectContact` mutation."""
type UpdateProjectContactPayload {
  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectContact`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Contact` that is related to this `ProjectContact`."""
  contactByContactId: Contact

  """Reads a single `Project` that is related to this `ProjectContact`."""
  projectByProjectId: Project

  """The `ProjectContact` that was updated by this mutation."""
  projectContact: ProjectContact

  """An edge for our `ProjectContact`. May be used by Relay 1."""
  projectContactEdge(
    """The method to use when ordering `ProjectContact`."""
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectManagerByRowId` mutation."""
input UpdateProjectManagerByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectManager` being updated.
  """
  projectManagerPatch: ProjectManagerPatch!

  """Unique ID for the project manager record"""
  rowId: Int!
}

"""All input for the `updateProjectManager` mutation."""
input UpdateProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManager` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectManager` being updated.
  """
  projectManagerPatch: ProjectManagerPatch!
}

"""All input for the `updateProjectManagerLabelByLabel` mutation."""
input UpdateProjectManagerLabelByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The label that project managers can be assigned to a project as"""
  label: String!

  """
  An object where the defined keys will be set on the `ProjectManagerLabel` being updated.
  """
  projectManagerLabelPatch: ProjectManagerLabelPatch!
}

"""All input for the `updateProjectManagerLabelByRowId` mutation."""
input UpdateProjectManagerLabelByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectManagerLabel` being updated.
  """
  projectManagerLabelPatch: ProjectManagerLabelPatch!

  """Unique ID for the project_manager_label record"""
  rowId: Int!
}

"""All input for the `updateProjectManagerLabel` mutation."""
input UpdateProjectManagerLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManagerLabel` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectManagerLabel` being updated.
  """
  projectManagerLabelPatch: ProjectManagerLabelPatch!
}

"""The output of our update `ProjectManagerLabel` mutation."""
type UpdateProjectManagerLabelPayload {
  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectManagerLabel` that was updated by this mutation."""
  projectManagerLabel: ProjectManagerLabel

  """An edge for our `ProjectManagerLabel`. May be used by Relay 1."""
  projectManagerLabelEdge(
    """The method to use when ordering `ProjectManagerLabel`."""
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `ProjectManager` mutation."""
type UpdateProjectManagerPayload {
  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCifUserId: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectManager`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectManager`."""
  projectByProjectId: Project

  """The `ProjectManager` that was updated by this mutation."""
  projectManager: ProjectManager

  """An edge for our `ProjectManager`. May be used by Relay 1."""
  projectManagerEdge(
    """The method to use when ordering `ProjectManager`."""
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `updateProjectRevisionAmendmentTypeByRowId` mutation.
"""
input UpdateProjectRevisionAmendmentTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectRevisionAmendmentType` being updated.
  """
  projectRevisionAmendmentTypePatch: ProjectRevisionAmendmentTypePatch!

  """Unique ID for the project revision amendment type."""
  rowId: Int!
}

"""All input for the `updateProjectRevisionAmendmentType` mutation."""
input UpdateProjectRevisionAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevisionAmendmentType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectRevisionAmendmentType` being updated.
  """
  projectRevisionAmendmentTypePatch: ProjectRevisionAmendmentTypePatch!
}

"""The output of our update `ProjectRevisionAmendmentType` mutation."""
type UpdateProjectRevisionAmendmentTypePayload {
  """
  Reads a single `AmendmentType` that is related to this `ProjectRevisionAmendmentType`.
  """
  amendmentTypeByAmendmentType: AmendmentType

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectRevisionAmendmentType` that was updated by this mutation."""
  projectRevisionAmendmentType: ProjectRevisionAmendmentType

  """
  An edge for our `ProjectRevisionAmendmentType`. May be used by Relay 1.
  """
  projectRevisionAmendmentTypeEdge(
    """The method to use when ordering `ProjectRevisionAmendmentType`."""
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesEdge

  """
  Reads a single `ProjectRevision` that is related to this `ProjectRevisionAmendmentType`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectRevisionByRowId` mutation."""
input UpdateProjectRevisionByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectRevision` being updated.
  """
  projectRevisionPatch: ProjectRevisionPatch!

  """Unique ID for the project revision"""
  rowId: Int!
}

"""All input for the `updateProjectRevision` mutation."""
input UpdateProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevision` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectRevision` being updated.
  """
  projectRevisionPatch: ProjectRevisionPatch!
}

"""The output of our update `ProjectRevision` mutation."""
type UpdateProjectRevisionPayload {
  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectRevision`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Project` that is related to this `ProjectRevision`."""
  projectByProjectId: Project

  """The `ProjectRevision` that was updated by this mutation."""
  projectRevision: ProjectRevision

  """An edge for our `ProjectRevision`. May be used by Relay 1."""
  projectRevisionEdge(
    """The method to use when ordering `ProjectRevision`."""
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType
}

"""All input for the `updateProjectStatusByRowId` mutation."""
input UpdateProjectStatusByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectStatus` being updated.
  """
  projectStatusPatch: ProjectStatusPatch!

  """Unique ID for the project_status"""
  rowId: Int!
}

"""All input for the `updateProjectStatus` mutation."""
input UpdateProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectStatus` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectStatus` being updated.
  """
  projectStatusPatch: ProjectStatusPatch!
}

"""The output of our update `ProjectStatus` mutation."""
type UpdateProjectStatusPayload {
  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectStatus` that was updated by this mutation."""
  projectStatus: ProjectStatus

  """An edge for our `ProjectStatus`. May be used by Relay 1."""
  projectStatusEdge(
    """The method to use when ordering `ProjectStatus`."""
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProjectTypeByName` mutation."""
input UpdateProjectTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the project_type"""
  name: String!

  """
  An object where the defined keys will be set on the `ProjectType` being updated.
  """
  projectTypePatch: ProjectTypePatch!
}

"""All input for the `updateProjectTypeByRowId` mutation."""
input UpdateProjectTypeByRowIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectType` being updated.
  """
  projectTypePatch: ProjectTypePatch!

  """Unique ID for the project_type"""
  rowId: Int!
}

"""All input for the `updateProjectType` mutation."""
input UpdateProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ProjectType` being updated.
  """
  projectTypePatch: ProjectTypePatch!
}

"""The output of our update `ProjectType` mutation."""
type UpdateProjectTypePayload {
  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ProjectType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProjectType` that was updated by this mutation."""
  projectType: ProjectType

  """An edge for our `ProjectType`. May be used by Relay 1."""
  projectTypeEdge(
    """The method to use when ordering `ProjectType`."""
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateReportTypeByName` mutation."""
input UpdateReportTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the report type as the primary key"""
  name: String!

  """
  An object where the defined keys will be set on the `ReportType` being updated.
  """
  reportTypePatch: ReportTypePatch!
}

"""All input for the `updateReportType` mutation."""
input UpdateReportTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `ReportType` being updated.
  """
  reportTypePatch: ReportTypePatch!
}

"""The output of our update `ReportType` mutation."""
type UpdateReportTypePayload {
  """Reads a single `CifUser` that is related to this `ReportType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `ReportType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `ReportType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ReportType` that was updated by this mutation."""
  reportType: ReportType

  """An edge for our `ReportType`. May be used by Relay 1."""
  reportTypeEdge(
    """The method to use when ordering `ReportType`."""
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesEdge
}

"""All input for the `updateRevisionStatusByName` mutation."""
input UpdateRevisionStatusByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the amendment status as the primary key"""
  name: String!

  """
  An object where the defined keys will be set on the `RevisionStatus` being updated.
  """
  revisionStatusPatch: RevisionStatusPatch!
}

"""All input for the `updateRevisionStatus` mutation."""
input UpdateRevisionStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RevisionStatus` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `RevisionStatus` being updated.
  """
  revisionStatusPatch: RevisionStatusPatch!
}

"""The output of our update `RevisionStatus` mutation."""
type UpdateRevisionStatusPayload {
  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionStatus`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RevisionStatus` that was updated by this mutation."""
  revisionStatus: RevisionStatus

  """An edge for our `RevisionStatus`. May be used by Relay 1."""
  revisionStatusEdge(
    """The method to use when ordering `RevisionStatus`."""
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesEdge
}

"""All input for the `updateRevisionTypeByType` mutation."""
input UpdateRevisionTypeByTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RevisionType` being updated.
  """
  revisionTypePatch: RevisionTypePatch!

  """The type of the revision type as the primary key"""
  type: String!
}

"""All input for the `updateRevisionType` mutation."""
input UpdateRevisionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RevisionType` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `RevisionType` being updated.
  """
  revisionTypePatch: RevisionTypePatch!
}

"""The output of our update `RevisionType` mutation."""
type UpdateRevisionTypePayload {
  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `RevisionType`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `RevisionType` that was updated by this mutation."""
  revisionType: RevisionType

  """An edge for our `RevisionType`. May be used by Relay 1."""
  revisionTypeEdge(
    """The method to use when ordering `RevisionType`."""
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesEdge
}

"""All input for the `updateSectorBySectorName` mutation."""
input UpdateSectorBySectorNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The name of the sector as the primary key"""
  sectorName: String!

  """
  An object where the defined keys will be set on the `Sector` being updated.
  """
  sectorPatch: SectorPatch!
}

"""All input for the `updateSector` mutation."""
input UpdateSectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sector` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Sector` being updated.
  """
  sectorPatch: SectorPatch!
}

"""The output of our update `Sector` mutation."""
type UpdateSectorPayload {
  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByArchivedBy: CifUser

  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByCreatedBy: CifUser

  """Reads a single `CifUser` that is related to this `Sector`."""
  cifUserByUpdatedBy: CifUser

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Sector` that was updated by this mutation."""
  sector: Sector

  """An edge for our `Sector`. May be used by Relay 1."""
  sectorEdge(
    """The method to use when ordering `Sector`."""
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsEdge
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
