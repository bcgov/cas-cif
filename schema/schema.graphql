"""
The root query type which gives access points into the data universe.
"""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Fetches an object given its globally unique `ID`.
  """
  node(
    """
    The globally unique `ID`.
    """
    nodeId: ID!
  ): Node

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  allAdditionalFundingSources(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSource`.
    """
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition
  ): AdditionalFundingSourcesConnection

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  allAdditionalFundingSourceStatuses(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSourceStatus`.
    """
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition
  ): AdditionalFundingSourceStatusesConnection

  """
  Reads and enables pagination through a set of `AmendmentType`.
  """
  allAmendmentTypes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AmendmentType`.
    """
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition
  ): AmendmentTypesConnection

  """
  Reads and enables pagination through a set of `Attachment`.
  """
  allAttachments(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Attachment`.
    """
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection

  """
  Reads and enables pagination through a set of `ChangeStatus`.
  """
  allChangeStatuses(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ChangeStatus`.
    """
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition
  ): ChangeStatusesConnection

  """
  Reads and enables pagination through a set of `CifUser`.
  """
  allCifUsers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CifUser`.
    """
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition
  ): CifUsersConnection

  """
  Reads and enables pagination through a set of `Contact`.
  """
  allContacts(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Contact`.
    """
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition
  ): ContactsConnection

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  allEmissionIntensityPaymentPercents(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EmissionIntensityPaymentPercent`.
    """
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition
  ): EmissionIntensityPaymentPercentsConnection

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  allEmissionIntensityReports(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EmissionIntensityReport`.
    """
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition
  ): EmissionIntensityReportsConnection

  """
  Reads and enables pagination through a set of `Form`.
  """
  allForms(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Form`.
    """
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): FormsConnection

  """
  Reads and enables pagination through a set of `FormChange`.
  """
  allFormChanges(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition
  ): FormChangesConnection

  """
  Reads and enables pagination through a set of `FundingParameter`.
  """
  allFundingParameters(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingParameter`.
    """
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition
  ): FundingParametersConnection

  """
  Reads and enables pagination through a set of `FundingStream`.
  """
  allFundingStreams(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStream`.
    """
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition
  ): FundingStreamsConnection

  """
  Reads and enables pagination through a set of `FundingStreamProjectStatus`.
  """
  allFundingStreamProjectStatuses(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamProjectStatus`.
    """
    orderBy: [FundingStreamProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamProjectStatusCondition
  ): FundingStreamProjectStatusesConnection

  """
  Reads and enables pagination through a set of `FundingStreamRfp`.
  """
  allFundingStreamRfps(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamRfp`.
    """
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition
  ): FundingStreamRfpsConnection

  """
  Reads and enables pagination through a set of `MilestoneReport`.
  """
  allMilestoneReports(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `MilestoneReport`.
    """
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition
  ): MilestoneReportsConnection

  """
  Reads and enables pagination through a set of `Operator`.
  """
  allOperators(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Operator`.
    """
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition
  ): OperatorsConnection

  """
  Reads and enables pagination through a set of `Payment`.
  """
  allPayments(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Payment`.
    """
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection

  """
  Reads and enables pagination through a set of `Project`.
  """
  allProjects(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection

  """
  Reads and enables pagination through a set of `ProjectContact`.
  """
  allProjectContacts(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectContact`.
    """
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition
  ): ProjectContactsConnection

  """
  Reads and enables pagination through a set of `ProjectManager`.
  """
  allProjectManagers(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition
  ): ProjectManagersConnection

  """
  Reads and enables pagination through a set of `ProjectManagerLabel`.
  """
  allProjectManagerLabels(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManagerLabel`.
    """
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition
  ): ProjectManagerLabelsConnection

  """
  Reads and enables pagination through a set of `ProjectRevision`.
  """
  allProjectRevisions(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition
  ): ProjectRevisionsConnection

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  allProjectRevisionAmendmentTypes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevisionAmendmentType`.
    """
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition
  ): ProjectRevisionAmendmentTypesConnection

  """
  Reads and enables pagination through a set of `ProjectStatus`.
  """
  allProjectStatuses(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectStatus`.
    """
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition
  ): ProjectStatusesConnection

  """
  Reads and enables pagination through a set of `ProjectType`.
  """
  allProjectTypes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectType`.
    """
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition
  ): ProjectTypesConnection

  """
  Reads and enables pagination through a set of `ReportType`.
  """
  allReportTypes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportType`.
    """
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition
  ): ReportTypesConnection

  """
  Reads and enables pagination through a set of `ReportingRequirement`.
  """
  allReportingRequirements(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportingRequirement`.
    """
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition
  ): ReportingRequirementsConnection

  """
  Reads and enables pagination through a set of `RevisionStatus`.
  """
  allRevisionStatuses(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `RevisionStatus`.
    """
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition
  ): RevisionStatusesConnection

  """
  Reads and enables pagination through a set of `RevisionType`.
  """
  allRevisionTypes(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `RevisionType`.
    """
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition
  ): RevisionTypesConnection

  """
  Reads and enables pagination through a set of `Sector`.
  """
  allSectors(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Sector`.
    """
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition
  ): SectorsConnection
  additionalFundingSourceById(id: Int!): AdditionalFundingSource
  additionalFundingSourceStatusByStatusName(
    statusName: String!
  ): AdditionalFundingSourceStatus
  amendmentTypeByName(name: String!): AmendmentType
  attachmentById(id: Int!): Attachment
  changeStatusByStatus(status: String!): ChangeStatus
  cifUserById(id: Int!): CifUser
  contactById(id: Int!): Contact
  contactByEmail(email: String!): Contact
  emissionIntensityPaymentPercentById(id: Int!): EmissionIntensityPaymentPercent
  emissionIntensityPaymentPercentByMaxEmissionIntensityPerformance(
    maxEmissionIntensityPerformance: BigFloat!
  ): EmissionIntensityPaymentPercent
  emissionIntensityReportById(id: Int!): EmissionIntensityReport
  formById(id: Int!): Form
  formBySlug(slug: String!): Form
  formChangeById(id: Int!): FormChange
  fundingParameterById(id: Int!): FundingParameter
  fundingStreamById(id: Int!): FundingStream
  fundingStreamProjectStatusById(id: Int!): FundingStreamProjectStatus
  fundingStreamRfpById(id: Int!): FundingStreamRfp
  milestoneReportById(id: Int!): MilestoneReport
  operatorById(id: Int!): Operator
  operatorBySwrsOrganisationId(swrsOrganisationId: Int!): Operator
  paymentById(id: Int!): Payment
  projectById(id: Int!): Project
  projectByProposalReference(proposalReference: String!): Project
  projectContactById(id: Int!): ProjectContact
  projectManagerById(id: Int!): ProjectManager
  projectManagerLabelById(id: Int!): ProjectManagerLabel
  projectManagerLabelByLabel(label: String!): ProjectManagerLabel
  projectRevisionById(id: Int!): ProjectRevision
  projectRevisionAmendmentTypeById(id: Int!): ProjectRevisionAmendmentType
  projectStatusById(id: Int!): ProjectStatus
  projectTypeById(id: Int!): ProjectType
  projectTypeByName(name: String!): ProjectType
  reportTypeByName(name: String!): ReportType
  reportingRequirementById(id: Int!): ReportingRequirement
  revisionStatusByName(name: String!): RevisionStatus
  revisionTypeByType(type: String!): RevisionType
  sectorBySectorName(sectorName: String!): Sector

  """
  A utility function to return a set of statuses for form_change records relating to a single revision
  """
  getFormStatus(
    projectRevisionId: Int
    formDataTableName: String
    jsonMatcher: JSON

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor
  ): GetFormStatusConnection

  """
  returns a form_change for a table in the pending state for the current user, i.e. allows to resume the creation of any table row
  """
  pendingNewFormChangeForTable(tableName: String): FormChange

  """
  returns a project_revision for a new project in the pending state for the current user, i.e. allows to resume a project creation
  """
  pendingNewProjectRevision: ProjectRevision
  session: KeycloakJwt

  """
  Reads a single `AdditionalFundingSource` using its globally unique `ID`.
  """
  additionalFundingSource(
    """
    The globally unique `ID` to be used in selecting a single `AdditionalFundingSource`.
    """
    nodeId: ID!
  ): AdditionalFundingSource

  """
  Reads a single `AdditionalFundingSourceStatus` using its globally unique `ID`.
  """
  additionalFundingSourceStatus(
    """
    The globally unique `ID` to be used in selecting a single `AdditionalFundingSourceStatus`.
    """
    nodeId: ID!
  ): AdditionalFundingSourceStatus

  """
  Reads a single `AmendmentType` using its globally unique `ID`.
  """
  amendmentType(
    """
    The globally unique `ID` to be used in selecting a single `AmendmentType`.
    """
    nodeId: ID!
  ): AmendmentType

  """
  Reads a single `Attachment` using its globally unique `ID`.
  """
  attachment(
    """
    The globally unique `ID` to be used in selecting a single `Attachment`.
    """
    nodeId: ID!
  ): Attachment

  """
  Reads a single `ChangeStatus` using its globally unique `ID`.
  """
  changeStatus(
    """
    The globally unique `ID` to be used in selecting a single `ChangeStatus`.
    """
    nodeId: ID!
  ): ChangeStatus

  """
  Reads a single `CifUser` using its globally unique `ID`.
  """
  cifUser(
    """
    The globally unique `ID` to be used in selecting a single `CifUser`.
    """
    nodeId: ID!
  ): CifUser

  """
  Reads a single `Contact` using its globally unique `ID`.
  """
  contact(
    """
    The globally unique `ID` to be used in selecting a single `Contact`.
    """
    nodeId: ID!
  ): Contact

  """
  Reads a single `EmissionIntensityPaymentPercent` using its globally unique `ID`.
  """
  emissionIntensityPaymentPercent(
    """
    The globally unique `ID` to be used in selecting a single `EmissionIntensityPaymentPercent`.
    """
    nodeId: ID!
  ): EmissionIntensityPaymentPercent

  """
  Reads a single `EmissionIntensityReport` using its globally unique `ID`.
  """
  emissionIntensityReport(
    """
    The globally unique `ID` to be used in selecting a single `EmissionIntensityReport`.
    """
    nodeId: ID!
  ): EmissionIntensityReport

  """
  Reads a single `Form` using its globally unique `ID`.
  """
  form(
    """
    The globally unique `ID` to be used in selecting a single `Form`.
    """
    nodeId: ID!
  ): Form

  """
  Reads a single `FormChange` using its globally unique `ID`.
  """
  formChange(
    """
    The globally unique `ID` to be used in selecting a single `FormChange`.
    """
    nodeId: ID!
  ): FormChange

  """
  Reads a single `FundingParameter` using its globally unique `ID`.
  """
  fundingParameter(
    """
    The globally unique `ID` to be used in selecting a single `FundingParameter`.
    """
    nodeId: ID!
  ): FundingParameter

  """
  Reads a single `FundingStream` using its globally unique `ID`.
  """
  fundingStream(
    """
    The globally unique `ID` to be used in selecting a single `FundingStream`.
    """
    nodeId: ID!
  ): FundingStream

  """
  Reads a single `FundingStreamProjectStatus` using its globally unique `ID`.
  """
  fundingStreamProjectStatus(
    """
    The globally unique `ID` to be used in selecting a single `FundingStreamProjectStatus`.
    """
    nodeId: ID!
  ): FundingStreamProjectStatus

  """
  Reads a single `FundingStreamRfp` using its globally unique `ID`.
  """
  fundingStreamRfp(
    """
    The globally unique `ID` to be used in selecting a single `FundingStreamRfp`.
    """
    nodeId: ID!
  ): FundingStreamRfp

  """
  Reads a single `MilestoneReport` using its globally unique `ID`.
  """
  milestoneReport(
    """
    The globally unique `ID` to be used in selecting a single `MilestoneReport`.
    """
    nodeId: ID!
  ): MilestoneReport

  """
  Reads a single `Operator` using its globally unique `ID`.
  """
  operator(
    """
    The globally unique `ID` to be used in selecting a single `Operator`.
    """
    nodeId: ID!
  ): Operator

  """
  Reads a single `Payment` using its globally unique `ID`.
  """
  payment(
    """
    The globally unique `ID` to be used in selecting a single `Payment`.
    """
    nodeId: ID!
  ): Payment

  """
  Reads a single `Project` using its globally unique `ID`.
  """
  project(
    """
    The globally unique `ID` to be used in selecting a single `Project`.
    """
    nodeId: ID!
  ): Project

  """
  Reads a single `ProjectContact` using its globally unique `ID`.
  """
  projectContact(
    """
    The globally unique `ID` to be used in selecting a single `ProjectContact`.
    """
    nodeId: ID!
  ): ProjectContact

  """
  Reads a single `ProjectManager` using its globally unique `ID`.
  """
  projectManager(
    """
    The globally unique `ID` to be used in selecting a single `ProjectManager`.
    """
    nodeId: ID!
  ): ProjectManager

  """
  Reads a single `ProjectManagerLabel` using its globally unique `ID`.
  """
  projectManagerLabel(
    """
    The globally unique `ID` to be used in selecting a single `ProjectManagerLabel`.
    """
    nodeId: ID!
  ): ProjectManagerLabel

  """
  Reads a single `ProjectRevision` using its globally unique `ID`.
  """
  projectRevision(
    """
    The globally unique `ID` to be used in selecting a single `ProjectRevision`.
    """
    nodeId: ID!
  ): ProjectRevision

  """
  Reads a single `ProjectRevisionAmendmentType` using its globally unique `ID`.
  """
  projectRevisionAmendmentType(
    """
    The globally unique `ID` to be used in selecting a single `ProjectRevisionAmendmentType`.
    """
    nodeId: ID!
  ): ProjectRevisionAmendmentType

  """
  Reads a single `ProjectStatus` using its globally unique `ID`.
  """
  projectStatus(
    """
    The globally unique `ID` to be used in selecting a single `ProjectStatus`.
    """
    nodeId: ID!
  ): ProjectStatus

  """
  Reads a single `ProjectType` using its globally unique `ID`.
  """
  projectType(
    """
    The globally unique `ID` to be used in selecting a single `ProjectType`.
    """
    nodeId: ID!
  ): ProjectType

  """
  Reads a single `ReportType` using its globally unique `ID`.
  """
  reportType(
    """
    The globally unique `ID` to be used in selecting a single `ReportType`.
    """
    nodeId: ID!
  ): ReportType

  """
  Reads a single `ReportingRequirement` using its globally unique `ID`.
  """
  reportingRequirement(
    """
    The globally unique `ID` to be used in selecting a single `ReportingRequirement`.
    """
    nodeId: ID!
  ): ReportingRequirement

  """
  Reads a single `RevisionStatus` using its globally unique `ID`.
  """
  revisionStatus(
    """
    The globally unique `ID` to be used in selecting a single `RevisionStatus`.
    """
    nodeId: ID!
  ): RevisionStatus

  """
  Reads a single `RevisionType` using its globally unique `ID`.
  """
  revisionType(
    """
    The globally unique `ID` to be used in selecting a single `RevisionType`.
    """
    nodeId: ID!
  ): RevisionType

  """
  Reads a single `Sector` using its globally unique `ID`.
  """
  sector(
    """
    The globally unique `ID` to be used in selecting a single `Sector`.
    """
    nodeId: ID!
  ): Sector
}

"""
An object with a globally unique `ID`.
"""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""
A connection to a list of `AdditionalFundingSource` values.
"""
type AdditionalFundingSourcesConnection {
  """
  A list of `AdditionalFundingSource` objects.
  """
  nodes: [AdditionalFundingSource]!

  """
  A list of edges which contains the `AdditionalFundingSource` and cursor to aid in pagination.
  """
  edges: [AdditionalFundingSourcesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `AdditionalFundingSource` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing information about funding provided through sources other than CIF and the proponent; often needed for program review and data request purposes.
"""
type AdditionalFundingSource implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the additional funding source
  """
  id: Int!

  """
  Foreign key to the project
  """
  projectId: Int!

  """
  The status of the additional funding source request(e.g. awaiting approval, approved, denied)
  """
  status: String

  """
  The source of the additional funding source
  """
  source: String

  """
  The amount of the additional funding source
  """
  amount: BigFloat

  """
  The zero-based index of the source in the project
  """
  sourceIndex: Int!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `Project` that is related to this `AdditionalFundingSource`.
  """
  projectByProjectId: Project

  """
  Reads a single `AdditionalFundingSourceStatus` that is related to this `AdditionalFundingSource`.
  """
  additionalFundingSourceStatusByStatus: AdditionalFundingSourceStatus

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByArchivedBy: CifUser
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
Table containing information about a CIF Project
"""
type Project implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the project
  """
  id: Int!

  """
  Foreign key references the cif.operator table
  """
  operatorId: Int!

  """
  The id of the funding_stream_rfp (cif.funding_stream_rfp.id) that was selected when creating the project
  """
  fundingStreamRfpId: Int!

  """
  The id of the project_status (cif.project_status.id) that the project is currently in
  """
  projectStatusId: Int!

  """
  Unique identifier internal to the CIF team. As of the 2022 RFPs, the current format is YYYY-RFP-0-ABCD-000. Projects for the 2019 and 2020 RFPs may use a different format.
  """
  proposalReference: String!

  """
  Summary of the project
  """
  summary: String!

  """
  The name of the project
  """
  projectName: String!

  """
  The total amount of funding requested for the project
  """
  totalFundingRequest: BigFloat

  """
  The industry sector this project relates to
  """
  sectorName: String

  """
  Any additional information about this project in reference to the industry sector such as a sub-sector
  """
  additionalSectorInformation: String

  """
  General comments pertaining to the project
  """
  comments: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  The score of the project after evaluation by the CIF team
  """
  score: BigFloat

  """
  The type of the project (e.g. fuel switching)
  """
  projectType: String

  """
  The contract number of the project
  """
  contractNumber: String

  """
  Reads a single `Operator` that is related to this `Project`.
  """
  operatorByOperatorId: Operator

  """
  Reads a single `FundingStreamRfp` that is related to this `Project`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """
  Reads a single `ProjectStatus` that is related to this `Project`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `Sector` that is related to this `Project`.
  """
  sectorBySectorName: Sector

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `ProjectType` that is related to this `Project`.
  """
  projectTypeByProjectType: ProjectType

  """
  Reads and enables pagination through a set of `ProjectRevision`.
  """
  projectRevisionsByProjectId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition
  ): ProjectRevisionsConnection!

  """
  Reads and enables pagination through a set of `Attachment`.
  """
  attachmentsByProjectId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Attachment`.
    """
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """
  Reads and enables pagination through a set of `ProjectContact`.
  """
  projectContactsByProjectId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectContact`.
    """
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition
  ): ProjectContactsConnection!

  """
  Reads and enables pagination through a set of `ProjectManager`.
  """
  projectManagersByProjectId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition
  ): ProjectManagersConnection!

  """
  Reads and enables pagination through a set of `ReportingRequirement`.
  """
  reportingRequirementsByProjectId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportingRequirement`.
    """
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition
  ): ReportingRequirementsConnection!

  """
  Reads and enables pagination through a set of `FundingParameter`.
  """
  fundingParametersByProjectId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingParameter`.
    """
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition
  ): FundingParametersConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByProjectId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSource`.
    """
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition
  ): AdditionalFundingSourcesConnection!

  """
  Returns the latest project revision with a change_status of committed for the given project
  """
  latestCommittedProjectRevision: ProjectRevision

  """
  Returns the pending project revision for the project
  """
  pendingProjectRevision: ProjectRevision

  """
  Returns a concatenated list of the project managers (used for filtering the projects table)
  """
  primaryManagers: String
}

"""
Table containing information about a CIF operator
"""
type Operator implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the operator
  """
  id: Int!

  """
  The organisation ID from the ggircs database as assigned by the federal Single Window Reporting System
  """
  swrsOrganisationId: Int

  """
  The legal name of this operator
  """
  legalName: String

  """
  The trade name of this operator
  """
  tradeName: String

  """
  The legal name of this operator as last imported from SWRS
  """
  swrsLegalName: String

  """
  The trade name of this operator as last imported from SWRS
  """
  swrsTradeName: String

  """
  The bc registry id assigned to this operator
  """
  bcRegistryId: String

  """
  The operator code is a set of characters that uniquely identifies the operator and is used in the cif.project table as part of the propsal_reference
  """
  operatorCode: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `Project`.
  """
  projectsByOperatorId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!

  """
  Returns the pending form change editing the operator created by the current user, if it exists.
  """
  pendingFormChange: FormChange
}

"""
Table containing information about the application's users
"""
type CifUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the user
  """
  id: Int!

  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String!

  """
  User's first name
  """
  givenName: String

  """
  User's last name
  """
  familyName: String

  """
  User's email address
  """
  emailAddress: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Boolean value determines whether a legacy user can be updated. Legacy users may be updated only once.
  """
  allowSubUpdate: Boolean!

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `CifUser`.
  """
  cifUsersByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CifUser`.
    """
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition
  ): CifUsersConnection!

  """
  Reads and enables pagination through a set of `CifUser`.
  """
  cifUsersByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CifUser`.
    """
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition
  ): CifUsersConnection!

  """
  Reads and enables pagination through a set of `CifUser`.
  """
  cifUsersByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `CifUser`.
    """
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CifUserCondition
  ): CifUsersConnection!

  """
  Reads and enables pagination through a set of `Sector`.
  """
  sectorsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Sector`.
    """
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition
  ): SectorsConnection!

  """
  Reads and enables pagination through a set of `Sector`.
  """
  sectorsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Sector`.
    """
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition
  ): SectorsConnection!

  """
  Reads and enables pagination through a set of `Sector`.
  """
  sectorsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Sector`.
    """
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SectorCondition
  ): SectorsConnection!

  """
  Reads and enables pagination through a set of `FundingStream`.
  """
  fundingStreamsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStream`.
    """
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition
  ): FundingStreamsConnection!

  """
  Reads and enables pagination through a set of `FundingStream`.
  """
  fundingStreamsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStream`.
    """
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition
  ): FundingStreamsConnection!

  """
  Reads and enables pagination through a set of `FundingStream`.
  """
  fundingStreamsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStream`.
    """
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamCondition
  ): FundingStreamsConnection!

  """
  Reads and enables pagination through a set of `FundingStreamRfp`.
  """
  fundingStreamRfpsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamRfp`.
    """
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition
  ): FundingStreamRfpsConnection!

  """
  Reads and enables pagination through a set of `FundingStreamRfp`.
  """
  fundingStreamRfpsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamRfp`.
    """
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition
  ): FundingStreamRfpsConnection!

  """
  Reads and enables pagination through a set of `FundingStreamRfp`.
  """
  fundingStreamRfpsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamRfp`.
    """
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition
  ): FundingStreamRfpsConnection!

  """
  Reads and enables pagination through a set of `ProjectStatus`.
  """
  projectStatusesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectStatus`.
    """
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition
  ): ProjectStatusesConnection!

  """
  Reads and enables pagination through a set of `ProjectStatus`.
  """
  projectStatusesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectStatus`.
    """
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition
  ): ProjectStatusesConnection!

  """
  Reads and enables pagination through a set of `ProjectStatus`.
  """
  projectStatusesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectStatus`.
    """
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectStatusCondition
  ): ProjectStatusesConnection!

  """
  Reads and enables pagination through a set of `Operator`.
  """
  operatorsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Operator`.
    """
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition
  ): OperatorsConnection!

  """
  Reads and enables pagination through a set of `Operator`.
  """
  operatorsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Operator`.
    """
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition
  ): OperatorsConnection!

  """
  Reads and enables pagination through a set of `Operator`.
  """
  operatorsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Operator`.
    """
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperatorCondition
  ): OperatorsConnection!

  """
  Reads and enables pagination through a set of `Project`.
  """
  projectsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!

  """
  Reads and enables pagination through a set of `Project`.
  """
  projectsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!

  """
  Reads and enables pagination through a set of `Project`.
  """
  projectsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!

  """
  Reads and enables pagination through a set of `ChangeStatus`.
  """
  changeStatusesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ChangeStatus`.
    """
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition
  ): ChangeStatusesConnection!

  """
  Reads and enables pagination through a set of `ChangeStatus`.
  """
  changeStatusesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ChangeStatus`.
    """
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition
  ): ChangeStatusesConnection!

  """
  Reads and enables pagination through a set of `ChangeStatus`.
  """
  changeStatusesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ChangeStatus`.
    """
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChangeStatusCondition
  ): ChangeStatusesConnection!

  """
  Reads and enables pagination through a set of `ProjectRevision`.
  """
  projectRevisionsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition
  ): ProjectRevisionsConnection!

  """
  Reads and enables pagination through a set of `ProjectRevision`.
  """
  projectRevisionsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition
  ): ProjectRevisionsConnection!

  """
  Reads and enables pagination through a set of `FormChange`.
  """
  formChangesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition
  ): FormChangesConnection!

  """
  Reads and enables pagination through a set of `FormChange`.
  """
  formChangesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition
  ): FormChangesConnection!

  """
  Reads and enables pagination through a set of `Attachment`.
  """
  attachmentsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Attachment`.
    """
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """
  Reads and enables pagination through a set of `Attachment`.
  """
  attachmentsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Attachment`.
    """
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """
  Reads and enables pagination through a set of `Attachment`.
  """
  attachmentsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Attachment`.
    """
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """
  Reads and enables pagination through a set of `Contact`.
  """
  contactsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Contact`.
    """
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition
  ): ContactsConnection!

  """
  Reads and enables pagination through a set of `Contact`.
  """
  contactsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Contact`.
    """
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition
  ): ContactsConnection!

  """
  Reads and enables pagination through a set of `Contact`.
  """
  contactsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Contact`.
    """
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContactCondition
  ): ContactsConnection!

  """
  Reads and enables pagination through a set of `ProjectContact`.
  """
  projectContactsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectContact`.
    """
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition
  ): ProjectContactsConnection!

  """
  Reads and enables pagination through a set of `ProjectContact`.
  """
  projectContactsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectContact`.
    """
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition
  ): ProjectContactsConnection!

  """
  Reads and enables pagination through a set of `ProjectContact`.
  """
  projectContactsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectContact`.
    """
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition
  ): ProjectContactsConnection!

  """
  Reads and enables pagination through a set of `ProjectManagerLabel`.
  """
  projectManagerLabelsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManagerLabel`.
    """
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition
  ): ProjectManagerLabelsConnection!

  """
  Reads and enables pagination through a set of `ProjectManagerLabel`.
  """
  projectManagerLabelsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManagerLabel`.
    """
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition
  ): ProjectManagerLabelsConnection!

  """
  Reads and enables pagination through a set of `ProjectManagerLabel`.
  """
  projectManagerLabelsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManagerLabel`.
    """
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerLabelCondition
  ): ProjectManagerLabelsConnection!

  """
  Reads and enables pagination through a set of `ProjectManager`.
  """
  projectManagersByCifUserId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition
  ): ProjectManagersConnection!

  """
  Reads and enables pagination through a set of `ProjectManager`.
  """
  projectManagersByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition
  ): ProjectManagersConnection!

  """
  Reads and enables pagination through a set of `ProjectManager`.
  """
  projectManagersByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition
  ): ProjectManagersConnection!

  """
  Reads and enables pagination through a set of `ProjectManager`.
  """
  projectManagersByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition
  ): ProjectManagersConnection!

  """
  Reads and enables pagination through a set of `ReportType`.
  """
  reportTypesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportType`.
    """
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition
  ): ReportTypesConnection!

  """
  Reads and enables pagination through a set of `ReportType`.
  """
  reportTypesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportType`.
    """
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition
  ): ReportTypesConnection!

  """
  Reads and enables pagination through a set of `ReportType`.
  """
  reportTypesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportType`.
    """
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportTypeCondition
  ): ReportTypesConnection!

  """
  Reads and enables pagination through a set of `ReportingRequirement`.
  """
  reportingRequirementsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportingRequirement`.
    """
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition
  ): ReportingRequirementsConnection!

  """
  Reads and enables pagination through a set of `ReportingRequirement`.
  """
  reportingRequirementsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportingRequirement`.
    """
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition
  ): ReportingRequirementsConnection!

  """
  Reads and enables pagination through a set of `ReportingRequirement`.
  """
  reportingRequirementsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportingRequirement`.
    """
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition
  ): ReportingRequirementsConnection!

  """
  Reads and enables pagination through a set of `Payment`.
  """
  paymentsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Payment`.
    """
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection!

  """
  Reads and enables pagination through a set of `Payment`.
  """
  paymentsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Payment`.
    """
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection!

  """
  Reads and enables pagination through a set of `Payment`.
  """
  paymentsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Payment`.
    """
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EmissionIntensityPaymentPercent`.
    """
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition
  ): EmissionIntensityPaymentPercentsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EmissionIntensityPaymentPercent`.
    """
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition
  ): EmissionIntensityPaymentPercentsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityPaymentPercent`.
  """
  emissionIntensityPaymentPercentsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EmissionIntensityPaymentPercent`.
    """
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityPaymentPercentCondition
  ): EmissionIntensityPaymentPercentsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EmissionIntensityReport`.
    """
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition
  ): EmissionIntensityReportsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EmissionIntensityReport`.
    """
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition
  ): EmissionIntensityReportsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EmissionIntensityReport`.
    """
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition
  ): EmissionIntensityReportsConnection!

  """
  Reads and enables pagination through a set of `MilestoneReport`.
  """
  milestoneReportsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `MilestoneReport`.
    """
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition
  ): MilestoneReportsConnection!

  """
  Reads and enables pagination through a set of `MilestoneReport`.
  """
  milestoneReportsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `MilestoneReport`.
    """
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition
  ): MilestoneReportsConnection!

  """
  Reads and enables pagination through a set of `MilestoneReport`.
  """
  milestoneReportsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `MilestoneReport`.
    """
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition
  ): MilestoneReportsConnection!

  """
  Reads and enables pagination through a set of `FundingParameter`.
  """
  fundingParametersByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingParameter`.
    """
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition
  ): FundingParametersConnection!

  """
  Reads and enables pagination through a set of `FundingParameter`.
  """
  fundingParametersByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingParameter`.
    """
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition
  ): FundingParametersConnection!

  """
  Reads and enables pagination through a set of `FundingParameter`.
  """
  fundingParametersByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingParameter`.
    """
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingParameterCondition
  ): FundingParametersConnection!

  """
  Reads and enables pagination through a set of `ProjectType`.
  """
  projectTypesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectType`.
    """
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition
  ): ProjectTypesConnection!

  """
  Reads and enables pagination through a set of `ProjectType`.
  """
  projectTypesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectType`.
    """
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition
  ): ProjectTypesConnection!

  """
  Reads and enables pagination through a set of `ProjectType`.
  """
  projectTypesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectType`.
    """
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectTypeCondition
  ): ProjectTypesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSourceStatus`.
    """
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition
  ): AdditionalFundingSourceStatusesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSourceStatus`.
    """
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition
  ): AdditionalFundingSourceStatusesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSourceStatus`.
  """
  additionalFundingSourceStatusesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSourceStatus`.
    """
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceStatusCondition
  ): AdditionalFundingSourceStatusesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSource`.
    """
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition
  ): AdditionalFundingSourcesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSource`.
    """
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition
  ): AdditionalFundingSourcesConnection!

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSource`.
    """
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition
  ): AdditionalFundingSourcesConnection!

  """
  Reads and enables pagination through a set of `Form`.
  """
  formsByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Form`.
    """
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): FormsConnection!

  """
  Reads and enables pagination through a set of `Form`.
  """
  formsByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Form`.
    """
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): FormsConnection!

  """
  Reads and enables pagination through a set of `Form`.
  """
  formsByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Form`.
    """
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormCondition
  ): FormsConnection!

  """
  Reads and enables pagination through a set of `AmendmentType`.
  """
  amendmentTypesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AmendmentType`.
    """
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition
  ): AmendmentTypesConnection!

  """
  Reads and enables pagination through a set of `AmendmentType`.
  """
  amendmentTypesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AmendmentType`.
    """
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition
  ): AmendmentTypesConnection!

  """
  Reads and enables pagination through a set of `AmendmentType`.
  """
  amendmentTypesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AmendmentType`.
    """
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AmendmentTypeCondition
  ): AmendmentTypesConnection!

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevisionAmendmentType`.
    """
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition
  ): ProjectRevisionAmendmentTypesConnection!

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevisionAmendmentType`.
    """
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition
  ): ProjectRevisionAmendmentTypesConnection!

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevisionAmendmentType`.
    """
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition
  ): ProjectRevisionAmendmentTypesConnection!

  """
  Reads and enables pagination through a set of `RevisionType`.
  """
  revisionTypesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `RevisionType`.
    """
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition
  ): RevisionTypesConnection!

  """
  Reads and enables pagination through a set of `RevisionType`.
  """
  revisionTypesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `RevisionType`.
    """
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition
  ): RevisionTypesConnection!

  """
  Reads and enables pagination through a set of `RevisionType`.
  """
  revisionTypesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `RevisionType`.
    """
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionTypeCondition
  ): RevisionTypesConnection!

  """
  Reads and enables pagination through a set of `RevisionStatus`.
  """
  revisionStatusesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `RevisionStatus`.
    """
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition
  ): RevisionStatusesConnection!

  """
  Reads and enables pagination through a set of `RevisionStatus`.
  """
  revisionStatusesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `RevisionStatus`.
    """
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition
  ): RevisionStatusesConnection!

  """
  Reads and enables pagination through a set of `RevisionStatus`.
  """
  revisionStatusesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `RevisionStatus`.
    """
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionStatusCondition
  ): RevisionStatusesConnection!

  """
  Reads and enables pagination through a set of `FundingStreamProjectStatus`.
  """
  fundingStreamProjectStatusesByCreatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamProjectStatus`.
    """
    orderBy: [FundingStreamProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamProjectStatusCondition
  ): FundingStreamProjectStatusesConnection!

  """
  Reads and enables pagination through a set of `FundingStreamProjectStatus`.
  """
  fundingStreamProjectStatusesByUpdatedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamProjectStatus`.
    """
    orderBy: [FundingStreamProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamProjectStatusCondition
  ): FundingStreamProjectStatusesConnection!

  """
  Reads and enables pagination through a set of `FundingStreamProjectStatus`.
  """
  fundingStreamProjectStatusesByArchivedBy(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamProjectStatus`.
    """
    orderBy: [FundingStreamProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamProjectStatusCondition
  ): FundingStreamProjectStatusesConnection!

  """
  Displays a cif_user as: given_name family_name
  """
  fullName: String
}

"""
A connection to a list of `CifUser` values.
"""
type CifUsersConnection {
  """
  A list of `CifUser` objects.
  """
  nodes: [CifUser]!

  """
  A list of edges which contains the `CifUser` and cursor to aid in pagination.
  """
  edges: [CifUsersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `CifUser` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `CifUser` edge in the connection.
"""
type CifUsersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `CifUser` at the end of the edge.
  """
  node: CifUser
}

"""
A location in a connection that can be used for resuming pagination.
"""
scalar Cursor

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}

"""
Methods to use when ordering `CifUser`.
"""
enum CifUsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SESSION_SUB_ASC
  SESSION_SUB_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  EMAIL_ADDRESS_ASC
  EMAIL_ADDRESS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ALLOW_SUB_UPDATE_ASC
  ALLOW_SUB_UPDATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CifUser` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CifUserCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `sessionSub` field.
  """
  sessionSub: String

  """
  Checks for equality with the object’s `givenName` field.
  """
  givenName: String

  """
  Checks for equality with the object’s `familyName` field.
  """
  familyName: String

  """
  Checks for equality with the object’s `emailAddress` field.
  """
  emailAddress: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime

  """
  Checks for equality with the object’s `allowSubUpdate` field.
  """
  allowSubUpdate: Boolean
}

"""
A connection to a list of `Sector` values.
"""
type SectorsConnection {
  """
  A list of `Sector` objects.
  """
  nodes: [Sector]!

  """
  A list of edges which contains the `Sector` and cursor to aid in pagination.
  """
  edges: [SectorsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Sector` you could get from the connection.
  """
  totalCount: Int!
}

"""
Lookup table for industry sectors used by the CleanBC Industry Fund
"""
type Sector implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  The name of the sector as the primary key
  """
  sectorName: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `Project`.
  """
  projectsBySectorName(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!
}

"""
A connection to a list of `Project` values.
"""
type ProjectsConnection {
  """
  A list of `Project` objects.
  """
  nodes: [Project]!

  """
  A list of edges which contains the `Project` and cursor to aid in pagination.
  """
  edges: [ProjectsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Project` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Project` edge in the connection.
"""
type ProjectsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Project` at the end of the edge.
  """
  node: Project
}

"""
Methods to use when ordering `Project`.
"""
enum ProjectsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  OPERATOR_ID_ASC
  OPERATOR_ID_DESC
  FUNDING_STREAM_RFP_ID_ASC
  FUNDING_STREAM_RFP_ID_DESC
  PROJECT_STATUS_ID_ASC
  PROJECT_STATUS_ID_DESC
  PROPOSAL_REFERENCE_ASC
  PROPOSAL_REFERENCE_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  PROJECT_NAME_ASC
  PROJECT_NAME_DESC
  TOTAL_FUNDING_REQUEST_ASC
  TOTAL_FUNDING_REQUEST_DESC
  SECTOR_NAME_ASC
  SECTOR_NAME_DESC
  ADDITIONAL_SECTOR_INFORMATION_ASC
  ADDITIONAL_SECTOR_INFORMATION_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  SCORE_ASC
  SCORE_DESC
  PROJECT_TYPE_ASC
  PROJECT_TYPE_DESC
  CONTRACT_NUMBER_ASC
  CONTRACT_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Project` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `operatorId` field.
  """
  operatorId: Int

  """
  Checks for equality with the object’s `fundingStreamRfpId` field.
  """
  fundingStreamRfpId: Int

  """
  Checks for equality with the object’s `projectStatusId` field.
  """
  projectStatusId: Int

  """
  Checks for equality with the object’s `proposalReference` field.
  """
  proposalReference: String

  """
  Checks for equality with the object’s `summary` field.
  """
  summary: String

  """
  Checks for equality with the object’s `projectName` field.
  """
  projectName: String

  """
  Checks for equality with the object’s `totalFundingRequest` field.
  """
  totalFundingRequest: BigFloat

  """
  Checks for equality with the object’s `sectorName` field.
  """
  sectorName: String

  """
  Checks for equality with the object’s `additionalSectorInformation` field.
  """
  additionalSectorInformation: String

  """
  Checks for equality with the object’s `comments` field.
  """
  comments: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime

  """
  Checks for equality with the object’s `score` field.
  """
  score: BigFloat

  """
  Checks for equality with the object’s `projectType` field.
  """
  projectType: String

  """
  Checks for equality with the object’s `contractNumber` field.
  """
  contractNumber: String
}

"""
A `Sector` edge in the connection.
"""
type SectorsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Sector` at the end of the edge.
  """
  node: Sector
}

"""
Methods to use when ordering `Sector`.
"""
enum SectorsOrderBy {
  NATURAL
  SECTOR_NAME_ASC
  SECTOR_NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Sector` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SectorCondition {
  """
  Checks for equality with the object’s `sectorName` field.
  """
  sectorName: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `FundingStream` values.
"""
type FundingStreamsConnection {
  """
  A list of `FundingStream` objects.
  """
  nodes: [FundingStream]!

  """
  A list of edges which contains the `FundingStream` and cursor to aid in pagination.
  """
  edges: [FundingStreamsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStream` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing information about a CIF funding_stream
"""
type FundingStream implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the funding_stream
  """
  id: Int!

  """
  Shortname of the funding stream program
  """
  name: String!

  """
  Description of the funding_stream
  """
  description: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `FundingStreamRfp`.
  """
  fundingStreamRfpsByFundingStreamId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamRfp`.
    """
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamRfpCondition
  ): FundingStreamRfpsConnection!

  """
  Reads and enables pagination through a set of `FundingStreamProjectStatus`.
  """
  fundingStreamProjectStatusesByFundingStreamId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamProjectStatus`.
    """
    orderBy: [FundingStreamProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamProjectStatusCondition
  ): FundingStreamProjectStatusesConnection!
}

"""
A connection to a list of `FundingStreamRfp` values.
"""
type FundingStreamRfpsConnection {
  """
  A list of `FundingStreamRfp` objects.
  """
  nodes: [FundingStreamRfp]!

  """
  A list of edges which contains the `FundingStreamRfp` and cursor to aid in pagination.
  """
  edges: [FundingStreamRfpsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamRfp` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing information about a CIF funding_stream_rfp
"""
type FundingStreamRfp implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the funding_stream_rfp
  """
  id: Int!

  """
  The year this funding stream rfp is associated with
  """
  year: Int!

  """
  The id of the funding_stream (cif.funding_stream.id) this rfp year is associated with
  """
  fundingStreamId: Int!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `Project`.
  """
  projectsByFundingStreamRfpId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!
}

"""
A `FundingStreamRfp` edge in the connection.
"""
type FundingStreamRfpsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `FundingStreamRfp` at the end of the edge.
  """
  node: FundingStreamRfp
}

"""
Methods to use when ordering `FundingStreamRfp`.
"""
enum FundingStreamRfpsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  YEAR_ASC
  YEAR_DESC
  FUNDING_STREAM_ID_ASC
  FUNDING_STREAM_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FundingStreamRfp` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FundingStreamRfpCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `year` field.
  """
  year: Int

  """
  Checks for equality with the object’s `fundingStreamId` field.
  """
  fundingStreamId: Int

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `FundingStreamProjectStatus` values.
"""
type FundingStreamProjectStatusesConnection {
  """
  A list of `FundingStreamProjectStatus` objects.
  """
  nodes: [FundingStreamProjectStatus]!

  """
  A list of edges which contains the `FundingStreamProjectStatus` and cursor to aid in pagination.
  """
  edges: [FundingStreamProjectStatusesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `FundingStreamProjectStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
Defines project statuses based on the project funding stream.
"""
type FundingStreamProjectStatus implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for funding_stream_project_status table
  """
  id: Int!

  """
  Foreign key referencing the funding_stream table
  """
  fundingStreamId: Int!

  """
  Foreign key refrencing the project_status table
  """
  projectStatusId: Int!

  """
  Defines a way to order the project statuses
  """
  sortingOrder: Int!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `FundingStream` that is related to this `FundingStreamProjectStatus`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByArchivedBy: CifUser
}

"""
Table containing information about possible project statuses
"""
type ProjectStatus implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the project_status
  """
  id: Int!

  """
  Name of the project_status
  """
  name: String!

  """
  Description of the project_status
  """
  description: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `Project`.
  """
  projectsByProjectStatusId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!

  """
  Reads and enables pagination through a set of `Attachment`.
  """
  attachmentsByProjectStatusId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Attachment`.
    """
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AttachmentCondition
  ): AttachmentsConnection!

  """
  Reads and enables pagination through a set of `FundingStreamProjectStatus`.
  """
  fundingStreamProjectStatusesByProjectStatusId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FundingStreamProjectStatus`.
    """
    orderBy: [FundingStreamProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FundingStreamProjectStatusCondition
  ): FundingStreamProjectStatusesConnection!
}

"""
A connection to a list of `Attachment` values.
"""
type AttachmentsConnection {
  """
  A list of `Attachment` objects.
  """
  nodes: [Attachment]!

  """
  A list of edges which contains the `Attachment` and cursor to aid in pagination.
  """
  edges: [AttachmentsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Attachment` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing information about uploaded attachments
"""
type Attachment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the attachment
  """
  id: Int!

  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """
  Description of the attachment
  """
  description: String

  """
  Original uploaded file name
  """
  fileName: String

  """
  Original uploaded file type
  """
  fileType: String

  """
  Original uploaded file size
  """
  fileSize: String

  """
  The id of the project (cif.project.id) that the attachment was uploaded to
  """
  projectId: Int!

  """
  The id of the project_status (cif.project_status.id) that the attachment references
  """
  projectStatusId: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `Project` that is related to this `Attachment`.
  """
  projectByProjectId: Project

  """
  Reads a single `ProjectStatus` that is related to this `Attachment`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByArchivedBy: CifUser
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A `Attachment` edge in the connection.
"""
type AttachmentsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Attachment` at the end of the edge.
  """
  node: Attachment
}

"""
Methods to use when ordering `Attachment`.
"""
enum AttachmentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FILE_ASC
  FILE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FILE_NAME_ASC
  FILE_NAME_DESC
  FILE_TYPE_ASC
  FILE_TYPE_DESC
  FILE_SIZE_ASC
  FILE_SIZE_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  PROJECT_STATUS_ID_ASC
  PROJECT_STATUS_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Attachment` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AttachmentCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `file` field.
  """
  file: UUID

  """
  Checks for equality with the object’s `description` field.
  """
  description: String

  """
  Checks for equality with the object’s `fileName` field.
  """
  fileName: String

  """
  Checks for equality with the object’s `fileType` field.
  """
  fileType: String

  """
  Checks for equality with the object’s `fileSize` field.
  """
  fileSize: String

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `projectStatusId` field.
  """
  projectStatusId: Int

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
Methods to use when ordering `FundingStreamProjectStatus`.
"""
enum FundingStreamProjectStatusesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FUNDING_STREAM_ID_ASC
  FUNDING_STREAM_ID_DESC
  PROJECT_STATUS_ID_ASC
  PROJECT_STATUS_ID_DESC
  SORTING_ORDER_ASC
  SORTING_ORDER_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FundingStreamProjectStatus` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input FundingStreamProjectStatusCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `fundingStreamId` field.
  """
  fundingStreamId: Int

  """
  Checks for equality with the object’s `projectStatusId` field.
  """
  projectStatusId: Int

  """
  Checks for equality with the object’s `sortingOrder` field.
  """
  sortingOrder: Int

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A `FundingStreamProjectStatus` edge in the connection.
"""
type FundingStreamProjectStatusesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `FundingStreamProjectStatus` at the end of the edge.
  """
  node: FundingStreamProjectStatus
}

"""
A `FundingStream` edge in the connection.
"""
type FundingStreamsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `FundingStream` at the end of the edge.
  """
  node: FundingStream
}

"""
Methods to use when ordering `FundingStream`.
"""
enum FundingStreamsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FundingStream` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FundingStreamCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `description` field.
  """
  description: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `ProjectStatus` values.
"""
type ProjectStatusesConnection {
  """
  A list of `ProjectStatus` objects.
  """
  nodes: [ProjectStatus]!

  """
  A list of edges which contains the `ProjectStatus` and cursor to aid in pagination.
  """
  edges: [ProjectStatusesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectStatus` edge in the connection.
"""
type ProjectStatusesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ProjectStatus` at the end of the edge.
  """
  node: ProjectStatus
}

"""
Methods to use when ordering `ProjectStatus`.
"""
enum ProjectStatusesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProjectStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectStatusCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `description` field.
  """
  description: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `Operator` values.
"""
type OperatorsConnection {
  """
  A list of `Operator` objects.
  """
  nodes: [Operator]!

  """
  A list of edges which contains the `Operator` and cursor to aid in pagination.
  """
  edges: [OperatorsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Operator` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Operator` edge in the connection.
"""
type OperatorsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Operator` at the end of the edge.
  """
  node: Operator
}

"""
Methods to use when ordering `Operator`.
"""
enum OperatorsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SWRS_ORGANISATION_ID_ASC
  SWRS_ORGANISATION_ID_DESC
  LEGAL_NAME_ASC
  LEGAL_NAME_DESC
  TRADE_NAME_ASC
  TRADE_NAME_DESC
  SWRS_LEGAL_NAME_ASC
  SWRS_LEGAL_NAME_DESC
  SWRS_TRADE_NAME_ASC
  SWRS_TRADE_NAME_DESC
  BC_REGISTRY_ID_ASC
  BC_REGISTRY_ID_DESC
  OPERATOR_CODE_ASC
  OPERATOR_CODE_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Operator` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OperatorCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `swrsOrganisationId` field.
  """
  swrsOrganisationId: Int

  """
  Checks for equality with the object’s `legalName` field.
  """
  legalName: String

  """
  Checks for equality with the object’s `tradeName` field.
  """
  tradeName: String

  """
  Checks for equality with the object’s `swrsLegalName` field.
  """
  swrsLegalName: String

  """
  Checks for equality with the object’s `swrsTradeName` field.
  """
  swrsTradeName: String

  """
  Checks for equality with the object’s `bcRegistryId` field.
  """
  bcRegistryId: String

  """
  Checks for equality with the object’s `operatorCode` field.
  """
  operatorCode: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `ChangeStatus` values.
"""
type ChangeStatusesConnection {
  """
  A list of `ChangeStatus` objects.
  """
  nodes: [ChangeStatus]!

  """
  A list of edges which contains the `ChangeStatus` and cursor to aid in pagination.
  """
  edges: [ChangeStatusesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ChangeStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing the different status that a change can have
"""
type ChangeStatus implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  The name of the status, e.g. "pending", "committed", ...
  """
  status: String!

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """
  Whether that status is active
  """
  active: Boolean

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevision`.
  """
  projectRevisionsByChangeStatus(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition
  ): ProjectRevisionsConnection!

  """
  Reads and enables pagination through a set of `FormChange`.
  """
  formChangesByChangeStatus(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition
  ): FormChangesConnection!
}

"""
A connection to a list of `ProjectRevision` values.
"""
type ProjectRevisionsConnection {
  """
  A list of `ProjectRevision` objects.
  """
  nodes: [ProjectRevision]!

  """
  A list of edges which contains the `ProjectRevision` and cursor to aid in pagination.
  """
  edges: [ProjectRevisionsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevision` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing all the changes for a project revision
"""
type ProjectRevision implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the project revision
  """
  id: Int!

  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int

  """
  Foreign key to the status of the project revision
  """
  changeStatus: String

  """
  Explanation of why the revision was made
  """
  changeReason: String

  """
  Boolean value to indicate if the revision is the first revision for the project
  """
  isFirstRevision: Boolean

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  The type of the project revision (e.g. General Revision)
  """
  revisionType: String!

  """
  Comments on the project revision
  """
  comments: String

  """
  The status of the revision of a project
  """
  revisionStatus: String!

  """
  Pending actions from (e.g. Director)
  """
  pendingActionsFrom: String

  """
  Reads a single `Project` that is related to this `ProjectRevision`.
  """
  projectByProjectId: Project

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  Reads and enables pagination through a set of `FormChange`.
  """
  formChangesByProjectRevisionId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition
  ): FormChangesConnection!

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByProjectRevisionId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevisionAmendmentType`.
    """
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition
  ): ProjectRevisionAmendmentTypesConnection!

  """
  Returns the timestamptz for updated_at if the change_status is committed, otherwise null
  """
  effectiveDate: Datetime

  """
  Computed column to dynamically retrieve the form_change records relating to the project_revision from a given table
  """
  formChangesFor(
    formDataTableName: String
    jsonMatcher: String
    reportType: String

    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor
  ): FormChangesConnection!

  """
  Computed column to total the net payments made for a project revision
  """
  grossPaymentAmount: BigFloat

  """
  Computed column to return both form completion statuses and reporting requirement statuses for individual milestones
  """
  milestoneReportStatuses(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor
  ): MilestoneReportStatusReturnsConnection!
  netPaymentAmount: BigFloat

  """
  Computed column for graphql to retrieve the change related to the project record, within a project revision
  """
  projectFormChange: FormChange

  """
  Computed column returns a composite value for each record in project_manager_label and the last related form_change (including archived records) if it exists
  """
  projectManagerFormChangesByLabel(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor
  ): ManagerFormChangesByLabelCompositeReturnsConnection!

  """
  Computed column to determine the rank of a project
  """
  rank: Int

  """
  Computed column to return a tasklist status for any tasklist form with an optional json matcher on the form selection
  """
  tasklistStatusFor(formDataTableName: String, jsonMatcher: String): String

  """
  Computed column to return the TEIMP payment amount, based on:
  - X% being the TEIMP payment percentage calculated from the emissions performance (Schedule G)
  - Gross and Net payment amounts to date
  Formula:
  TEIMP payment amount = X% * (Gross payment to date - Net payment to date)
  """
  teimpPaymentAmount: BigFloat

  """
  Computed column to return the TEIMP payment percentage, calculated as specified in the schedule G.
  The calculation for determining emission intensity performance uses three metrics and a calculation:
  Metrics:
  - BEI: Baseline Emission Intensity
  - PEI: Post-Project Emission Intensity
  - TEI: Target Emission Intensity
  Calculation:
  - Emission Intensity Payment Percentage = (BEI - PEI) / (BEI - TEI) * 100
  """
  teimpPaymentPercentage: BigFloat

  """
  Computed column to return the total project value.
  Calculation:
  - Total Project Value = Maximum Funding Amount + Proponent Cost + Additional Funding Amount(s)
  """
  totalProjectValue: BigFloat

  """
  Returns the row number of the project revision within the scope of a project and among all other revisions of the same type.
  """
  typeRowNumber: Int

  """
  Computed column to return the form_change for the earliest due reporting requirement that hasn't been submitted, optionally constrained by the report type
  """
  upcomingReportingRequirementFormChange(reportType: String): FormChange
}

"""
Table containing information about revision types
"""
type RevisionType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  The type of the revision type as the primary key
  """
  type: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevision`.
  """
  projectRevisionsByRevisionType(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition
  ): ProjectRevisionsConnection!
}

"""
Methods to use when ordering `ProjectRevision`.
"""
enum ProjectRevisionsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  CHANGE_STATUS_ASC
  CHANGE_STATUS_DESC
  CHANGE_REASON_ASC
  CHANGE_REASON_DESC
  IS_FIRST_REVISION_ASC
  IS_FIRST_REVISION_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  REVISION_TYPE_ASC
  REVISION_TYPE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  REVISION_STATUS_ASC
  REVISION_STATUS_DESC
  PENDING_ACTIONS_FROM_ASC
  PENDING_ACTIONS_FROM_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProjectRevision` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectRevisionCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `changeStatus` field.
  """
  changeStatus: String

  """
  Checks for equality with the object’s `changeReason` field.
  """
  changeReason: String

  """
  Checks for equality with the object’s `isFirstRevision` field.
  """
  isFirstRevision: Boolean

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `revisionType` field.
  """
  revisionType: String

  """
  Checks for equality with the object’s `comments` field.
  """
  comments: String

  """
  Checks for equality with the object’s `revisionStatus` field.
  """
  revisionStatus: String

  """
  Checks for equality with the object’s `pendingActionsFrom` field.
  """
  pendingActionsFrom: String
}

"""
Table containing information about amendment statuses
"""
type RevisionStatus implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  The name of the amendment status as the primary key
  """
  name: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Boolean value to indicate if the revision status can only be used for amendments
  """
  isAmendmentSpecific: Boolean!

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevision`.
  """
  projectRevisionsByRevisionStatus(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionCondition
  ): ProjectRevisionsConnection!
}

"""
A connection to a list of `FormChange` values.
"""
type FormChangesConnection {
  """
  A list of `FormChange` objects.
  """
  nodes: [FormChange]!

  """
  A list of edges which contains the `FormChange` and cursor to aid in pagination.
  """
  edges: [FormChangesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `FormChange` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table tracking individual changes to database records
"""
type FormChange implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the form_change
  """
  id: Int!

  """
  Unique ID for the form_change
  """
  newFormData: JSON

  """
  The operation this form change describes: create, update or archive
  """
  operation: FormChangeOperation!

  """
  The schema on which this form change applies
  """
  formDataSchemaName: String!

  """
  The table on which this form change applies
  """
  formDataTableName: String!

  """
  The id of the record on which this form change applies
  """
  formDataRecordId: Int

  """
  The project revision this change might be associated with (if known)
  """
  projectRevisionId: Int

  """
  The change status of this form change, foreign key to cif.change_status.
  """
  changeStatus: String!

  """
  The name of the JSON schema to use for validation of this form data
  """
  jsonSchemaName: String!

  """
  The validation errors computed for this record's new_form_data and the json_schema_name schema
  """
  validationErrors: JSON

  """
  The id of the form_change record that preceded this one
  """
  previousFormChangeId: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  Reads a single `ProjectRevision` that is related to this `FormChange`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `ChangeStatus` that is related to this `FormChange`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `Form` that is related to this `FormChange`.
  """
  formByJsonSchemaName: Form

  """
  Reads a single `FormChange` that is related to this `FormChange`.
  """
  formChangeByPreviousFormChangeId: FormChange

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads and enables pagination through a set of `FormChange`.
  """
  formChangesByPreviousFormChangeId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition
  ): FormChangesConnection!
  asEmissionIntensityReport: EmissionIntensityReport

  """
  Computed column returns data from the new_form_data column as if it were a project to allow graph traversal via the foreign keys.
  """
  asProject: Project

  """
  Computed column returns data from the new_form_data column as if it were a project_contact record to allow graph traversal via the foreign keys.
  """
  asProjectContact: ProjectContact

  """
  Computed column returns data from the new_form_data column as if it were a project_manager record to allow graph traversal via the foreign keys.
  """
  asProjectManager: ProjectManager

  """
  Computed column returns data from the new_form_data column as if it were a emission_intensity_report record to allow graph traversal via the foreign keys.
  """
  asReportingRequirement: ReportingRequirement

  """
  Computed column returns the calculated gross payment amount for a particular milestone based on the provinceSharePercentage for the project and eligible expenses for the milestone.
  """
  calculatedGrossAmountThisMilestone: BigFloat

  """
  Computed column returns the calculated holdback amount for a particular milestone based on the holdback percentage for the project and adjusted or calculated gross amount for the milestone with priority given to the adjusted amount.
  """
  calculatedHoldbackAmountThisMilestone: BigFloat

  """
  Computed column returns the calculated net payment amount for a particular milestone based on the adjusted or calculated holdback amount and adjusted or calculated gross amount for the milestone with priority given to the adjusted amounts.
  """
  calculatedNetAmountThisMilestone: BigFloat

  """
  Computed column returns cumulative amount of eligible expenses reported up to and including this milestone.
  """
  eligibleExpensesToDate: BigFloat

  """
  Computed column returns cumulative sum of gross payments. With preference for value selection in order of adjustedGrossAmount > calculatedGrossAmount > maximumAmount
  """
  grossPaymentsToDate: BigFloat

  """
  Computed column returns sum all holdback amounts for a project. Preference for value selection is adjustedHoldbackAmount > calculuatedHoldbackAmount > amount calculated via maximum milestone amount
  """
  holdbackAmountToDate: BigFloat
  isPristine: Boolean
  isUniqueValue(columnName: String): Boolean

  """
  Computed column returns cumulative sum of all net payments. Preference for value selection is adjustedNetAmount > calculuatedNetAmount > amount calculated via maximum milestone amount
  """
  netPaymentsToDate: BigFloat

  """
  returns an ancestor form_change from a specific revision for the form_change id passed in as a parameter
  """
  parentFormChangeFromRevision(projectRevisionId: Int!): FormChange

  """
  A computed column to return the status for a reporting requirement form_change record based on the report_due_date and submitted_date
  """
  reportingRequirementStatus: String
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The type of change operation, defining the action taken when the form_change is committed.
"""
enum FormChangeOperation {
  CREATE
  UPDATE
  ARCHIVE
}

"""
Table containing form handling data. It contains a schema for each front-end form and regprocedure function names to handle parsing the form_change data into tables.
"""
type Form implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the form data.
  """
  id: Int!

  """
  Unique short name identifier for the json_schema data.
  """
  slug: String!

  """
  The json_schema describing the shape of the form_change data for the corresponding form.
  """
  jsonSchema: JSON!

  """
  Metadata describing the json_schema.
  """
  description: String!

  """
  A function that can be used to dynamically alter the schema, such as altering constraints based on the contents of a table.
  """
  jsonSchemaGenerator: RegProcedure

  """
  A function that parses the form_change data into a table or set of tables.
  """
  formChangeCommitHandler: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `FormChange`.
  """
  formChangesByJsonSchemaName(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FormChangeCondition
  ): FormChangesConnection!
}

"""
A builtin object identifier type for a function with argument types
"""
scalar RegProcedure

"""
Methods to use when ordering `FormChange`.
"""
enum FormChangesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NEW_FORM_DATA_ASC
  NEW_FORM_DATA_DESC
  OPERATION_ASC
  OPERATION_DESC
  FORM_DATA_SCHEMA_NAME_ASC
  FORM_DATA_SCHEMA_NAME_DESC
  FORM_DATA_TABLE_NAME_ASC
  FORM_DATA_TABLE_NAME_DESC
  FORM_DATA_RECORD_ID_ASC
  FORM_DATA_RECORD_ID_DESC
  PROJECT_REVISION_ID_ASC
  PROJECT_REVISION_ID_DESC
  CHANGE_STATUS_ASC
  CHANGE_STATUS_DESC
  JSON_SCHEMA_NAME_ASC
  JSON_SCHEMA_NAME_DESC
  VALIDATION_ERRORS_ASC
  VALIDATION_ERRORS_DESC
  PREVIOUS_FORM_CHANGE_ID_ASC
  PREVIOUS_FORM_CHANGE_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FormChange` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FormChangeCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `newFormData` field.
  """
  newFormData: JSON

  """
  Checks for equality with the object’s `operation` field.
  """
  operation: FormChangeOperation

  """
  Checks for equality with the object’s `formDataSchemaName` field.
  """
  formDataSchemaName: String

  """
  Checks for equality with the object’s `formDataTableName` field.
  """
  formDataTableName: String

  """
  Checks for equality with the object’s `formDataRecordId` field.
  """
  formDataRecordId: Int

  """
  Checks for equality with the object’s `projectRevisionId` field.
  """
  projectRevisionId: Int

  """
  Checks for equality with the object’s `changeStatus` field.
  """
  changeStatus: String

  """
  Checks for equality with the object’s `jsonSchemaName` field.
  """
  jsonSchemaName: String

  """
  Checks for equality with the object’s `validationErrors` field.
  """
  validationErrors: JSON

  """
  Checks for equality with the object’s `previousFormChangeId` field.
  """
  previousFormChangeId: Int

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime
}

"""
Table containing information about a CIF emission_intensity_report
"""
type EmissionIntensityReport implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the emission_intensity_report
  """
  id: Int!

  """
  Foreign key to for the reporting_requirement table
  """
  reportingRequirementId: Int!

  """
  The date when the measurement period starts for a project
  """
  measurementPeriodStartDate: Datetime

  """
  The date when the measurement period ends for a project
  """
  measurementPeriodEndDate: Datetime

  """
  The units in which the emissions are measured
  """
  emissionFunctionalUnit: String

  """
  The units in which the production item that generates emissions are measured
  """
  productionFunctionalUnit: String

  """
  The baseline emission intensity used as a benchmark for calculating emission intensity performance
  """
  baselineEmissionIntensity: BigFloat

  """
  The emission intensity defined as a target after a project has completed, used in calculating emission intensity performance
  """
  targetEmissionIntensity: BigFloat

  """
  The actual emission intensity achieved after a project has completed, used in calculating emission intensity performance
  """
  postProjectEmissionIntensity: BigFloat

  """
  The total amount of emission reduction expected from the outcome of this project
  """
  totalLifetimeEmissionReduction: BigFloat

  """
  User defined value corresponding to the calculated emission intensity performance. The calculated value gets manually rounded
  """
  adjustedEmissionsIntensityPerformance: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  An override field to manually adjust the calculated TEIMP holdback payment amount
  """
  adjustedHoldbackPaymentAmount: BigFloat

  """
  The date the payment was issued
  """
  dateSentToCsnr: Datetime

  """
  Reads a single `ReportingRequirement` that is related to this `EmissionIntensityReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  Returns the calculated EI intensity value
  """
  calculatedEiPerformance: BigFloat
}

"""
Table containing information about reporting requirements
"""
type ReportingRequirement implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the reporting requirement
  """
  id: Int!

  """
  Foreign key references the cif.project table
  """
  projectId: Int!

  """
  Foreign key references the cif.report_type table
  """
  reportType: String!

  """
  The date the reporting requirement is due
  """
  reportDueDate: Datetime

  """
  The date the reporting requirement was submitted
  """
  submittedDate: Datetime

  """
  Comments about the reporting requirement
  """
  comments: String

  """
  An index that identifies the order of the reporting requirement
  """
  reportingRequirementIndex: Int!

  """
  A user defined description of a reporting requirement
  """
  description: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `Project` that is related to this `ReportingRequirement`.
  """
  projectByProjectId: Project

  """
  Reads a single `ReportType` that is related to this `ReportingRequirement`.
  """
  reportTypeByReportType: ReportType

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `Payment`.
  """
  paymentsByReportingRequirementId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Payment`.
    """
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PaymentCondition
  ): PaymentsConnection!

  """
  Reads and enables pagination through a set of `EmissionIntensityReport`.
  """
  emissionIntensityReportsByReportingRequirementId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `EmissionIntensityReport`.
    """
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EmissionIntensityReportCondition
  ): EmissionIntensityReportsConnection!

  """
  Reads and enables pagination through a set of `MilestoneReport`.
  """
  milestoneReportsByReportingRequirementId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `MilestoneReport`.
    """
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MilestoneReportCondition
  ): MilestoneReportsConnection!

  """
  Returns the value of the has_expenses column for the report_type of the given reporting_requirement
  """
  hasExpenses: Boolean
}

"""
Table containing information about report types
"""
type ReportType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  The name of the report type as the primary key
  """
  name: String!

  """
  Boolean value indicates if this report type record is a Milestone. There are several different milestones and this value allows for easier filtering.
  """
  isMilestone: Boolean

  """
  Boolean value indicates if this report type has payments associated with it.
  """
  hasExpenses: Boolean

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `ReportingRequirement`.
  """
  reportingRequirementsByReportType(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ReportingRequirement`.
    """
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReportingRequirementCondition
  ): ReportingRequirementsConnection!
}

"""
A connection to a list of `ReportingRequirement` values.
"""
type ReportingRequirementsConnection {
  """
  A list of `ReportingRequirement` objects.
  """
  nodes: [ReportingRequirement]!

  """
  A list of edges which contains the `ReportingRequirement` and cursor to aid in pagination.
  """
  edges: [ReportingRequirementsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ReportingRequirement` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportingRequirement` edge in the connection.
"""
type ReportingRequirementsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ReportingRequirement` at the end of the edge.
  """
  node: ReportingRequirement
}

"""
Methods to use when ordering `ReportingRequirement`.
"""
enum ReportingRequirementsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  REPORT_TYPE_ASC
  REPORT_TYPE_DESC
  REPORT_DUE_DATE_ASC
  REPORT_DUE_DATE_DESC
  SUBMITTED_DATE_ASC
  SUBMITTED_DATE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  REPORTING_REQUIREMENT_INDEX_ASC
  REPORTING_REQUIREMENT_INDEX_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ReportingRequirement` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ReportingRequirementCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `reportType` field.
  """
  reportType: String

  """
  Checks for equality with the object’s `reportDueDate` field.
  """
  reportDueDate: Datetime

  """
  Checks for equality with the object’s `submittedDate` field.
  """
  submittedDate: Datetime

  """
  Checks for equality with the object’s `comments` field.
  """
  comments: String

  """
  Checks for equality with the object’s `reportingRequirementIndex` field.
  """
  reportingRequirementIndex: Int

  """
  Checks for equality with the object’s `description` field.
  """
  description: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `Payment` values.
"""
type PaymentsConnection {
  """
  A list of `Payment` objects.
  """
  nodes: [Payment]!

  """
  A list of edges which contains the `Payment` and cursor to aid in pagination.
  """
  edges: [PaymentsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Payment` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing information about reporting requirements payments
"""
type Payment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the payment
  """
  id: Int!

  """
  Foreign key references the cif.reporting_requirement table
  """
  reportingRequirementId: Int!

  """
  The adjusted value of the gross amount of the payment which is the amount before deducting any holdback amount
  """
  grossAmount: BigFloat

  """
  The adjusted value of the net amount of the payment which is the amount actually paid out, after deducting any holdback amount
  """
  netAmount: BigFloat

  """
  The date the payment was issued
  """
  dateSentToCsnr: Datetime

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `ReportingRequirement` that is related to this `Payment`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByArchivedBy: CifUser
}

"""
A `Payment` edge in the connection.
"""
type PaymentsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Payment` at the end of the edge.
  """
  node: Payment
}

"""
Methods to use when ordering `Payment`.
"""
enum PaymentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REPORTING_REQUIREMENT_ID_ASC
  REPORTING_REQUIREMENT_ID_DESC
  GROSS_AMOUNT_ASC
  GROSS_AMOUNT_DESC
  NET_AMOUNT_ASC
  NET_AMOUNT_DESC
  DATE_SENT_TO_CSNR_ASC
  DATE_SENT_TO_CSNR_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Payment` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PaymentCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `reportingRequirementId` field.
  """
  reportingRequirementId: Int

  """
  Checks for equality with the object’s `grossAmount` field.
  """
  grossAmount: BigFloat

  """
  Checks for equality with the object’s `netAmount` field.
  """
  netAmount: BigFloat

  """
  Checks for equality with the object’s `dateSentToCsnr` field.
  """
  dateSentToCsnr: Datetime

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `EmissionIntensityReport` values.
"""
type EmissionIntensityReportsConnection {
  """
  A list of `EmissionIntensityReport` objects.
  """
  nodes: [EmissionIntensityReport]!

  """
  A list of edges which contains the `EmissionIntensityReport` and cursor to aid in pagination.
  """
  edges: [EmissionIntensityReportsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionIntensityReport` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `EmissionIntensityReport` edge in the connection.
"""
type EmissionIntensityReportsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `EmissionIntensityReport` at the end of the edge.
  """
  node: EmissionIntensityReport
}

"""
Methods to use when ordering `EmissionIntensityReport`.
"""
enum EmissionIntensityReportsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REPORTING_REQUIREMENT_ID_ASC
  REPORTING_REQUIREMENT_ID_DESC
  MEASUREMENT_PERIOD_START_DATE_ASC
  MEASUREMENT_PERIOD_START_DATE_DESC
  MEASUREMENT_PERIOD_END_DATE_ASC
  MEASUREMENT_PERIOD_END_DATE_DESC
  EMISSION_FUNCTIONAL_UNIT_ASC
  EMISSION_FUNCTIONAL_UNIT_DESC
  PRODUCTION_FUNCTIONAL_UNIT_ASC
  PRODUCTION_FUNCTIONAL_UNIT_DESC
  BASELINE_EMISSION_INTENSITY_ASC
  BASELINE_EMISSION_INTENSITY_DESC
  TARGET_EMISSION_INTENSITY_ASC
  TARGET_EMISSION_INTENSITY_DESC
  POST_PROJECT_EMISSION_INTENSITY_ASC
  POST_PROJECT_EMISSION_INTENSITY_DESC
  TOTAL_LIFETIME_EMISSION_REDUCTION_ASC
  TOTAL_LIFETIME_EMISSION_REDUCTION_DESC
  ADJUSTED_EMISSIONS_INTENSITY_PERFORMANCE_ASC
  ADJUSTED_EMISSIONS_INTENSITY_PERFORMANCE_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  ADJUSTED_HOLDBACK_PAYMENT_AMOUNT_ASC
  ADJUSTED_HOLDBACK_PAYMENT_AMOUNT_DESC
  DATE_SENT_TO_CSNR_ASC
  DATE_SENT_TO_CSNR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EmissionIntensityReport` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input EmissionIntensityReportCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `reportingRequirementId` field.
  """
  reportingRequirementId: Int

  """
  Checks for equality with the object’s `measurementPeriodStartDate` field.
  """
  measurementPeriodStartDate: Datetime

  """
  Checks for equality with the object’s `measurementPeriodEndDate` field.
  """
  measurementPeriodEndDate: Datetime

  """
  Checks for equality with the object’s `emissionFunctionalUnit` field.
  """
  emissionFunctionalUnit: String

  """
  Checks for equality with the object’s `productionFunctionalUnit` field.
  """
  productionFunctionalUnit: String

  """
  Checks for equality with the object’s `baselineEmissionIntensity` field.
  """
  baselineEmissionIntensity: BigFloat

  """
  Checks for equality with the object’s `targetEmissionIntensity` field.
  """
  targetEmissionIntensity: BigFloat

  """
  Checks for equality with the object’s `postProjectEmissionIntensity` field.
  """
  postProjectEmissionIntensity: BigFloat

  """
  Checks for equality with the object’s `totalLifetimeEmissionReduction` field.
  """
  totalLifetimeEmissionReduction: BigFloat

  """
  Checks for equality with the object’s `adjustedEmissionsIntensityPerformance` field.
  """
  adjustedEmissionsIntensityPerformance: BigFloat

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime

  """
  Checks for equality with the object’s `adjustedHoldbackPaymentAmount` field.
  """
  adjustedHoldbackPaymentAmount: BigFloat

  """
  Checks for equality with the object’s `dateSentToCsnr` field.
  """
  dateSentToCsnr: Datetime
}

"""
A connection to a list of `MilestoneReport` values.
"""
type MilestoneReportsConnection {
  """
  A list of `MilestoneReport` objects.
  """
  nodes: [MilestoneReport]!

  """
  A list of edges which contains the `MilestoneReport` and cursor to aid in pagination.
  """
  edges: [MilestoneReportsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `MilestoneReport` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing information about a CIF milestone_report
"""
type MilestoneReport implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the milestone_report
  """
  id: Int!

  """
  Foreign key to the reporting_requirement_table
  """
  reportingRequirementId: Int!

  """
  The date where the work should be finished by. It can be automatically calculated based upon the type of milestone or manually overridden.
  Automatic calculations are as follows:
    - 30 days before report due date for general milestones
  """
  substantialCompletionDate: Datetime

  """
  The name of the person who certified the completion of the milestone
  """
  certifiedBy: String

  """
  The professional designation of the person who certified the completion of the milestone
  """
  certifierProfessionalDesignation: String

  """
  The maximum amount in dollars that can be applied to this milestone
  """
  maximumAmount: BigFloat

  """
  The total amount of expenses in dollars applied to this milestone
  """
  totalEligibleExpenses: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `ReportingRequirement` that is related to this `MilestoneReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByArchivedBy: CifUser
}

"""
A `MilestoneReport` edge in the connection.
"""
type MilestoneReportsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `MilestoneReport` at the end of the edge.
  """
  node: MilestoneReport
}

"""
Methods to use when ordering `MilestoneReport`.
"""
enum MilestoneReportsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  REPORTING_REQUIREMENT_ID_ASC
  REPORTING_REQUIREMENT_ID_DESC
  SUBSTANTIAL_COMPLETION_DATE_ASC
  SUBSTANTIAL_COMPLETION_DATE_DESC
  CERTIFIED_BY_ASC
  CERTIFIED_BY_DESC
  CERTIFIER_PROFESSIONAL_DESIGNATION_ASC
  CERTIFIER_PROFESSIONAL_DESIGNATION_DESC
  MAXIMUM_AMOUNT_ASC
  MAXIMUM_AMOUNT_DESC
  TOTAL_ELIGIBLE_EXPENSES_ASC
  TOTAL_ELIGIBLE_EXPENSES_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MilestoneReport` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MilestoneReportCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `reportingRequirementId` field.
  """
  reportingRequirementId: Int

  """
  Checks for equality with the object’s `substantialCompletionDate` field.
  """
  substantialCompletionDate: Datetime

  """
  Checks for equality with the object’s `certifiedBy` field.
  """
  certifiedBy: String

  """
  Checks for equality with the object’s `certifierProfessionalDesignation` field.
  """
  certifierProfessionalDesignation: String

  """
  Checks for equality with the object’s `maximumAmount` field.
  """
  maximumAmount: BigFloat

  """
  Checks for equality with the object’s `totalEligibleExpenses` field.
  """
  totalEligibleExpenses: BigFloat

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
Join table to track assignment of contacts to projects
"""
type ProjectContact implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the project contact record
  """
  id: Int!

  """
  Foreign key to the project
  """
  projectId: Int!

  """
  Foreign key to the contact
  """
  contactId: Int!

  """
  The zero-based index of the contact in the project
  """
  contactIndex: Int!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `Project` that is related to this `ProjectContact`.
  """
  projectByProjectId: Project

  """
  Reads a single `Contact` that is related to this `ProjectContact`.
  """
  contactByContactId: Contact

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByArchivedBy: CifUser
}

"""
Table containing information about a CIF contact
"""
type Contact implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the contact
  """
  id: Int!

  """
  The given name of this contact
  """
  givenName: String

  """
  The family name of this contact
  """
  familyName: String

  """
  The email address, and a unique identifier, of this contact
  """
  email: String!

  """
  The phone number of this contact, stored in E.164 format
  """
  phone: String

  """
  The phone extension of this contact
  """
  phoneExt: String

  """
  The company this contact works for
  """
  companyName: String

  """
  The role of this contact within their company
  """
  contactPosition: String

  """
  Any comments about this contact
  """
  comments: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `ProjectContact`.
  """
  projectContactsByContactId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectContact`.
    """
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectContactCondition
  ): ProjectContactsConnection!

  """
  Computed column for graphql to retrieve the full name of a contact
  """
  fullName: String
  fullPhone: String

  """
  Returns the pending form change editing the contact created by the current user, if it exists.
  """
  pendingFormChange: FormChange
}

"""
A connection to a list of `ProjectContact` values.
"""
type ProjectContactsConnection {
  """
  A list of `ProjectContact` objects.
  """
  nodes: [ProjectContact]!

  """
  A list of edges which contains the `ProjectContact` and cursor to aid in pagination.
  """
  edges: [ProjectContactsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectContact` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectContact` edge in the connection.
"""
type ProjectContactsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ProjectContact` at the end of the edge.
  """
  node: ProjectContact
}

"""
Methods to use when ordering `ProjectContact`.
"""
enum ProjectContactsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  CONTACT_ID_ASC
  CONTACT_ID_DESC
  CONTACT_INDEX_ASC
  CONTACT_INDEX_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProjectContact` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectContactCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `contactId` field.
  """
  contactId: Int

  """
  Checks for equality with the object’s `contactIndex` field.
  """
  contactIndex: Int

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
Join table to track assignment of cif users to projects, as project managers
"""
type ProjectManager implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the project manager record
  """
  id: Int!

  """
  Foreign key to the project
  """
  projectId: Int!

  """
  Foreign key to the cif user
  """
  cifUserId: Int!

  """
  Foreign key to the project_manager_label table. Defines the list of labels that cif_users can be assigned to as a manager of a project
  """
  projectManagerLabelId: Int!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `Project` that is related to this `ProjectManager`.
  """
  projectByProjectId: Project

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByCifUserId: CifUser

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByArchivedBy: CifUser
}

"""
Lookup table for project manager labels. Records define the labels that project managers can be assigned to a project as
"""
type ProjectManagerLabel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the project_manager_label record
  """
  id: Int!

  """
  The label that project managers can be assigned to a project as
  """
  label: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `ProjectManager`.
  """
  projectManagersByProjectManagerLabelId(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectManagerCondition
  ): ProjectManagersConnection!
}

"""
A connection to a list of `ProjectManager` values.
"""
type ProjectManagersConnection {
  """
  A list of `ProjectManager` objects.
  """
  nodes: [ProjectManager]!

  """
  A list of edges which contains the `ProjectManager` and cursor to aid in pagination.
  """
  edges: [ProjectManagersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManager` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManager` edge in the connection.
"""
type ProjectManagersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ProjectManager` at the end of the edge.
  """
  node: ProjectManager
}

"""
Methods to use when ordering `ProjectManager`.
"""
enum ProjectManagersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  CIF_USER_ID_ASC
  CIF_USER_ID_DESC
  PROJECT_MANAGER_LABEL_ID_ASC
  PROJECT_MANAGER_LABEL_ID_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProjectManager` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProjectManagerCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `cifUserId` field.
  """
  cifUserId: Int

  """
  Checks for equality with the object’s `projectManagerLabelId` field.
  """
  projectManagerLabelId: Int

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A `FormChange` edge in the connection.
"""
type FormChangesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `FormChange` at the end of the edge.
  """
  node: FormChange
}

"""
A connection to a list of `ProjectRevisionAmendmentType` values.
"""
type ProjectRevisionAmendmentTypesConnection {
  """
  A list of `ProjectRevisionAmendmentType` objects.
  """
  nodes: [ProjectRevisionAmendmentType]!

  """
  A list of edges which contains the `ProjectRevisionAmendmentType` and cursor to aid in pagination.
  """
  edges: [ProjectRevisionAmendmentTypesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectRevisionAmendmentType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A join table between project revisions and amendment types.
"""
type ProjectRevisionAmendmentType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the project revision amendment type.
  """
  id: Int!

  """
  Foreign key to the project revision
  """
  projectRevisionId: Int!

  """
  Foreign key to the amendment type
  """
  amendmentType: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `ProjectRevision` that is related to this `ProjectRevisionAmendmentType`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `AmendmentType` that is related to this `ProjectRevisionAmendmentType`.
  """
  amendmentTypeByAmendmentType: AmendmentType

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByArchivedBy: CifUser
}

"""
Lookup table for amendment types
"""
type AmendmentType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  The name of the amendment type as the primary key
  """
  name: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `ProjectRevisionAmendmentType`.
  """
  projectRevisionAmendmentTypesByAmendmentType(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `ProjectRevisionAmendmentType`.
    """
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectRevisionAmendmentTypeCondition
  ): ProjectRevisionAmendmentTypesConnection!
}

"""
Methods to use when ordering `ProjectRevisionAmendmentType`.
"""
enum ProjectRevisionAmendmentTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_REVISION_ID_ASC
  PROJECT_REVISION_ID_DESC
  AMENDMENT_TYPE_ASC
  AMENDMENT_TYPE_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProjectRevisionAmendmentType` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ProjectRevisionAmendmentTypeCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `projectRevisionId` field.
  """
  projectRevisionId: Int

  """
  Checks for equality with the object’s `amendmentType` field.
  """
  amendmentType: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A `ProjectRevisionAmendmentType` edge in the connection.
"""
type ProjectRevisionAmendmentTypesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ProjectRevisionAmendmentType` at the end of the edge.
  """
  node: ProjectRevisionAmendmentType
}

"""
A connection to a list of `MilestoneReportStatusReturn` values.
"""
type MilestoneReportStatusReturnsConnection {
  """
  A list of `MilestoneReportStatusReturn` objects.
  """
  nodes: [MilestoneReportStatusReturn]!

  """
  A list of edges which contains the `MilestoneReportStatusReturn` and cursor to aid in pagination.
  """
  edges: [MilestoneReportStatusReturnsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `MilestoneReportStatusReturn` you could get from the connection.
  """
  totalCount: Int!
}

type MilestoneReportStatusReturn {
  milestoneIndex: Int
  reportDueDate: Datetime
  submittedDate: Datetime
  formCompletionStatus: String
}

"""
A `MilestoneReportStatusReturn` edge in the connection.
"""
type MilestoneReportStatusReturnsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `MilestoneReportStatusReturn` at the end of the edge.
  """
  node: MilestoneReportStatusReturn
}

"""
A connection to a list of `ManagerFormChangesByLabelCompositeReturn` values.
"""
type ManagerFormChangesByLabelCompositeReturnsConnection {
  """
  A list of `ManagerFormChangesByLabelCompositeReturn` objects.
  """
  nodes: [ManagerFormChangesByLabelCompositeReturn]!

  """
  A list of edges which contains the `ManagerFormChangesByLabelCompositeReturn` and cursor to aid in pagination.
  """
  edges: [ManagerFormChangesByLabelCompositeReturnsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ManagerFormChangesByLabelCompositeReturn` you could get from the connection.
  """
  totalCount: Int!
}

"""
A composite return type for the project_revision_project_manager_form_changes_by_label computed column. Returns a record for each active label and the last related form_change if it exists.
"""
type ManagerFormChangesByLabelCompositeReturn {
  projectManagerLabel: ProjectManagerLabel
  formChange: FormChange
}

"""
A `ManagerFormChangesByLabelCompositeReturn` edge in the connection.
"""
type ManagerFormChangesByLabelCompositeReturnsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ManagerFormChangesByLabelCompositeReturn` at the end of the edge.
  """
  node: ManagerFormChangesByLabelCompositeReturn
}

"""
A `ProjectRevision` edge in the connection.
"""
type ProjectRevisionsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ProjectRevision` at the end of the edge.
  """
  node: ProjectRevision
}

"""
A `ChangeStatus` edge in the connection.
"""
type ChangeStatusesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ChangeStatus` at the end of the edge.
  """
  node: ChangeStatus
}

"""
Methods to use when ordering `ChangeStatus`.
"""
enum ChangeStatusesOrderBy {
  NATURAL
  STATUS_ASC
  STATUS_DESC
  TRIGGERS_COMMIT_ASC
  TRIGGERS_COMMIT_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ChangeStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChangeStatusCondition {
  """
  Checks for equality with the object’s `status` field.
  """
  status: String

  """
  Checks for equality with the object’s `triggersCommit` field.
  """
  triggersCommit: Boolean

  """
  Checks for equality with the object’s `active` field.
  """
  active: Boolean

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `Contact` values.
"""
type ContactsConnection {
  """
  A list of `Contact` objects.
  """
  nodes: [Contact]!

  """
  A list of edges which contains the `Contact` and cursor to aid in pagination.
  """
  edges: [ContactsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Contact` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Contact` edge in the connection.
"""
type ContactsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Contact` at the end of the edge.
  """
  node: Contact
}

"""
Methods to use when ordering `Contact`.
"""
enum ContactsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  GIVEN_NAME_ASC
  GIVEN_NAME_DESC
  FAMILY_NAME_ASC
  FAMILY_NAME_DESC
  EMAIL_ASC
  EMAIL_DESC
  PHONE_ASC
  PHONE_DESC
  PHONE_EXT_ASC
  PHONE_EXT_DESC
  COMPANY_NAME_ASC
  COMPANY_NAME_DESC
  CONTACT_POSITION_ASC
  CONTACT_POSITION_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Contact` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ContactCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `givenName` field.
  """
  givenName: String

  """
  Checks for equality with the object’s `familyName` field.
  """
  familyName: String

  """
  Checks for equality with the object’s `email` field.
  """
  email: String

  """
  Checks for equality with the object’s `phone` field.
  """
  phone: String

  """
  Checks for equality with the object’s `phoneExt` field.
  """
  phoneExt: String

  """
  Checks for equality with the object’s `companyName` field.
  """
  companyName: String

  """
  Checks for equality with the object’s `contactPosition` field.
  """
  contactPosition: String

  """
  Checks for equality with the object’s `comments` field.
  """
  comments: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `ProjectManagerLabel` values.
"""
type ProjectManagerLabelsConnection {
  """
  A list of `ProjectManagerLabel` objects.
  """
  nodes: [ProjectManagerLabel]!

  """
  A list of edges which contains the `ProjectManagerLabel` and cursor to aid in pagination.
  """
  edges: [ProjectManagerLabelsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectManagerLabel` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ProjectManagerLabel` edge in the connection.
"""
type ProjectManagerLabelsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ProjectManagerLabel` at the end of the edge.
  """
  node: ProjectManagerLabel
}

"""
Methods to use when ordering `ProjectManagerLabel`.
"""
enum ProjectManagerLabelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  LABEL_ASC
  LABEL_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProjectManagerLabel` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProjectManagerLabelCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `label` field.
  """
  label: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `ReportType` values.
"""
type ReportTypesConnection {
  """
  A list of `ReportType` objects.
  """
  nodes: [ReportType]!

  """
  A list of edges which contains the `ReportType` and cursor to aid in pagination.
  """
  edges: [ReportTypesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ReportType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ReportType` edge in the connection.
"""
type ReportTypesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ReportType` at the end of the edge.
  """
  node: ReportType
}

"""
Methods to use when ordering `ReportType`.
"""
enum ReportTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  IS_MILESTONE_ASC
  IS_MILESTONE_DESC
  HAS_EXPENSES_ASC
  HAS_EXPENSES_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ReportType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ReportTypeCondition {
  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `isMilestone` field.
  """
  isMilestone: Boolean

  """
  Checks for equality with the object’s `hasExpenses` field.
  """
  hasExpenses: Boolean

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `EmissionIntensityPaymentPercent` values.
"""
type EmissionIntensityPaymentPercentsConnection {
  """
  A list of `EmissionIntensityPaymentPercent` objects.
  """
  nodes: [EmissionIntensityPaymentPercent]!

  """
  A list of edges which contains the `EmissionIntensityPaymentPercent` and cursor to aid in pagination.
  """
  edges: [EmissionIntensityPaymentPercentsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `EmissionIntensityPaymentPercent` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing information about how CIF emission_intensity values map to a payment_percentage.
This table is a lookup table that maps the emission intensity performance of a project to a payment percentage used to determine payments.
The calculation for determininng emission intensity performance uses three metrics and a calculation.
Metrics:
- BEI: Baseline Emission Intensity
- PEI: Post-Project Emission Intensity
- TEI: Target Emission Intensity
Calculation:
- Emission Intensity Performance = (BEI - PEI) / (BEI - TEI) * 100
"""
type EmissionIntensityPaymentPercent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the emission_intensity_payment_percent
  """
  id: Int!

  """
  The calculated emission intensity performance.
  This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  """
  maxEmissionIntensityPerformance: BigFloat!

  """
  The payment percentage linked to the value of max_emission_intensity_performance
  """
  paymentPercentage: BigFloat!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByArchivedBy: CifUser
}

"""
A `EmissionIntensityPaymentPercent` edge in the connection.
"""
type EmissionIntensityPaymentPercentsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `EmissionIntensityPaymentPercent` at the end of the edge.
  """
  node: EmissionIntensityPaymentPercent
}

"""
Methods to use when ordering `EmissionIntensityPaymentPercent`.
"""
enum EmissionIntensityPaymentPercentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MAX_EMISSION_INTENSITY_PERFORMANCE_ASC
  MAX_EMISSION_INTENSITY_PERFORMANCE_DESC
  PAYMENT_PERCENTAGE_ASC
  PAYMENT_PERCENTAGE_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EmissionIntensityPaymentPercent` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input EmissionIntensityPaymentPercentCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `maxEmissionIntensityPerformance` field.
  """
  maxEmissionIntensityPerformance: BigFloat

  """
  Checks for equality with the object’s `paymentPercentage` field.
  """
  paymentPercentage: BigFloat

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `FundingParameter` values.
"""
type FundingParametersConnection {
  """
  A list of `FundingParameter` objects.
  """
  nodes: [FundingParameter]!

  """
  A list of edges which contains the `FundingParameter` and cursor to aid in pagination.
  """
  edges: [FundingParametersEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `FundingParameter` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing funding agreement data
"""
type FundingParameter implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the funding agreement data
  """
  id: Int!

  """
  The related project for this data
  """
  projectId: Int!

  """
  Maximum funding amount for this project
  """
  maxFundingAmount: BigFloat

  """
  The percent of the total funding for a project that the Province is providing
  """
  provinceSharePercentage: BigFloat

  """
  The designated holdback percentage for each payment. CIF holds back this designated holdback percentage from each payment, and the cumulated holdback amount is the total possible value of the final (performance) milestone payment. The proponent is paid a portion of this possible total based on their project emission intensity performance relative to the target emission intensity
  """
  holdbackPercentage: BigFloat

  """
  Total anticipated funding amount inserted by CIF users
  """
  anticipatedFundingAmount: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  The funding provided by the proponent
  """
  proponentCost: BigFloat

  """
  contract start date to support the auto-generation of quarterly and annual reports
  """
  contractStartDate: Datetime

  """
  project assets life end date to support the auto-generation of quarterly and annual reports
  """
  projectAssetsLifeEndDate: Datetime

  """
  Reads a single `Project` that is related to this `FundingParameter`.
  """
  projectByProjectId: Project

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByArchivedBy: CifUser
}

"""
A `FundingParameter` edge in the connection.
"""
type FundingParametersEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `FundingParameter` at the end of the edge.
  """
  node: FundingParameter
}

"""
Methods to use when ordering `FundingParameter`.
"""
enum FundingParametersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  MAX_FUNDING_AMOUNT_ASC
  MAX_FUNDING_AMOUNT_DESC
  PROVINCE_SHARE_PERCENTAGE_ASC
  PROVINCE_SHARE_PERCENTAGE_DESC
  HOLDBACK_PERCENTAGE_ASC
  HOLDBACK_PERCENTAGE_DESC
  ANTICIPATED_FUNDING_AMOUNT_ASC
  ANTICIPATED_FUNDING_AMOUNT_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PROPONENT_COST_ASC
  PROPONENT_COST_DESC
  CONTRACT_START_DATE_ASC
  CONTRACT_START_DATE_DESC
  PROJECT_ASSETS_LIFE_END_DATE_ASC
  PROJECT_ASSETS_LIFE_END_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `FundingParameter` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input FundingParameterCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `maxFundingAmount` field.
  """
  maxFundingAmount: BigFloat

  """
  Checks for equality with the object’s `provinceSharePercentage` field.
  """
  provinceSharePercentage: BigFloat

  """
  Checks for equality with the object’s `holdbackPercentage` field.
  """
  holdbackPercentage: BigFloat

  """
  Checks for equality with the object’s `anticipatedFundingAmount` field.
  """
  anticipatedFundingAmount: BigFloat

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime

  """
  Checks for equality with the object’s `proponentCost` field.
  """
  proponentCost: BigFloat

  """
  Checks for equality with the object’s `contractStartDate` field.
  """
  contractStartDate: Datetime

  """
  Checks for equality with the object’s `projectAssetsLifeEndDate` field.
  """
  projectAssetsLifeEndDate: Datetime
}

"""
A connection to a list of `ProjectType` values.
"""
type ProjectTypesConnection {
  """
  A list of `ProjectType` objects.
  """
  nodes: [ProjectType]!

  """
  A list of edges which contains the `ProjectType` and cursor to aid in pagination.
  """
  edges: [ProjectTypesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `ProjectType` you could get from the connection.
  """
  totalCount: Int!
}

"""
Table containing information about project types
"""
type ProjectType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Unique ID for the project_type
  """
  id: Int!

  """
  The name of the project_type
  """
  name: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `Project`.
  """
  projectsByProjectType(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProjectCondition
  ): ProjectsConnection!
}

"""
A `ProjectType` edge in the connection.
"""
type ProjectTypesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `ProjectType` at the end of the edge.
  """
  node: ProjectType
}

"""
Methods to use when ordering `ProjectType`.
"""
enum ProjectTypesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ProjectType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProjectTypeCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `AdditionalFundingSourceStatus` values.
"""
type AdditionalFundingSourceStatusesConnection {
  """
  A list of `AdditionalFundingSourceStatus` objects.
  """
  nodes: [AdditionalFundingSourceStatus]!

  """
  A list of edges which contains the `AdditionalFundingSourceStatus` and cursor to aid in pagination.
  """
  edges: [AdditionalFundingSourceStatusesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `AdditionalFundingSourceStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
Lookup table for additional funding source statuses
"""
type AdditionalFundingSourceStatus implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  The name of the status as the primary key
  """
  statusName: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime!

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime!

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads and enables pagination through a set of `AdditionalFundingSource`.
  """
  additionalFundingSourcesByStatus(
    """
    Only read the first `n` values of the set.
    """
    first: Int

    """
    Only read the last `n` values of the set.
    """
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """
    Read all values in the set before (above) this cursor.
    """
    before: Cursor

    """
    Read all values in the set after (below) this cursor.
    """
    after: Cursor

    """
    The method to use when ordering `AdditionalFundingSource`.
    """
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AdditionalFundingSourceCondition
  ): AdditionalFundingSourcesConnection!
}

"""
Methods to use when ordering `AdditionalFundingSource`.
"""
enum AdditionalFundingSourcesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PROJECT_ID_ASC
  PROJECT_ID_DESC
  STATUS_ASC
  STATUS_DESC
  SOURCE_ASC
  SOURCE_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  SOURCE_INDEX_ASC
  SOURCE_INDEX_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AdditionalFundingSource` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input AdditionalFundingSourceCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `projectId` field.
  """
  projectId: Int

  """
  Checks for equality with the object’s `status` field.
  """
  status: String

  """
  Checks for equality with the object’s `source` field.
  """
  source: String

  """
  Checks for equality with the object’s `amount` field.
  """
  amount: BigFloat

  """
  Checks for equality with the object’s `sourceIndex` field.
  """
  sourceIndex: Int

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A `AdditionalFundingSourceStatus` edge in the connection.
"""
type AdditionalFundingSourceStatusesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `AdditionalFundingSourceStatus` at the end of the edge.
  """
  node: AdditionalFundingSourceStatus
}

"""
Methods to use when ordering `AdditionalFundingSourceStatus`.
"""
enum AdditionalFundingSourceStatusesOrderBy {
  NATURAL
  STATUS_NAME_ASC
  STATUS_NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AdditionalFundingSourceStatus` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input AdditionalFundingSourceStatusCondition {
  """
  Checks for equality with the object’s `statusName` field.
  """
  statusName: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `Form` values.
"""
type FormsConnection {
  """
  A list of `Form` objects.
  """
  nodes: [Form]!

  """
  A list of edges which contains the `Form` and cursor to aid in pagination.
  """
  edges: [FormsEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `Form` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `Form` edge in the connection.
"""
type FormsEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `Form` at the end of the edge.
  """
  node: Form
}

"""
Methods to use when ordering `Form`.
"""
enum FormsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  SLUG_ASC
  SLUG_DESC
  JSON_SCHEMA_ASC
  JSON_SCHEMA_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  JSON_SCHEMA_GENERATOR_ASC
  JSON_SCHEMA_GENERATOR_DESC
  FORM_CHANGE_COMMIT_HANDLER_ASC
  FORM_CHANGE_COMMIT_HANDLER_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Form` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FormCondition {
  """
  Checks for equality with the object’s `id` field.
  """
  id: Int

  """
  Checks for equality with the object’s `slug` field.
  """
  slug: String

  """
  Checks for equality with the object’s `jsonSchema` field.
  """
  jsonSchema: JSON

  """
  Checks for equality with the object’s `description` field.
  """
  description: String

  """
  Checks for equality with the object’s `jsonSchemaGenerator` field.
  """
  jsonSchemaGenerator: RegProcedure

  """
  Checks for equality with the object’s `formChangeCommitHandler` field.
  """
  formChangeCommitHandler: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `AmendmentType` values.
"""
type AmendmentTypesConnection {
  """
  A list of `AmendmentType` objects.
  """
  nodes: [AmendmentType]!

  """
  A list of edges which contains the `AmendmentType` and cursor to aid in pagination.
  """
  edges: [AmendmentTypesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `AmendmentType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `AmendmentType` edge in the connection.
"""
type AmendmentTypesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `AmendmentType` at the end of the edge.
  """
  node: AmendmentType
}

"""
Methods to use when ordering `AmendmentType`.
"""
enum AmendmentTypesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AmendmentType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AmendmentTypeCondition {
  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `RevisionType` values.
"""
type RevisionTypesConnection {
  """
  A list of `RevisionType` objects.
  """
  nodes: [RevisionType]!

  """
  A list of edges which contains the `RevisionType` and cursor to aid in pagination.
  """
  edges: [RevisionTypesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `RevisionType` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `RevisionType` edge in the connection.
"""
type RevisionTypesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `RevisionType` at the end of the edge.
  """
  node: RevisionType
}

"""
Methods to use when ordering `RevisionType`.
"""
enum RevisionTypesOrderBy {
  NATURAL
  TYPE_ASC
  TYPE_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RevisionType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RevisionTypeCondition {
  """
  Checks for equality with the object’s `type` field.
  """
  type: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime
}

"""
A connection to a list of `RevisionStatus` values.
"""
type RevisionStatusesConnection {
  """
  A list of `RevisionStatus` objects.
  """
  nodes: [RevisionStatus]!

  """
  A list of edges which contains the `RevisionStatus` and cursor to aid in pagination.
  """
  edges: [RevisionStatusesEdge!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  The count of *all* `RevisionStatus` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `RevisionStatus` edge in the connection.
"""
type RevisionStatusesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `RevisionStatus` at the end of the edge.
  """
  node: RevisionStatus
}

"""
Methods to use when ordering `RevisionStatus`.
"""
enum RevisionStatusesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  CREATED_BY_ASC
  CREATED_BY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_BY_ASC
  UPDATED_BY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  ARCHIVED_BY_ASC
  ARCHIVED_BY_DESC
  ARCHIVED_AT_ASC
  ARCHIVED_AT_DESC
  IS_AMENDMENT_SPECIFIC_ASC
  IS_AMENDMENT_SPECIFIC_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `RevisionStatus` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input RevisionStatusCondition {
  """
  Checks for equality with the object’s `name` field.
  """
  name: String

  """
  Checks for equality with the object’s `createdBy` field.
  """
  createdBy: Int

  """
  Checks for equality with the object’s `createdAt` field.
  """
  createdAt: Datetime

  """
  Checks for equality with the object’s `updatedBy` field.
  """
  updatedBy: Int

  """
  Checks for equality with the object’s `updatedAt` field.
  """
  updatedAt: Datetime

  """
  Checks for equality with the object’s `archivedBy` field.
  """
  archivedBy: Int

  """
  Checks for equality with the object’s `archivedAt` field.
  """
  archivedAt: Datetime

  """
  Checks for equality with the object’s `isAmendmentSpecific` field.
  """
  isAmendmentSpecific: Boolean
}

"""
A `AdditionalFundingSource` edge in the connection.
"""
type AdditionalFundingSourcesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `AdditionalFundingSource` at the end of the edge.
  """
  node: AdditionalFundingSource
}

"""
A connection to a list of `String` values.
"""
type GetFormStatusConnection {
  """
  A list of `String` objects.
  """
  nodes: [String]!

  """
  A list of edges which contains the `String` and cursor to aid in pagination.
  """
  edges: [GetFormStatusEdge!]!

  """
  The count of *all* `String` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `String` edge in the connection.
"""
type GetFormStatusEdge {
  """
  A cursor for use in pagination.
  """
  cursor: Cursor

  """
  The `String` at the end of the edge.
  """
  node: String
}

type KeycloakJwt {
  jti: UUID
  exp: Int
  nbf: Int
  iat: Int
  iss: String
  aud: String
  sub: String
  typ: String
  azp: String
  authTime: Int
  sessionState: UUID
  acr: String
  emailVerified: Boolean
  name: String
  preferredUsername: String
  givenName: String
  familyName: String
  email: String
  brokerSessionId: String
  priorityGroup: String
  userGroups: [String]

  """
  Reads a single `CifUser` that is related to this `KeycloakJwt`.
  """
  cifUserBySub: CifUser
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """
  Creates a single `AdditionalFundingSource`.
  """
  createAdditionalFundingSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAdditionalFundingSourceInput!
  ): CreateAdditionalFundingSourcePayload

  """
  Creates a single `AdditionalFundingSourceStatus`.
  """
  createAdditionalFundingSourceStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAdditionalFundingSourceStatusInput!
  ): CreateAdditionalFundingSourceStatusPayload

  """
  Creates a single `AmendmentType`.
  """
  createAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAmendmentTypeInput!
  ): CreateAmendmentTypePayload

  """
  Creates a single `Attachment`.
  """
  createAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAttachmentInput!
  ): CreateAttachmentPayload

  """
  Creates a single `ChangeStatus`.
  """
  createChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChangeStatusInput!
  ): CreateChangeStatusPayload

  """
  Creates a single `CifUser`.
  """
  createCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCifUserInput!
  ): CreateCifUserPayload

  """
  Creates a single `Contact`.
  """
  createContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateContactInput!
  ): CreateContactPayload

  """
  Creates a single `EmissionIntensityPaymentPercent`.
  """
  createEmissionIntensityPaymentPercent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionIntensityPaymentPercentInput!
  ): CreateEmissionIntensityPaymentPercentPayload

  """
  Creates a single `EmissionIntensityReport`.
  """
  createEmissionIntensityReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEmissionIntensityReportInput!
  ): CreateEmissionIntensityReportPayload

  """
  Creates a single `Form`.
  """
  createForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormInput!
  ): CreateFormPayload

  """
  Creates a single `FormChange`.
  """
  createFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFormChangeInput!
  ): CreateFormChangePayload

  """
  Creates a single `FundingParameter`.
  """
  createFundingParameter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingParameterInput!
  ): CreateFundingParameterPayload

  """
  Creates a single `FundingStream`.
  """
  createFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamInput!
  ): CreateFundingStreamPayload

  """
  Creates a single `FundingStreamProjectStatus`.
  """
  createFundingStreamProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamProjectStatusInput!
  ): CreateFundingStreamProjectStatusPayload

  """
  Creates a single `FundingStreamRfp`.
  """
  createFundingStreamRfp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFundingStreamRfpInput!
  ): CreateFundingStreamRfpPayload

  """
  Creates a single `MilestoneReport`.
  """
  createMilestoneReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMilestoneReportInput!
  ): CreateMilestoneReportPayload

  """
  Creates a single `Operator`.
  """
  createOperator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOperatorInput!
  ): CreateOperatorPayload

  """
  Creates a single `Payment`.
  """
  createPayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePaymentInput!
  ): CreatePaymentPayload

  """
  Creates a single `Project`.
  """
  createProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectInput!
  ): CreateProjectPayload

  """
  Creates a single `ProjectContact`.
  """
  createProjectContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectContactInput!
  ): CreateProjectContactPayload

  """
  Creates a single `ProjectManager`.
  """
  createProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectManagerInput!
  ): CreateProjectManagerPayload

  """
  Creates a single `ProjectManagerLabel`.
  """
  createProjectManagerLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectManagerLabelInput!
  ): CreateProjectManagerLabelPayload

  """
  Creates a single `ProjectRevision`.
  """
  createProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectRevisionInput!
  ): CreateProjectRevisionPayload

  """
  Creates a single `ProjectRevisionAmendmentType`.
  """
  createProjectRevisionAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectRevisionAmendmentTypeInput!
  ): CreateProjectRevisionAmendmentTypePayload

  """
  Creates a single `ProjectStatus`.
  """
  createProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectStatusInput!
  ): CreateProjectStatusPayload

  """
  Creates a single `ProjectType`.
  """
  createProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProjectTypeInput!
  ): CreateProjectTypePayload

  """
  Creates a single `ReportType`.
  """
  createReportType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReportTypeInput!
  ): CreateReportTypePayload

  """
  Creates a single `ReportingRequirement`.
  """
  createReportingRequirement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReportingRequirementInput!
  ): CreateReportingRequirementPayload

  """
  Creates a single `RevisionStatus`.
  """
  createRevisionStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRevisionStatusInput!
  ): CreateRevisionStatusPayload

  """
  Creates a single `RevisionType`.
  """
  createRevisionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRevisionTypeInput!
  ): CreateRevisionTypePayload

  """
  Creates a single `Sector`.
  """
  createSector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSectorInput!
  ): CreateSectorPayload

  """
  Updates a single `AdditionalFundingSource` using its globally unique id and a patch.
  """
  updateAdditionalFundingSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalFundingSourceInput!
  ): UpdateAdditionalFundingSourcePayload

  """
  Updates a single `AdditionalFundingSource` using a unique key and a patch.
  """
  updateAdditionalFundingSourceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalFundingSourceByIdInput!
  ): UpdateAdditionalFundingSourcePayload

  """
  Updates a single `AdditionalFundingSourceStatus` using its globally unique id and a patch.
  """
  updateAdditionalFundingSourceStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalFundingSourceStatusInput!
  ): UpdateAdditionalFundingSourceStatusPayload

  """
  Updates a single `AdditionalFundingSourceStatus` using a unique key and a patch.
  """
  updateAdditionalFundingSourceStatusByStatusName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAdditionalFundingSourceStatusByStatusNameInput!
  ): UpdateAdditionalFundingSourceStatusPayload

  """
  Updates a single `AmendmentType` using its globally unique id and a patch.
  """
  updateAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAmendmentTypeInput!
  ): UpdateAmendmentTypePayload

  """
  Updates a single `AmendmentType` using a unique key and a patch.
  """
  updateAmendmentTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAmendmentTypeByNameInput!
  ): UpdateAmendmentTypePayload

  """
  Updates a single `Attachment` using its globally unique id and a patch.
  """
  updateAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentInput!
  ): UpdateAttachmentPayload

  """
  Updates a single `Attachment` using a unique key and a patch.
  """
  updateAttachmentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAttachmentByIdInput!
  ): UpdateAttachmentPayload

  """
  Updates a single `ChangeStatus` using its globally unique id and a patch.
  """
  updateChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusInput!
  ): UpdateChangeStatusPayload

  """
  Updates a single `ChangeStatus` using a unique key and a patch.
  """
  updateChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChangeStatusByStatusInput!
  ): UpdateChangeStatusPayload

  """
  Updates a single `CifUser` using its globally unique id and a patch.
  """
  updateCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserInput!
  ): UpdateCifUserPayload

  """
  Updates a single `CifUser` using a unique key and a patch.
  """
  updateCifUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCifUserByIdInput!
  ): UpdateCifUserPayload

  """
  Updates a single `Contact` using its globally unique id and a patch.
  """
  updateContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContactInput!
  ): UpdateContactPayload

  """
  Updates a single `Contact` using a unique key and a patch.
  """
  updateContactById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContactByIdInput!
  ): UpdateContactPayload

  """
  Updates a single `Contact` using a unique key and a patch.
  """
  updateContactByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateContactByEmailInput!
  ): UpdateContactPayload

  """
  Updates a single `EmissionIntensityPaymentPercent` using its globally unique id and a patch.
  """
  updateEmissionIntensityPaymentPercent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityPaymentPercentInput!
  ): UpdateEmissionIntensityPaymentPercentPayload

  """
  Updates a single `EmissionIntensityPaymentPercent` using a unique key and a patch.
  """
  updateEmissionIntensityPaymentPercentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityPaymentPercentByIdInput!
  ): UpdateEmissionIntensityPaymentPercentPayload

  """
  Updates a single `EmissionIntensityPaymentPercent` using a unique key and a patch.
  """
  updateEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformanceInput!
  ): UpdateEmissionIntensityPaymentPercentPayload

  """
  Updates a single `EmissionIntensityReport` using its globally unique id and a patch.
  """
  updateEmissionIntensityReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityReportInput!
  ): UpdateEmissionIntensityReportPayload

  """
  Updates a single `EmissionIntensityReport` using a unique key and a patch.
  """
  updateEmissionIntensityReportById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEmissionIntensityReportByIdInput!
  ): UpdateEmissionIntensityReportPayload

  """
  Updates a single `Form` using its globally unique id and a patch.
  """
  updateForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormInput!
  ): UpdateFormPayload

  """
  Updates a single `Form` using a unique key and a patch.
  """
  updateFormById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormByIdInput!
  ): UpdateFormPayload

  """
  Updates a single `Form` using a unique key and a patch.
  """
  updateFormBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormBySlugInput!
  ): UpdateFormPayload

  """
  Updates a single `FormChange` using its globally unique id and a patch.
  """
  updateFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormChangeInput!
  ): UpdateFormChangePayload

  """
  Updates a single `FormChange` using a unique key and a patch.
  """
  updateFormChangeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFormChangeByIdInput!
  ): UpdateFormChangePayload

  """
  Updates a single `FundingParameter` using its globally unique id and a patch.
  """
  updateFundingParameter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingParameterInput!
  ): UpdateFundingParameterPayload

  """
  Updates a single `FundingParameter` using a unique key and a patch.
  """
  updateFundingParameterById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingParameterByIdInput!
  ): UpdateFundingParameterPayload

  """
  Updates a single `FundingStream` using its globally unique id and a patch.
  """
  updateFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamInput!
  ): UpdateFundingStreamPayload

  """
  Updates a single `FundingStream` using a unique key and a patch.
  """
  updateFundingStreamById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamByIdInput!
  ): UpdateFundingStreamPayload

  """
  Updates a single `FundingStreamProjectStatus` using its globally unique id and a patch.
  """
  updateFundingStreamProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamProjectStatusInput!
  ): UpdateFundingStreamProjectStatusPayload

  """
  Updates a single `FundingStreamProjectStatus` using a unique key and a patch.
  """
  updateFundingStreamProjectStatusById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamProjectStatusByIdInput!
  ): UpdateFundingStreamProjectStatusPayload

  """
  Updates a single `FundingStreamRfp` using its globally unique id and a patch.
  """
  updateFundingStreamRfp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpInput!
  ): UpdateFundingStreamRfpPayload

  """
  Updates a single `FundingStreamRfp` using a unique key and a patch.
  """
  updateFundingStreamRfpById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFundingStreamRfpByIdInput!
  ): UpdateFundingStreamRfpPayload

  """
  Updates a single `MilestoneReport` using its globally unique id and a patch.
  """
  updateMilestoneReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMilestoneReportInput!
  ): UpdateMilestoneReportPayload

  """
  Updates a single `MilestoneReport` using a unique key and a patch.
  """
  updateMilestoneReportById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMilestoneReportByIdInput!
  ): UpdateMilestoneReportPayload

  """
  Updates a single `Operator` using its globally unique id and a patch.
  """
  updateOperator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOperatorInput!
  ): UpdateOperatorPayload

  """
  Updates a single `Operator` using a unique key and a patch.
  """
  updateOperatorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOperatorByIdInput!
  ): UpdateOperatorPayload

  """
  Updates a single `Operator` using a unique key and a patch.
  """
  updateOperatorBySwrsOrganisationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOperatorBySwrsOrganisationIdInput!
  ): UpdateOperatorPayload

  """
  Updates a single `Payment` using its globally unique id and a patch.
  """
  updatePayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePaymentInput!
  ): UpdatePaymentPayload

  """
  Updates a single `Payment` using a unique key and a patch.
  """
  updatePaymentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePaymentByIdInput!
  ): UpdatePaymentPayload

  """
  Updates a single `Project` using its globally unique id and a patch.
  """
  updateProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload

  """
  Updates a single `Project` using a unique key and a patch.
  """
  updateProjectById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectByIdInput!
  ): UpdateProjectPayload

  """
  Updates a single `Project` using a unique key and a patch.
  """
  updateProjectByProposalReference(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectByProposalReferenceInput!
  ): UpdateProjectPayload

  """
  Updates a single `ProjectContact` using its globally unique id and a patch.
  """
  updateProjectContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectContactInput!
  ): UpdateProjectContactPayload

  """
  Updates a single `ProjectContact` using a unique key and a patch.
  """
  updateProjectContactById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectContactByIdInput!
  ): UpdateProjectContactPayload

  """
  Updates a single `ProjectManager` using its globally unique id and a patch.
  """
  updateProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerInput!
  ): UpdateProjectManagerPayload

  """
  Updates a single `ProjectManager` using a unique key and a patch.
  """
  updateProjectManagerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerByIdInput!
  ): UpdateProjectManagerPayload

  """
  Updates a single `ProjectManagerLabel` using its globally unique id and a patch.
  """
  updateProjectManagerLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerLabelInput!
  ): UpdateProjectManagerLabelPayload

  """
  Updates a single `ProjectManagerLabel` using a unique key and a patch.
  """
  updateProjectManagerLabelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerLabelByIdInput!
  ): UpdateProjectManagerLabelPayload

  """
  Updates a single `ProjectManagerLabel` using a unique key and a patch.
  """
  updateProjectManagerLabelByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectManagerLabelByLabelInput!
  ): UpdateProjectManagerLabelPayload

  """
  Updates a single `ProjectRevision` using its globally unique id and a patch.
  """
  updateProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionInput!
  ): UpdateProjectRevisionPayload

  """
  Updates a single `ProjectRevision` using a unique key and a patch.
  """
  updateProjectRevisionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionByIdInput!
  ): UpdateProjectRevisionPayload

  """
  Updates a single `ProjectRevisionAmendmentType` using its globally unique id and a patch.
  """
  updateProjectRevisionAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionAmendmentTypeInput!
  ): UpdateProjectRevisionAmendmentTypePayload

  """
  Updates a single `ProjectRevisionAmendmentType` using a unique key and a patch.
  """
  updateProjectRevisionAmendmentTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectRevisionAmendmentTypeByIdInput!
  ): UpdateProjectRevisionAmendmentTypePayload

  """
  Updates a single `ProjectStatus` using its globally unique id and a patch.
  """
  updateProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectStatusInput!
  ): UpdateProjectStatusPayload

  """
  Updates a single `ProjectStatus` using a unique key and a patch.
  """
  updateProjectStatusById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectStatusByIdInput!
  ): UpdateProjectStatusPayload

  """
  Updates a single `ProjectType` using its globally unique id and a patch.
  """
  updateProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectTypeInput!
  ): UpdateProjectTypePayload

  """
  Updates a single `ProjectType` using a unique key and a patch.
  """
  updateProjectTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectTypeByIdInput!
  ): UpdateProjectTypePayload

  """
  Updates a single `ProjectType` using a unique key and a patch.
  """
  updateProjectTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProjectTypeByNameInput!
  ): UpdateProjectTypePayload

  """
  Updates a single `ReportType` using its globally unique id and a patch.
  """
  updateReportType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportTypeInput!
  ): UpdateReportTypePayload

  """
  Updates a single `ReportType` using a unique key and a patch.
  """
  updateReportTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportTypeByNameInput!
  ): UpdateReportTypePayload

  """
  Updates a single `ReportingRequirement` using its globally unique id and a patch.
  """
  updateReportingRequirement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportingRequirementInput!
  ): UpdateReportingRequirementPayload

  """
  Updates a single `ReportingRequirement` using a unique key and a patch.
  """
  updateReportingRequirementById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReportingRequirementByIdInput!
  ): UpdateReportingRequirementPayload

  """
  Updates a single `RevisionStatus` using its globally unique id and a patch.
  """
  updateRevisionStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRevisionStatusInput!
  ): UpdateRevisionStatusPayload

  """
  Updates a single `RevisionStatus` using a unique key and a patch.
  """
  updateRevisionStatusByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRevisionStatusByNameInput!
  ): UpdateRevisionStatusPayload

  """
  Updates a single `RevisionType` using its globally unique id and a patch.
  """
  updateRevisionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRevisionTypeInput!
  ): UpdateRevisionTypePayload

  """
  Updates a single `RevisionType` using a unique key and a patch.
  """
  updateRevisionTypeByType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRevisionTypeByTypeInput!
  ): UpdateRevisionTypePayload

  """
  Updates a single `Sector` using its globally unique id and a patch.
  """
  updateSector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSectorInput!
  ): UpdateSectorPayload

  """
  Updates a single `Sector` using a unique key and a patch.
  """
  updateSectorBySectorName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSectorBySectorNameInput!
  ): UpdateSectorPayload

  """
  Deletes a single `AdditionalFundingSource` using its globally unique id.
  """
  deleteAdditionalFundingSource(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalFundingSourceInput!
  ): DeleteAdditionalFundingSourcePayload

  """
  Deletes a single `AdditionalFundingSource` using a unique key.
  """
  deleteAdditionalFundingSourceById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalFundingSourceByIdInput!
  ): DeleteAdditionalFundingSourcePayload

  """
  Deletes a single `AdditionalFundingSourceStatus` using its globally unique id.
  """
  deleteAdditionalFundingSourceStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalFundingSourceStatusInput!
  ): DeleteAdditionalFundingSourceStatusPayload

  """
  Deletes a single `AdditionalFundingSourceStatus` using a unique key.
  """
  deleteAdditionalFundingSourceStatusByStatusName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAdditionalFundingSourceStatusByStatusNameInput!
  ): DeleteAdditionalFundingSourceStatusPayload

  """
  Deletes a single `AmendmentType` using its globally unique id.
  """
  deleteAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAmendmentTypeInput!
  ): DeleteAmendmentTypePayload

  """
  Deletes a single `AmendmentType` using a unique key.
  """
  deleteAmendmentTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAmendmentTypeByNameInput!
  ): DeleteAmendmentTypePayload

  """
  Deletes a single `Attachment` using its globally unique id.
  """
  deleteAttachment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentInput!
  ): DeleteAttachmentPayload

  """
  Deletes a single `Attachment` using a unique key.
  """
  deleteAttachmentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAttachmentByIdInput!
  ): DeleteAttachmentPayload

  """
  Deletes a single `ChangeStatus` using its globally unique id.
  """
  deleteChangeStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusInput!
  ): DeleteChangeStatusPayload

  """
  Deletes a single `ChangeStatus` using a unique key.
  """
  deleteChangeStatusByStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChangeStatusByStatusInput!
  ): DeleteChangeStatusPayload

  """
  Deletes a single `CifUser` using its globally unique id.
  """
  deleteCifUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserInput!
  ): DeleteCifUserPayload

  """
  Deletes a single `CifUser` using a unique key.
  """
  deleteCifUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCifUserByIdInput!
  ): DeleteCifUserPayload

  """
  Deletes a single `Contact` using its globally unique id.
  """
  deleteContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContactInput!
  ): DeleteContactPayload

  """
  Deletes a single `Contact` using a unique key.
  """
  deleteContactById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContactByIdInput!
  ): DeleteContactPayload

  """
  Deletes a single `Contact` using a unique key.
  """
  deleteContactByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteContactByEmailInput!
  ): DeleteContactPayload

  """
  Deletes a single `EmissionIntensityPaymentPercent` using its globally unique id.
  """
  deleteEmissionIntensityPaymentPercent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityPaymentPercentInput!
  ): DeleteEmissionIntensityPaymentPercentPayload

  """
  Deletes a single `EmissionIntensityPaymentPercent` using a unique key.
  """
  deleteEmissionIntensityPaymentPercentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityPaymentPercentByIdInput!
  ): DeleteEmissionIntensityPaymentPercentPayload

  """
  Deletes a single `EmissionIntensityPaymentPercent` using a unique key.
  """
  deleteEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformanceInput!
  ): DeleteEmissionIntensityPaymentPercentPayload

  """
  Deletes a single `EmissionIntensityReport` using its globally unique id.
  """
  deleteEmissionIntensityReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityReportInput!
  ): DeleteEmissionIntensityReportPayload

  """
  Deletes a single `EmissionIntensityReport` using a unique key.
  """
  deleteEmissionIntensityReportById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEmissionIntensityReportByIdInput!
  ): DeleteEmissionIntensityReportPayload

  """
  Deletes a single `Form` using its globally unique id.
  """
  deleteForm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormInput!
  ): DeleteFormPayload

  """
  Deletes a single `Form` using a unique key.
  """
  deleteFormById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormByIdInput!
  ): DeleteFormPayload

  """
  Deletes a single `Form` using a unique key.
  """
  deleteFormBySlug(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormBySlugInput!
  ): DeleteFormPayload

  """
  Deletes a single `FormChange` using its globally unique id.
  """
  deleteFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeInput!
  ): DeleteFormChangePayload

  """
  Deletes a single `FormChange` using a unique key.
  """
  deleteFormChangeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFormChangeByIdInput!
  ): DeleteFormChangePayload

  """
  Deletes a single `FundingParameter` using its globally unique id.
  """
  deleteFundingParameter(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingParameterInput!
  ): DeleteFundingParameterPayload

  """
  Deletes a single `FundingParameter` using a unique key.
  """
  deleteFundingParameterById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingParameterByIdInput!
  ): DeleteFundingParameterPayload

  """
  Deletes a single `FundingStream` using its globally unique id.
  """
  deleteFundingStream(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamInput!
  ): DeleteFundingStreamPayload

  """
  Deletes a single `FundingStream` using a unique key.
  """
  deleteFundingStreamById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamByIdInput!
  ): DeleteFundingStreamPayload

  """
  Deletes a single `FundingStreamProjectStatus` using its globally unique id.
  """
  deleteFundingStreamProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamProjectStatusInput!
  ): DeleteFundingStreamProjectStatusPayload

  """
  Deletes a single `FundingStreamProjectStatus` using a unique key.
  """
  deleteFundingStreamProjectStatusById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamProjectStatusByIdInput!
  ): DeleteFundingStreamProjectStatusPayload

  """
  Deletes a single `FundingStreamRfp` using its globally unique id.
  """
  deleteFundingStreamRfp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpInput!
  ): DeleteFundingStreamRfpPayload

  """
  Deletes a single `FundingStreamRfp` using a unique key.
  """
  deleteFundingStreamRfpById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFundingStreamRfpByIdInput!
  ): DeleteFundingStreamRfpPayload

  """
  Deletes a single `MilestoneReport` using its globally unique id.
  """
  deleteMilestoneReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMilestoneReportInput!
  ): DeleteMilestoneReportPayload

  """
  Deletes a single `MilestoneReport` using a unique key.
  """
  deleteMilestoneReportById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMilestoneReportByIdInput!
  ): DeleteMilestoneReportPayload

  """
  Deletes a single `Operator` using its globally unique id.
  """
  deleteOperator(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOperatorInput!
  ): DeleteOperatorPayload

  """
  Deletes a single `Operator` using a unique key.
  """
  deleteOperatorById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOperatorByIdInput!
  ): DeleteOperatorPayload

  """
  Deletes a single `Operator` using a unique key.
  """
  deleteOperatorBySwrsOrganisationId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOperatorBySwrsOrganisationIdInput!
  ): DeleteOperatorPayload

  """
  Deletes a single `Payment` using its globally unique id.
  """
  deletePayment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePaymentInput!
  ): DeletePaymentPayload

  """
  Deletes a single `Payment` using a unique key.
  """
  deletePaymentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePaymentByIdInput!
  ): DeletePaymentPayload

  """
  Deletes a single `Project` using its globally unique id.
  """
  deleteProject(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectInput!
  ): DeleteProjectPayload

  """
  Deletes a single `Project` using a unique key.
  """
  deleteProjectById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectByIdInput!
  ): DeleteProjectPayload

  """
  Deletes a single `Project` using a unique key.
  """
  deleteProjectByProposalReference(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectByProposalReferenceInput!
  ): DeleteProjectPayload

  """
  Deletes a single `ProjectContact` using its globally unique id.
  """
  deleteProjectContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectContactInput!
  ): DeleteProjectContactPayload

  """
  Deletes a single `ProjectContact` using a unique key.
  """
  deleteProjectContactById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectContactByIdInput!
  ): DeleteProjectContactPayload

  """
  Deletes a single `ProjectManager` using its globally unique id.
  """
  deleteProjectManager(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerInput!
  ): DeleteProjectManagerPayload

  """
  Deletes a single `ProjectManager` using a unique key.
  """
  deleteProjectManagerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerByIdInput!
  ): DeleteProjectManagerPayload

  """
  Deletes a single `ProjectManagerLabel` using its globally unique id.
  """
  deleteProjectManagerLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerLabelInput!
  ): DeleteProjectManagerLabelPayload

  """
  Deletes a single `ProjectManagerLabel` using a unique key.
  """
  deleteProjectManagerLabelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerLabelByIdInput!
  ): DeleteProjectManagerLabelPayload

  """
  Deletes a single `ProjectManagerLabel` using a unique key.
  """
  deleteProjectManagerLabelByLabel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectManagerLabelByLabelInput!
  ): DeleteProjectManagerLabelPayload

  """
  Deletes a single `ProjectRevision` using its globally unique id.
  """
  deleteProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionInput!
  ): DeleteProjectRevisionPayload

  """
  Deletes a single `ProjectRevision` using a unique key.
  """
  deleteProjectRevisionById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionByIdInput!
  ): DeleteProjectRevisionPayload

  """
  Deletes a single `ProjectRevisionAmendmentType` using its globally unique id.
  """
  deleteProjectRevisionAmendmentType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionAmendmentTypeInput!
  ): DeleteProjectRevisionAmendmentTypePayload

  """
  Deletes a single `ProjectRevisionAmendmentType` using a unique key.
  """
  deleteProjectRevisionAmendmentTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectRevisionAmendmentTypeByIdInput!
  ): DeleteProjectRevisionAmendmentTypePayload

  """
  Deletes a single `ProjectStatus` using its globally unique id.
  """
  deleteProjectStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectStatusInput!
  ): DeleteProjectStatusPayload

  """
  Deletes a single `ProjectStatus` using a unique key.
  """
  deleteProjectStatusById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectStatusByIdInput!
  ): DeleteProjectStatusPayload

  """
  Deletes a single `ProjectType` using its globally unique id.
  """
  deleteProjectType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectTypeInput!
  ): DeleteProjectTypePayload

  """
  Deletes a single `ProjectType` using a unique key.
  """
  deleteProjectTypeById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectTypeByIdInput!
  ): DeleteProjectTypePayload

  """
  Deletes a single `ProjectType` using a unique key.
  """
  deleteProjectTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProjectTypeByNameInput!
  ): DeleteProjectTypePayload

  """
  Deletes a single `ReportType` using its globally unique id.
  """
  deleteReportType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportTypeInput!
  ): DeleteReportTypePayload

  """
  Deletes a single `ReportType` using a unique key.
  """
  deleteReportTypeByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportTypeByNameInput!
  ): DeleteReportTypePayload

  """
  Deletes a single `ReportingRequirement` using its globally unique id.
  """
  deleteReportingRequirement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportingRequirementInput!
  ): DeleteReportingRequirementPayload

  """
  Deletes a single `ReportingRequirement` using a unique key.
  """
  deleteReportingRequirementById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReportingRequirementByIdInput!
  ): DeleteReportingRequirementPayload

  """
  Deletes a single `RevisionStatus` using its globally unique id.
  """
  deleteRevisionStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRevisionStatusInput!
  ): DeleteRevisionStatusPayload

  """
  Deletes a single `RevisionStatus` using a unique key.
  """
  deleteRevisionStatusByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRevisionStatusByNameInput!
  ): DeleteRevisionStatusPayload

  """
  Deletes a single `RevisionType` using its globally unique id.
  """
  deleteRevisionType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRevisionTypeInput!
  ): DeleteRevisionTypePayload

  """
  Deletes a single `RevisionType` using a unique key.
  """
  deleteRevisionTypeByType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRevisionTypeByTypeInput!
  ): DeleteRevisionTypePayload

  """
  Deletes a single `Sector` using its globally unique id.
  """
  deleteSector(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSectorInput!
  ): DeleteSectorPayload

  """
  Deletes a single `Sector` using a unique key.
  """
  deleteSectorBySectorName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSectorBySectorNameInput!
  ): DeleteSectorPayload
  addAdditionalFundingSourceToRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddAdditionalFundingSourceToRevisionInput!
  ): AddAdditionalFundingSourceToRevisionPayload
  addContactToRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddContactToRevisionInput!
  ): AddContactToRevisionPayload
  addEmissionIntensityReportToRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AddEmissionIntensityReportToRevisionInput!
  ): AddEmissionIntensityReportToRevisionPayload

  """
  Custom mutation to commit a form_change record via the API. Only used for records that are independent of a project such as the lists of contacts and operators.
  """
  commitFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CommitFormChangeInput!
  ): CommitFormChangePayload

  """
  Commits a project_revision and all of its form changes
  """
  commitProjectRevision(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CommitProjectRevisionInput!
  ): CommitProjectRevisionPayload

  """
  Custom mutation to discard a form change for an additional funding source.
  """
  discardAdditionalFundingSourceFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DiscardAdditionalFundingSourceFormChangeInput!
  ): DiscardAdditionalFundingSourceFormChangePayload
  discardEmissionIntensityReport(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DiscardEmissionIntensityReportInput!
  ): DiscardEmissionIntensityReportPayload
  discardFundingParameterFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DiscardFundingParameterFormChangeInput!
  ): DiscardFundingParameterFormChangePayload

  """
  Custom mutation to generate annual reports for a revision between emissions intensity report_due_date and project_assets_life_end_date.
  """
  generateAnnualReports(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GenerateAnnualReportsInput!
  ): GenerateAnnualReportsPayload

  """
  Custom mutation to generate quarterly reports for a revision between contract_start_date and  measurement_period_end_date.
  """
  generateQuarterlyReports(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GenerateQuarterlyReportsInput!
  ): GenerateQuarterlyReportsPayload
  stageDirtyFormChanges(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: StageDirtyFormChangesInput!
  ): StageDirtyFormChangesPayload

  """
  Custom mutation that stages a form_change record
  """
  stageFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: StageFormChangeInput!
  ): StageFormChangePayload
  undoFormChanges(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UndoFormChangesInput!
  ): UndoFormChangesPayload

  """
  Custom mutation that updates the milestone form change (adds calculated values to new_form_data)
  """
  updateMilestoneFormChange(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMilestoneFormChangeInput!
  ): UpdateMilestoneFormChangePayload

  """
  Function creates a user if a user with the matching session_sub does not exist, otherwise returns the matching user
  """
  updateOrCreateUserFromSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrCreateUserFromSessionInput!
  ): UpdateOrCreateUserFromSessionPayload
}

"""
The output of our create `AdditionalFundingSource` mutation.
"""
type CreateAdditionalFundingSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `AdditionalFundingSource` that was created by this mutation.
  """
  additionalFundingSource: AdditionalFundingSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `AdditionalFundingSource`.
  """
  projectByProjectId: Project

  """
  Reads a single `AdditionalFundingSourceStatus` that is related to this `AdditionalFundingSource`.
  """
  additionalFundingSourceStatusByStatus: AdditionalFundingSourceStatus

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `AdditionalFundingSource`. May be used by Relay 1.
  """
  additionalFundingSourceEdge(
    """
    The method to use when ordering `AdditionalFundingSource`.
    """
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesEdge
}

"""
All input for the create `AdditionalFundingSource` mutation.
"""
input CreateAdditionalFundingSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `AdditionalFundingSource` to be created by this mutation.
  """
  additionalFundingSource: AdditionalFundingSourceInput!
}

"""
An input for mutations affecting `AdditionalFundingSource`
"""
input AdditionalFundingSourceInput {
  """
  Foreign key to the project
  """
  projectId: Int!

  """
  The status of the additional funding source request(e.g. awaiting approval, approved, denied)
  """
  status: String

  """
  The source of the additional funding source
  """
  source: String

  """
  The amount of the additional funding source
  """
  amount: BigFloat

  """
  The zero-based index of the source in the project
  """
  sourceIndex: Int!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `AdditionalFundingSourceStatus` mutation.
"""
type CreateAdditionalFundingSourceStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `AdditionalFundingSourceStatus` that was created by this mutation.
  """
  additionalFundingSourceStatus: AdditionalFundingSourceStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `AdditionalFundingSourceStatus`. May be used by Relay 1.
  """
  additionalFundingSourceStatusEdge(
    """
    The method to use when ordering `AdditionalFundingSourceStatus`.
    """
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesEdge
}

"""
All input for the create `AdditionalFundingSourceStatus` mutation.
"""
input CreateAdditionalFundingSourceStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `AdditionalFundingSourceStatus` to be created by this mutation.
  """
  additionalFundingSourceStatus: AdditionalFundingSourceStatusInput!
}

"""
An input for mutations affecting `AdditionalFundingSourceStatus`
"""
input AdditionalFundingSourceStatusInput {
  """
  The name of the status as the primary key
  """
  statusName: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `AmendmentType` mutation.
"""
type CreateAmendmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `AmendmentType` that was created by this mutation.
  """
  amendmentType: AmendmentType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `AmendmentType`. May be used by Relay 1.
  """
  amendmentTypeEdge(
    """
    The method to use when ordering `AmendmentType`.
    """
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesEdge
}

"""
All input for the create `AmendmentType` mutation.
"""
input CreateAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `AmendmentType` to be created by this mutation.
  """
  amendmentType: AmendmentTypeInput!
}

"""
An input for mutations affecting `AmendmentType`
"""
input AmendmentTypeInput {
  """
  The name of the amendment type as the primary key
  """
  name: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `Attachment` mutation.
"""
type CreateAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Attachment` that was created by this mutation.
  """
  attachment: Attachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `Attachment`.
  """
  projectByProjectId: Project

  """
  Reads a single `ProjectStatus` that is related to this `Attachment`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Attachment`. May be used by Relay 1.
  """
  attachmentEdge(
    """
    The method to use when ordering `Attachment`.
    """
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""
All input for the create `Attachment` mutation.
"""
input CreateAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Attachment` to be created by this mutation.
  """
  attachment: AttachmentInput!
}

"""
An input for mutations affecting `Attachment`
"""
input AttachmentInput {
  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """
  Description of the attachment
  """
  description: String

  """
  Original uploaded file name
  """
  fileName: String

  """
  Original uploaded file type
  """
  fileType: String

  """
  Original uploaded file size
  """
  fileSize: String

  """
  The id of the project (cif.project.id) that the attachment was uploaded to
  """
  projectId: Int!

  """
  The id of the project_status (cif.project_status.id) that the attachment references
  """
  projectStatusId: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `ChangeStatus` mutation.
"""
type CreateChangeStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ChangeStatus` that was created by this mutation.
  """
  changeStatus: ChangeStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ChangeStatus`. May be used by Relay 1.
  """
  changeStatusEdge(
    """
    The method to use when ordering `ChangeStatus`.
    """
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge
}

"""
All input for the create `ChangeStatus` mutation.
"""
input CreateChangeStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ChangeStatus` to be created by this mutation.
  """
  changeStatus: ChangeStatusInput!
}

"""
An input for mutations affecting `ChangeStatus`
"""
input ChangeStatusInput {
  """
  The name of the status, e.g. "pending", "committed", ...
  """
  status: String!

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """
  Whether that status is active
  """
  active: Boolean

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `CifUser` mutation.
"""
type CreateCifUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CifUser` that was created by this mutation.
  """
  cifUser: CifUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `CifUser`. May be used by Relay 1.
  """
  cifUserEdge(
    """
    The method to use when ordering `CifUser`.
    """
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge
}

"""
All input for the create `CifUser` mutation.
"""
input CreateCifUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `CifUser` to be created by this mutation.
  """
  cifUser: CifUserInput!
}

"""
An input for mutations affecting `CifUser`
"""
input CifUserInput {
  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String!

  """
  User's first name
  """
  givenName: String

  """
  User's last name
  """
  familyName: String

  """
  User's email address
  """
  emailAddress: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Boolean value determines whether a legacy user can be updated. Legacy users may be updated only once.
  """
  allowSubUpdate: Boolean
}

"""
The output of our create `Contact` mutation.
"""
type CreateContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Contact` that was created by this mutation.
  """
  contact: Contact

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Contact`. May be used by Relay 1.
  """
  contactEdge(
    """
    The method to use when ordering `Contact`.
    """
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsEdge
}

"""
All input for the create `Contact` mutation.
"""
input CreateContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Contact` to be created by this mutation.
  """
  contact: ContactInput!
}

"""
An input for mutations affecting `Contact`
"""
input ContactInput {
  """
  The given name of this contact
  """
  givenName: String

  """
  The family name of this contact
  """
  familyName: String

  """
  The email address, and a unique identifier, of this contact
  """
  email: String!

  """
  The phone number of this contact, stored in E.164 format
  """
  phone: String

  """
  The phone extension of this contact
  """
  phoneExt: String

  """
  The company this contact works for
  """
  companyName: String

  """
  The role of this contact within their company
  """
  contactPosition: String

  """
  Any comments about this contact
  """
  comments: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `EmissionIntensityPaymentPercent` mutation.
"""
type CreateEmissionIntensityPaymentPercentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EmissionIntensityPaymentPercent` that was created by this mutation.
  """
  emissionIntensityPaymentPercent: EmissionIntensityPaymentPercent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `EmissionIntensityPaymentPercent`. May be used by Relay 1.
  """
  emissionIntensityPaymentPercentEdge(
    """
    The method to use when ordering `EmissionIntensityPaymentPercent`.
    """
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsEdge
}

"""
All input for the create `EmissionIntensityPaymentPercent` mutation.
"""
input CreateEmissionIntensityPaymentPercentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `EmissionIntensityPaymentPercent` to be created by this mutation.
  """
  emissionIntensityPaymentPercent: EmissionIntensityPaymentPercentInput!
}

"""
An input for mutations affecting `EmissionIntensityPaymentPercent`
"""
input EmissionIntensityPaymentPercentInput {
  """
  The calculated emission intensity performance.
  This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  """
  maxEmissionIntensityPerformance: BigFloat!

  """
  The payment percentage linked to the value of max_emission_intensity_performance
  """
  paymentPercentage: BigFloat!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `EmissionIntensityReport` mutation.
"""
type CreateEmissionIntensityReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EmissionIntensityReport` that was created by this mutation.
  """
  emissionIntensityReport: EmissionIntensityReport

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `EmissionIntensityReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `EmissionIntensityReport`. May be used by Relay 1.
  """
  emissionIntensityReportEdge(
    """
    The method to use when ordering `EmissionIntensityReport`.
    """
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsEdge
}

"""
All input for the create `EmissionIntensityReport` mutation.
"""
input CreateEmissionIntensityReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `EmissionIntensityReport` to be created by this mutation.
  """
  emissionIntensityReport: EmissionIntensityReportInput!
}

"""
An input for mutations affecting `EmissionIntensityReport`
"""
input EmissionIntensityReportInput {
  """
  Foreign key to for the reporting_requirement table
  """
  reportingRequirementId: Int!

  """
  The date when the measurement period starts for a project
  """
  measurementPeriodStartDate: Datetime

  """
  The date when the measurement period ends for a project
  """
  measurementPeriodEndDate: Datetime

  """
  The units in which the emissions are measured
  """
  emissionFunctionalUnit: String

  """
  The units in which the production item that generates emissions are measured
  """
  productionFunctionalUnit: String

  """
  The baseline emission intensity used as a benchmark for calculating emission intensity performance
  """
  baselineEmissionIntensity: BigFloat

  """
  The emission intensity defined as a target after a project has completed, used in calculating emission intensity performance
  """
  targetEmissionIntensity: BigFloat

  """
  The actual emission intensity achieved after a project has completed, used in calculating emission intensity performance
  """
  postProjectEmissionIntensity: BigFloat

  """
  The total amount of emission reduction expected from the outcome of this project
  """
  totalLifetimeEmissionReduction: BigFloat

  """
  User defined value corresponding to the calculated emission intensity performance. The calculated value gets manually rounded
  """
  adjustedEmissionsIntensityPerformance: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  An override field to manually adjust the calculated TEIMP holdback payment amount
  """
  adjustedHoldbackPaymentAmount: BigFloat

  """
  The date the payment was issued
  """
  dateSentToCsnr: Datetime
}

"""
The output of our create `Form` mutation.
"""
type CreateFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Form` that was created by this mutation.
  """
  form: Form

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Form`. May be used by Relay 1.
  """
  formEdge(
    """
    The method to use when ordering `Form`.
    """
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""
All input for the create `Form` mutation.
"""
input CreateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Form` to be created by this mutation.
  """
  form: FormInput!
}

"""
An input for mutations affecting `Form`
"""
input FormInput {
  """
  Unique short name identifier for the json_schema data.
  """
  slug: String!

  """
  The json_schema describing the shape of the form_change data for the corresponding form.
  """
  jsonSchema: JSON!

  """
  Metadata describing the json_schema.
  """
  description: String!

  """
  A function that can be used to dynamically alter the schema, such as altering constraints based on the contents of a table.
  """
  jsonSchemaGenerator: RegProcedure

  """
  A function that parses the form_change data into a table or set of tables.
  """
  formChangeCommitHandler: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `FormChange` mutation.
"""
type CreateFormChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FormChange` that was created by this mutation.
  """
  formChange: FormChange

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `FormChange`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `ChangeStatus` that is related to this `FormChange`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `Form` that is related to this `FormChange`.
  """
  formByJsonSchemaName: Form

  """
  Reads a single `FormChange` that is related to this `FormChange`.
  """
  formChangeByPreviousFormChangeId: FormChange

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByUpdatedBy: CifUser

  """
  An edge for our `FormChange`. May be used by Relay 1.
  """
  formChangeEdge(
    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge
}

"""
All input for the create `FormChange` mutation.
"""
input CreateFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `FormChange` to be created by this mutation.
  """
  formChange: FormChangeInput!
}

"""
An input for mutations affecting `FormChange`
"""
input FormChangeInput {
  """
  Unique ID for the form_change
  """
  newFormData: JSON

  """
  The operation this form change describes: create, update or archive
  """
  operation: FormChangeOperation!

  """
  The schema on which this form change applies
  """
  formDataSchemaName: String!

  """
  The table on which this form change applies
  """
  formDataTableName: String!

  """
  The id of the record on which this form change applies
  """
  formDataRecordId: Int

  """
  The project revision this change might be associated with (if known)
  """
  projectRevisionId: Int

  """
  The change status of this form change, foreign key to cif.change_status.
  """
  changeStatus: String

  """
  The name of the JSON schema to use for validation of this form data
  """
  jsonSchemaName: String!

  """
  The validation errors computed for this record's new_form_data and the json_schema_name schema
  """
  validationErrors: JSON

  """
  The id of the form_change record that preceded this one
  """
  previousFormChangeId: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime
}

"""
The output of our create `FundingParameter` mutation.
"""
type CreateFundingParameterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingParameter` that was created by this mutation.
  """
  fundingParameter: FundingParameter

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `FundingParameter`.
  """
  projectByProjectId: Project

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingParameter`. May be used by Relay 1.
  """
  fundingParameterEdge(
    """
    The method to use when ordering `FundingParameter`.
    """
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersEdge
}

"""
All input for the create `FundingParameter` mutation.
"""
input CreateFundingParameterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `FundingParameter` to be created by this mutation.
  """
  fundingParameter: FundingParameterInput!
}

"""
An input for mutations affecting `FundingParameter`
"""
input FundingParameterInput {
  """
  The related project for this data
  """
  projectId: Int!

  """
  Maximum funding amount for this project
  """
  maxFundingAmount: BigFloat

  """
  The percent of the total funding for a project that the Province is providing
  """
  provinceSharePercentage: BigFloat

  """
  The designated holdback percentage for each payment. CIF holds back this designated holdback percentage from each payment, and the cumulated holdback amount is the total possible value of the final (performance) milestone payment. The proponent is paid a portion of this possible total based on their project emission intensity performance relative to the target emission intensity
  """
  holdbackPercentage: BigFloat

  """
  Total anticipated funding amount inserted by CIF users
  """
  anticipatedFundingAmount: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  The funding provided by the proponent
  """
  proponentCost: BigFloat

  """
  contract start date to support the auto-generation of quarterly and annual reports
  """
  contractStartDate: Datetime

  """
  project assets life end date to support the auto-generation of quarterly and annual reports
  """
  projectAssetsLifeEndDate: Datetime
}

"""
The output of our create `FundingStream` mutation.
"""
type CreateFundingStreamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingStream` that was created by this mutation.
  """
  fundingStream: FundingStream

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingStream`. May be used by Relay 1.
  """
  fundingStreamEdge(
    """
    The method to use when ordering `FundingStream`.
    """
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge
}

"""
All input for the create `FundingStream` mutation.
"""
input CreateFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `FundingStream` to be created by this mutation.
  """
  fundingStream: FundingStreamInput!
}

"""
An input for mutations affecting `FundingStream`
"""
input FundingStreamInput {
  """
  Shortname of the funding stream program
  """
  name: String!

  """
  Description of the funding_stream
  """
  description: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `FundingStreamProjectStatus` mutation.
"""
type CreateFundingStreamProjectStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingStreamProjectStatus` that was created by this mutation.
  """
  fundingStreamProjectStatus: FundingStreamProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FundingStream` that is related to this `FundingStreamProjectStatus`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingStreamProjectStatus`. May be used by Relay 1.
  """
  fundingStreamProjectStatusEdge(
    """
    The method to use when ordering `FundingStreamProjectStatus`.
    """
    orderBy: [FundingStreamProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamProjectStatusesEdge
}

"""
All input for the create `FundingStreamProjectStatus` mutation.
"""
input CreateFundingStreamProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `FundingStreamProjectStatus` to be created by this mutation.
  """
  fundingStreamProjectStatus: FundingStreamProjectStatusInput!
}

"""
An input for mutations affecting `FundingStreamProjectStatus`
"""
input FundingStreamProjectStatusInput {
  """
  Foreign key referencing the funding_stream table
  """
  fundingStreamId: Int!

  """
  Foreign key refrencing the project_status table
  """
  projectStatusId: Int!

  """
  Defines a way to order the project statuses
  """
  sortingOrder: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `FundingStreamRfp` mutation.
"""
type CreateFundingStreamRfpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingStreamRfp` that was created by this mutation.
  """
  fundingStreamRfp: FundingStreamRfp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingStreamRfp`. May be used by Relay 1.
  """
  fundingStreamRfpEdge(
    """
    The method to use when ordering `FundingStreamRfp`.
    """
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsEdge
}

"""
All input for the create `FundingStreamRfp` mutation.
"""
input CreateFundingStreamRfpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `FundingStreamRfp` to be created by this mutation.
  """
  fundingStreamRfp: FundingStreamRfpInput!
}

"""
An input for mutations affecting `FundingStreamRfp`
"""
input FundingStreamRfpInput {
  """
  The year this funding stream rfp is associated with
  """
  year: Int!

  """
  The id of the funding_stream (cif.funding_stream.id) this rfp year is associated with
  """
  fundingStreamId: Int!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `MilestoneReport` mutation.
"""
type CreateMilestoneReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `MilestoneReport` that was created by this mutation.
  """
  milestoneReport: MilestoneReport

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `MilestoneReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `MilestoneReport`. May be used by Relay 1.
  """
  milestoneReportEdge(
    """
    The method to use when ordering `MilestoneReport`.
    """
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsEdge
}

"""
All input for the create `MilestoneReport` mutation.
"""
input CreateMilestoneReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `MilestoneReport` to be created by this mutation.
  """
  milestoneReport: MilestoneReportInput!
}

"""
An input for mutations affecting `MilestoneReport`
"""
input MilestoneReportInput {
  """
  Foreign key to the reporting_requirement_table
  """
  reportingRequirementId: Int!

  """
  The date where the work should be finished by. It can be automatically calculated based upon the type of milestone or manually overridden.
  Automatic calculations are as follows:
    - 30 days before report due date for general milestones
  """
  substantialCompletionDate: Datetime

  """
  The name of the person who certified the completion of the milestone
  """
  certifiedBy: String

  """
  The professional designation of the person who certified the completion of the milestone
  """
  certifierProfessionalDesignation: String

  """
  The maximum amount in dollars that can be applied to this milestone
  """
  maximumAmount: BigFloat

  """
  The total amount of expenses in dollars applied to this milestone
  """
  totalEligibleExpenses: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `Operator` mutation.
"""
type CreateOperatorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Operator` that was created by this mutation.
  """
  operator: Operator

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Operator`. May be used by Relay 1.
  """
  operatorEdge(
    """
    The method to use when ordering `Operator`.
    """
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsEdge
}

"""
All input for the create `Operator` mutation.
"""
input CreateOperatorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Operator` to be created by this mutation.
  """
  operator: OperatorInput!
}

"""
An input for mutations affecting `Operator`
"""
input OperatorInput {
  """
  The organisation ID from the ggircs database as assigned by the federal Single Window Reporting System
  """
  swrsOrganisationId: Int

  """
  The legal name of this operator
  """
  legalName: String

  """
  The trade name of this operator
  """
  tradeName: String

  """
  The legal name of this operator as last imported from SWRS
  """
  swrsLegalName: String

  """
  The trade name of this operator as last imported from SWRS
  """
  swrsTradeName: String

  """
  The bc registry id assigned to this operator
  """
  bcRegistryId: String

  """
  The operator code is a set of characters that uniquely identifies the operator and is used in the cif.project table as part of the propsal_reference
  """
  operatorCode: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `Payment` mutation.
"""
type CreatePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Payment` that was created by this mutation.
  """
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `Payment`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Payment`. May be used by Relay 1.
  """
  paymentEdge(
    """
    The method to use when ordering `Payment`.
    """
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsEdge
}

"""
All input for the create `Payment` mutation.
"""
input CreatePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Payment` to be created by this mutation.
  """
  payment: PaymentInput!
}

"""
An input for mutations affecting `Payment`
"""
input PaymentInput {
  """
  Foreign key references the cif.reporting_requirement table
  """
  reportingRequirementId: Int!

  """
  The adjusted value of the gross amount of the payment which is the amount before deducting any holdback amount
  """
  grossAmount: BigFloat

  """
  The adjusted value of the net amount of the payment which is the amount actually paid out, after deducting any holdback amount
  """
  netAmount: BigFloat

  """
  The date the payment was issued
  """
  dateSentToCsnr: Datetime

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `Project` mutation.
"""
type CreateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Project` that was created by this mutation.
  """
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Operator` that is related to this `Project`.
  """
  operatorByOperatorId: Operator

  """
  Reads a single `FundingStreamRfp` that is related to this `Project`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """
  Reads a single `ProjectStatus` that is related to this `Project`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `Sector` that is related to this `Project`.
  """
  sectorBySectorName: Sector

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `ProjectType` that is related to this `Project`.
  """
  projectTypeByProjectType: ProjectType

  """
  An edge for our `Project`. May be used by Relay 1.
  """
  projectEdge(
    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge
}

"""
All input for the create `Project` mutation.
"""
input CreateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Project` to be created by this mutation.
  """
  project: ProjectInput!
}

"""
An input for mutations affecting `Project`
"""
input ProjectInput {
  """
  Foreign key references the cif.operator table
  """
  operatorId: Int!

  """
  The id of the funding_stream_rfp (cif.funding_stream_rfp.id) that was selected when creating the project
  """
  fundingStreamRfpId: Int!

  """
  The id of the project_status (cif.project_status.id) that the project is currently in
  """
  projectStatusId: Int!

  """
  Unique identifier internal to the CIF team. As of the 2022 RFPs, the current format is YYYY-RFP-0-ABCD-000. Projects for the 2019 and 2020 RFPs may use a different format.
  """
  proposalReference: String!

  """
  Summary of the project
  """
  summary: String!

  """
  The name of the project
  """
  projectName: String!

  """
  The total amount of funding requested for the project
  """
  totalFundingRequest: BigFloat

  """
  The industry sector this project relates to
  """
  sectorName: String

  """
  Any additional information about this project in reference to the industry sector such as a sub-sector
  """
  additionalSectorInformation: String

  """
  General comments pertaining to the project
  """
  comments: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  The score of the project after evaluation by the CIF team
  """
  score: BigFloat

  """
  The type of the project (e.g. fuel switching)
  """
  projectType: String

  """
  The contract number of the project
  """
  contractNumber: String
}

"""
The output of our create `ProjectContact` mutation.
"""
type CreateProjectContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectContact` that was created by this mutation.
  """
  projectContact: ProjectContact

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectContact`.
  """
  projectByProjectId: Project

  """
  Reads a single `Contact` that is related to this `ProjectContact`.
  """
  contactByContactId: Contact

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectContact`. May be used by Relay 1.
  """
  projectContactEdge(
    """
    The method to use when ordering `ProjectContact`.
    """
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsEdge
}

"""
All input for the create `ProjectContact` mutation.
"""
input CreateProjectContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ProjectContact` to be created by this mutation.
  """
  projectContact: ProjectContactInput!
}

"""
An input for mutations affecting `ProjectContact`
"""
input ProjectContactInput {
  """
  Foreign key to the project
  """
  projectId: Int!

  """
  Foreign key to the contact
  """
  contactId: Int!

  """
  The zero-based index of the contact in the project
  """
  contactIndex: Int!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `ProjectManager` mutation.
"""
type CreateProjectManagerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectManager` that was created by this mutation.
  """
  projectManager: ProjectManager

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectManager`.
  """
  projectByProjectId: Project

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByCifUserId: CifUser

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectManager`. May be used by Relay 1.
  """
  projectManagerEdge(
    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge
}

"""
All input for the create `ProjectManager` mutation.
"""
input CreateProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ProjectManager` to be created by this mutation.
  """
  projectManager: ProjectManagerInput!
}

"""
An input for mutations affecting `ProjectManager`
"""
input ProjectManagerInput {
  """
  Foreign key to the project
  """
  projectId: Int!

  """
  Foreign key to the cif user
  """
  cifUserId: Int!

  """
  Foreign key to the project_manager_label table. Defines the list of labels that cif_users can be assigned to as a manager of a project
  """
  projectManagerLabelId: Int!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `ProjectManagerLabel` mutation.
"""
type CreateProjectManagerLabelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectManagerLabel` that was created by this mutation.
  """
  projectManagerLabel: ProjectManagerLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectManagerLabel`. May be used by Relay 1.
  """
  projectManagerLabelEdge(
    """
    The method to use when ordering `ProjectManagerLabel`.
    """
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsEdge
}

"""
All input for the create `ProjectManagerLabel` mutation.
"""
input CreateProjectManagerLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ProjectManagerLabel` to be created by this mutation.
  """
  projectManagerLabel: ProjectManagerLabelInput!
}

"""
An input for mutations affecting `ProjectManagerLabel`
"""
input ProjectManagerLabelInput {
  """
  The label that project managers can be assigned to a project as
  """
  label: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `ProjectRevision` mutation.
"""
type CreateProjectRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectRevision` that was created by this mutation.
  """
  projectRevision: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectRevision`.
  """
  projectByProjectId: Project

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  An edge for our `ProjectRevision`. May be used by Relay 1.
  """
  projectRevisionEdge(
    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge
}

"""
All input for the create `ProjectRevision` mutation.
"""
input CreateProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ProjectRevision` to be created by this mutation.
  """
  projectRevision: ProjectRevisionInput!
}

"""
An input for mutations affecting `ProjectRevision`
"""
input ProjectRevisionInput {
  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int

  """
  Foreign key to the status of the project revision
  """
  changeStatus: String

  """
  Explanation of why the revision was made
  """
  changeReason: String

  """
  Boolean value to indicate if the revision is the first revision for the project
  """
  isFirstRevision: Boolean

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  The type of the project revision (e.g. General Revision)
  """
  revisionType: String

  """
  Comments on the project revision
  """
  comments: String

  """
  The status of the revision of a project
  """
  revisionStatus: String

  """
  Pending actions from (e.g. Director)
  """
  pendingActionsFrom: String
}

"""
The output of our create `ProjectRevisionAmendmentType` mutation.
"""
type CreateProjectRevisionAmendmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectRevisionAmendmentType` that was created by this mutation.
  """
  projectRevisionAmendmentType: ProjectRevisionAmendmentType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `ProjectRevisionAmendmentType`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `AmendmentType` that is related to this `ProjectRevisionAmendmentType`.
  """
  amendmentTypeByAmendmentType: AmendmentType

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectRevisionAmendmentType`. May be used by Relay 1.
  """
  projectRevisionAmendmentTypeEdge(
    """
    The method to use when ordering `ProjectRevisionAmendmentType`.
    """
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesEdge
}

"""
All input for the create `ProjectRevisionAmendmentType` mutation.
"""
input CreateProjectRevisionAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ProjectRevisionAmendmentType` to be created by this mutation.
  """
  projectRevisionAmendmentType: ProjectRevisionAmendmentTypeInput!
}

"""
An input for mutations affecting `ProjectRevisionAmendmentType`
"""
input ProjectRevisionAmendmentTypeInput {
  """
  Foreign key to the project revision
  """
  projectRevisionId: Int!

  """
  Foreign key to the amendment type
  """
  amendmentType: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `ProjectStatus` mutation.
"""
type CreateProjectStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectStatus` that was created by this mutation.
  """
  projectStatus: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectStatus`. May be used by Relay 1.
  """
  projectStatusEdge(
    """
    The method to use when ordering `ProjectStatus`.
    """
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesEdge
}

"""
All input for the create `ProjectStatus` mutation.
"""
input CreateProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ProjectStatus` to be created by this mutation.
  """
  projectStatus: ProjectStatusInput!
}

"""
An input for mutations affecting `ProjectStatus`
"""
input ProjectStatusInput {
  """
  Name of the project_status
  """
  name: String!

  """
  Description of the project_status
  """
  description: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `ProjectType` mutation.
"""
type CreateProjectTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectType` that was created by this mutation.
  """
  projectType: ProjectType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectType`. May be used by Relay 1.
  """
  projectTypeEdge(
    """
    The method to use when ordering `ProjectType`.
    """
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesEdge
}

"""
All input for the create `ProjectType` mutation.
"""
input CreateProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ProjectType` to be created by this mutation.
  """
  projectType: ProjectTypeInput!
}

"""
An input for mutations affecting `ProjectType`
"""
input ProjectTypeInput {
  """
  The name of the project_type
  """
  name: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `ReportType` mutation.
"""
type CreateReportTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ReportType` that was created by this mutation.
  """
  reportType: ReportType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ReportType`. May be used by Relay 1.
  """
  reportTypeEdge(
    """
    The method to use when ordering `ReportType`.
    """
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesEdge
}

"""
All input for the create `ReportType` mutation.
"""
input CreateReportTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ReportType` to be created by this mutation.
  """
  reportType: ReportTypeInput!
}

"""
An input for mutations affecting `ReportType`
"""
input ReportTypeInput {
  """
  The name of the report type as the primary key
  """
  name: String!

  """
  Boolean value indicates if this report type record is a Milestone. There are several different milestones and this value allows for easier filtering.
  """
  isMilestone: Boolean

  """
  Boolean value indicates if this report type has payments associated with it.
  """
  hasExpenses: Boolean

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `ReportingRequirement` mutation.
"""
type CreateReportingRequirementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ReportingRequirement` that was created by this mutation.
  """
  reportingRequirement: ReportingRequirement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ReportingRequirement`.
  """
  projectByProjectId: Project

  """
  Reads a single `ReportType` that is related to this `ReportingRequirement`.
  """
  reportTypeByReportType: ReportType

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ReportingRequirement`. May be used by Relay 1.
  """
  reportingRequirementEdge(
    """
    The method to use when ordering `ReportingRequirement`.
    """
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsEdge
}

"""
All input for the create `ReportingRequirement` mutation.
"""
input CreateReportingRequirementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `ReportingRequirement` to be created by this mutation.
  """
  reportingRequirement: ReportingRequirementInput!
}

"""
An input for mutations affecting `ReportingRequirement`
"""
input ReportingRequirementInput {
  """
  Foreign key references the cif.project table
  """
  projectId: Int!

  """
  Foreign key references the cif.report_type table
  """
  reportType: String!

  """
  The date the reporting requirement is due
  """
  reportDueDate: Datetime

  """
  The date the reporting requirement was submitted
  """
  submittedDate: Datetime

  """
  Comments about the reporting requirement
  """
  comments: String

  """
  An index that identifies the order of the reporting requirement
  """
  reportingRequirementIndex: Int!

  """
  A user defined description of a reporting requirement
  """
  description: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `RevisionStatus` mutation.
"""
type CreateRevisionStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `RevisionStatus` that was created by this mutation.
  """
  revisionStatus: RevisionStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `RevisionStatus`. May be used by Relay 1.
  """
  revisionStatusEdge(
    """
    The method to use when ordering `RevisionStatus`.
    """
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesEdge
}

"""
All input for the create `RevisionStatus` mutation.
"""
input CreateRevisionStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `RevisionStatus` to be created by this mutation.
  """
  revisionStatus: RevisionStatusInput!
}

"""
An input for mutations affecting `RevisionStatus`
"""
input RevisionStatusInput {
  """
  The name of the amendment status as the primary key
  """
  name: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Boolean value to indicate if the revision status can only be used for amendments
  """
  isAmendmentSpecific: Boolean!
}

"""
The output of our create `RevisionType` mutation.
"""
type CreateRevisionTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `RevisionType` that was created by this mutation.
  """
  revisionType: RevisionType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `RevisionType`. May be used by Relay 1.
  """
  revisionTypeEdge(
    """
    The method to use when ordering `RevisionType`.
    """
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesEdge
}

"""
All input for the create `RevisionType` mutation.
"""
input CreateRevisionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `RevisionType` to be created by this mutation.
  """
  revisionType: RevisionTypeInput!
}

"""
An input for mutations affecting `RevisionType`
"""
input RevisionTypeInput {
  """
  The type of the revision type as the primary key
  """
  type: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our create `Sector` mutation.
"""
type CreateSectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Sector` that was created by this mutation.
  """
  sector: Sector

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Sector`. May be used by Relay 1.
  """
  sectorEdge(
    """
    The method to use when ordering `Sector`.
    """
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsEdge
}

"""
All input for the create `Sector` mutation.
"""
input CreateSectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The `Sector` to be created by this mutation.
  """
  sector: SectorInput!
}

"""
An input for mutations affecting `Sector`
"""
input SectorInput {
  """
  The name of the sector as the primary key
  """
  sectorName: String!

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
The output of our update `AdditionalFundingSource` mutation.
"""
type UpdateAdditionalFundingSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `AdditionalFundingSource` that was updated by this mutation.
  """
  additionalFundingSource: AdditionalFundingSource

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `AdditionalFundingSource`.
  """
  projectByProjectId: Project

  """
  Reads a single `AdditionalFundingSourceStatus` that is related to this `AdditionalFundingSource`.
  """
  additionalFundingSourceStatusByStatus: AdditionalFundingSourceStatus

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `AdditionalFundingSource`. May be used by Relay 1.
  """
  additionalFundingSourceEdge(
    """
    The method to use when ordering `AdditionalFundingSource`.
    """
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesEdge
}

"""
All input for the `updateAdditionalFundingSource` mutation.
"""
input UpdateAdditionalFundingSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalFundingSource` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AdditionalFundingSource` being updated.
  """
  additionalFundingSourcePatch: AdditionalFundingSourcePatch!
}

"""
Represents an update to a `AdditionalFundingSource`. Fields that are set will be updated.
"""
input AdditionalFundingSourcePatch {
  """
  Foreign key to the project
  """
  projectId: Int

  """
  The status of the additional funding source request(e.g. awaiting approval, approved, denied)
  """
  status: String

  """
  The source of the additional funding source
  """
  source: String

  """
  The amount of the additional funding source
  """
  amount: BigFloat

  """
  The zero-based index of the source in the project
  """
  sourceIndex: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateAdditionalFundingSourceById` mutation.
"""
input UpdateAdditionalFundingSourceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AdditionalFundingSource` being updated.
  """
  additionalFundingSourcePatch: AdditionalFundingSourcePatch!

  """
  Unique ID for the additional funding source
  """
  id: Int!
}

"""
The output of our update `AdditionalFundingSourceStatus` mutation.
"""
type UpdateAdditionalFundingSourceStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `AdditionalFundingSourceStatus` that was updated by this mutation.
  """
  additionalFundingSourceStatus: AdditionalFundingSourceStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `AdditionalFundingSourceStatus`. May be used by Relay 1.
  """
  additionalFundingSourceStatusEdge(
    """
    The method to use when ordering `AdditionalFundingSourceStatus`.
    """
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesEdge
}

"""
All input for the `updateAdditionalFundingSourceStatus` mutation.
"""
input UpdateAdditionalFundingSourceStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalFundingSourceStatus` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AdditionalFundingSourceStatus` being updated.
  """
  additionalFundingSourceStatusPatch: AdditionalFundingSourceStatusPatch!
}

"""
Represents an update to a `AdditionalFundingSourceStatus`. Fields that are set will be updated.
"""
input AdditionalFundingSourceStatusPatch {
  """
  The name of the status as the primary key
  """
  statusName: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateAdditionalFundingSourceStatusByStatusName` mutation.
"""
input UpdateAdditionalFundingSourceStatusByStatusNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AdditionalFundingSourceStatus` being updated.
  """
  additionalFundingSourceStatusPatch: AdditionalFundingSourceStatusPatch!

  """
  The name of the status as the primary key
  """
  statusName: String!
}

"""
The output of our update `AmendmentType` mutation.
"""
type UpdateAmendmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `AmendmentType` that was updated by this mutation.
  """
  amendmentType: AmendmentType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `AmendmentType`. May be used by Relay 1.
  """
  amendmentTypeEdge(
    """
    The method to use when ordering `AmendmentType`.
    """
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesEdge
}

"""
All input for the `updateAmendmentType` mutation.
"""
input UpdateAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AmendmentType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AmendmentType` being updated.
  """
  amendmentTypePatch: AmendmentTypePatch!
}

"""
Represents an update to a `AmendmentType`. Fields that are set will be updated.
"""
input AmendmentTypePatch {
  """
  The name of the amendment type as the primary key
  """
  name: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateAmendmentTypeByName` mutation.
"""
input UpdateAmendmentTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AmendmentType` being updated.
  """
  amendmentTypePatch: AmendmentTypePatch!

  """
  The name of the amendment type as the primary key
  """
  name: String!
}

"""
The output of our update `Attachment` mutation.
"""
type UpdateAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Attachment` that was updated by this mutation.
  """
  attachment: Attachment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `Attachment`.
  """
  projectByProjectId: Project

  """
  Reads a single `ProjectStatus` that is related to this `Attachment`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Attachment`. May be used by Relay 1.
  """
  attachmentEdge(
    """
    The method to use when ordering `Attachment`.
    """
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""
All input for the `updateAttachment` mutation.
"""
input UpdateAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!
}

"""
Represents an update to a `Attachment`. Fields that are set will be updated.
"""
input AttachmentPatch {
  """
  Universally Unique ID for the attachment, created by the fastapi storage micro-service
  """
  file: UUID

  """
  Description of the attachment
  """
  description: String

  """
  Original uploaded file name
  """
  fileName: String

  """
  Original uploaded file type
  """
  fileType: String

  """
  Original uploaded file size
  """
  fileSize: String

  """
  The id of the project (cif.project.id) that the attachment was uploaded to
  """
  projectId: Int

  """
  The id of the project_status (cif.project_status.id) that the attachment references
  """
  projectStatusId: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateAttachmentById` mutation.
"""
input UpdateAttachmentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Attachment` being updated.
  """
  attachmentPatch: AttachmentPatch!

  """
  Unique ID for the attachment
  """
  id: Int!
}

"""
The output of our update `ChangeStatus` mutation.
"""
type UpdateChangeStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ChangeStatus` that was updated by this mutation.
  """
  changeStatus: ChangeStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ChangeStatus`. May be used by Relay 1.
  """
  changeStatusEdge(
    """
    The method to use when ordering `ChangeStatus`.
    """
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge
}

"""
All input for the `updateChangeStatus` mutation.
"""
input UpdateChangeStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!
}

"""
Represents an update to a `ChangeStatus`. Fields that are set will be updated.
"""
input ChangeStatusPatch {
  """
  The name of the status, e.g. "pending", "committed", ...
  """
  status: String

  """
  Whether that status should trigger a commit of the record described by the change
  """
  triggersCommit: Boolean

  """
  Whether that status is active
  """
  active: Boolean

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateChangeStatusByStatus` mutation.
"""
input UpdateChangeStatusByStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChangeStatus` being updated.
  """
  changeStatusPatch: ChangeStatusPatch!

  """
  The name of the status, e.g. "pending", "committed", ...
  """
  status: String!
}

"""
The output of our update `CifUser` mutation.
"""
type UpdateCifUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CifUser` that was updated by this mutation.
  """
  cifUser: CifUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `CifUser`. May be used by Relay 1.
  """
  cifUserEdge(
    """
    The method to use when ordering `CifUser`.
    """
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge
}

"""
All input for the `updateCifUser` mutation.
"""
input UpdateCifUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!
}

"""
Represents an update to a `CifUser`. Fields that are set will be updated.
"""
input CifUserPatch {
  """
  Universally Unique ID for the user, defined by the single sign-on provider
  """
  sessionSub: String

  """
  User's first name
  """
  givenName: String

  """
  User's last name
  """
  familyName: String

  """
  User's email address
  """
  emailAddress: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Boolean value determines whether a legacy user can be updated. Legacy users may be updated only once.
  """
  allowSubUpdate: Boolean
}

"""
All input for the `updateCifUserById` mutation.
"""
input UpdateCifUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CifUser` being updated.
  """
  cifUserPatch: CifUserPatch!

  """
  Unique ID for the user
  """
  id: Int!
}

"""
The output of our update `Contact` mutation.
"""
type UpdateContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Contact` that was updated by this mutation.
  """
  contact: Contact

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Contact`. May be used by Relay 1.
  """
  contactEdge(
    """
    The method to use when ordering `Contact`.
    """
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsEdge
}

"""
All input for the `updateContact` mutation.
"""
input UpdateContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Contact` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Contact` being updated.
  """
  contactPatch: ContactPatch!
}

"""
Represents an update to a `Contact`. Fields that are set will be updated.
"""
input ContactPatch {
  """
  The given name of this contact
  """
  givenName: String

  """
  The family name of this contact
  """
  familyName: String

  """
  The email address, and a unique identifier, of this contact
  """
  email: String

  """
  The phone number of this contact, stored in E.164 format
  """
  phone: String

  """
  The phone extension of this contact
  """
  phoneExt: String

  """
  The company this contact works for
  """
  companyName: String

  """
  The role of this contact within their company
  """
  contactPosition: String

  """
  Any comments about this contact
  """
  comments: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateContactById` mutation.
"""
input UpdateContactByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Contact` being updated.
  """
  contactPatch: ContactPatch!

  """
  Unique ID for the contact
  """
  id: Int!
}

"""
All input for the `updateContactByEmail` mutation.
"""
input UpdateContactByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Contact` being updated.
  """
  contactPatch: ContactPatch!

  """
  The email address, and a unique identifier, of this contact
  """
  email: String!
}

"""
The output of our update `EmissionIntensityPaymentPercent` mutation.
"""
type UpdateEmissionIntensityPaymentPercentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EmissionIntensityPaymentPercent` that was updated by this mutation.
  """
  emissionIntensityPaymentPercent: EmissionIntensityPaymentPercent

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `EmissionIntensityPaymentPercent`. May be used by Relay 1.
  """
  emissionIntensityPaymentPercentEdge(
    """
    The method to use when ordering `EmissionIntensityPaymentPercent`.
    """
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsEdge
}

"""
All input for the `updateEmissionIntensityPaymentPercent` mutation.
"""
input UpdateEmissionIntensityPaymentPercentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionIntensityPaymentPercent` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EmissionIntensityPaymentPercent` being updated.
  """
  emissionIntensityPaymentPercentPatch: EmissionIntensityPaymentPercentPatch!
}

"""
Represents an update to a `EmissionIntensityPaymentPercent`. Fields that are set will be updated.
"""
input EmissionIntensityPaymentPercentPatch {
  """
  The calculated emission intensity performance.
  This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  """
  maxEmissionIntensityPerformance: BigFloat

  """
  The payment percentage linked to the value of max_emission_intensity_performance
  """
  paymentPercentage: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateEmissionIntensityPaymentPercentById` mutation.
"""
input UpdateEmissionIntensityPaymentPercentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionIntensityPaymentPercent` being updated.
  """
  emissionIntensityPaymentPercentPatch: EmissionIntensityPaymentPercentPatch!

  """
  Unique ID for the emission_intensity_payment_percent
  """
  id: Int!
}

"""
All input for the `updateEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformance` mutation.
"""
input UpdateEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionIntensityPaymentPercent` being updated.
  """
  emissionIntensityPaymentPercentPatch: EmissionIntensityPaymentPercentPatch!

  """
  The calculated emission intensity performance.
  This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  """
  maxEmissionIntensityPerformance: BigFloat!
}

"""
The output of our update `EmissionIntensityReport` mutation.
"""
type UpdateEmissionIntensityReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EmissionIntensityReport` that was updated by this mutation.
  """
  emissionIntensityReport: EmissionIntensityReport

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `EmissionIntensityReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `EmissionIntensityReport`. May be used by Relay 1.
  """
  emissionIntensityReportEdge(
    """
    The method to use when ordering `EmissionIntensityReport`.
    """
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsEdge
}

"""
All input for the `updateEmissionIntensityReport` mutation.
"""
input UpdateEmissionIntensityReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionIntensityReport` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EmissionIntensityReport` being updated.
  """
  emissionIntensityReportPatch: EmissionIntensityReportPatch!
}

"""
Represents an update to a `EmissionIntensityReport`. Fields that are set will be updated.
"""
input EmissionIntensityReportPatch {
  """
  Foreign key to for the reporting_requirement table
  """
  reportingRequirementId: Int

  """
  The date when the measurement period starts for a project
  """
  measurementPeriodStartDate: Datetime

  """
  The date when the measurement period ends for a project
  """
  measurementPeriodEndDate: Datetime

  """
  The units in which the emissions are measured
  """
  emissionFunctionalUnit: String

  """
  The units in which the production item that generates emissions are measured
  """
  productionFunctionalUnit: String

  """
  The baseline emission intensity used as a benchmark for calculating emission intensity performance
  """
  baselineEmissionIntensity: BigFloat

  """
  The emission intensity defined as a target after a project has completed, used in calculating emission intensity performance
  """
  targetEmissionIntensity: BigFloat

  """
  The actual emission intensity achieved after a project has completed, used in calculating emission intensity performance
  """
  postProjectEmissionIntensity: BigFloat

  """
  The total amount of emission reduction expected from the outcome of this project
  """
  totalLifetimeEmissionReduction: BigFloat

  """
  User defined value corresponding to the calculated emission intensity performance. The calculated value gets manually rounded
  """
  adjustedEmissionsIntensityPerformance: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  An override field to manually adjust the calculated TEIMP holdback payment amount
  """
  adjustedHoldbackPaymentAmount: BigFloat

  """
  The date the payment was issued
  """
  dateSentToCsnr: Datetime
}

"""
All input for the `updateEmissionIntensityReportById` mutation.
"""
input UpdateEmissionIntensityReportByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EmissionIntensityReport` being updated.
  """
  emissionIntensityReportPatch: EmissionIntensityReportPatch!

  """
  Unique ID for the emission_intensity_report
  """
  id: Int!
}

"""
The output of our update `Form` mutation.
"""
type UpdateFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Form` that was updated by this mutation.
  """
  form: Form

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Form`. May be used by Relay 1.
  """
  formEdge(
    """
    The method to use when ordering `Form`.
    """
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""
All input for the `updateForm` mutation.
"""
input UpdateFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!
}

"""
Represents an update to a `Form`. Fields that are set will be updated.
"""
input FormPatch {
  """
  Unique short name identifier for the json_schema data.
  """
  slug: String

  """
  The json_schema describing the shape of the form_change data for the corresponding form.
  """
  jsonSchema: JSON

  """
  Metadata describing the json_schema.
  """
  description: String

  """
  A function that can be used to dynamically alter the schema, such as altering constraints based on the contents of a table.
  """
  jsonSchemaGenerator: RegProcedure

  """
  A function that parses the form_change data into a table or set of tables.
  """
  formChangeCommitHandler: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateFormById` mutation.
"""
input UpdateFormByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!

  """
  Unique ID for the form data.
  """
  id: Int!
}

"""
All input for the `updateFormBySlug` mutation.
"""
input UpdateFormBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Form` being updated.
  """
  formPatch: FormPatch!

  """
  Unique short name identifier for the json_schema data.
  """
  slug: String!
}

"""
The output of our update `FormChange` mutation.
"""
type UpdateFormChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FormChange` that was updated by this mutation.
  """
  formChange: FormChange

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `FormChange`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `ChangeStatus` that is related to this `FormChange`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `Form` that is related to this `FormChange`.
  """
  formByJsonSchemaName: Form

  """
  Reads a single `FormChange` that is related to this `FormChange`.
  """
  formChangeByPreviousFormChangeId: FormChange

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByUpdatedBy: CifUser

  """
  An edge for our `FormChange`. May be used by Relay 1.
  """
  formChangeEdge(
    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge
}

"""
All input for the `updateFormChange` mutation.
"""
input UpdateFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormChange` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FormChange` being updated.
  """
  formChangePatch: FormChangePatch!
}

"""
Represents an update to a `FormChange`. Fields that are set will be updated.
"""
input FormChangePatch {
  """
  Unique ID for the form_change
  """
  newFormData: JSON

  """
  The operation this form change describes: create, update or archive
  """
  operation: FormChangeOperation

  """
  The schema on which this form change applies
  """
  formDataSchemaName: String

  """
  The table on which this form change applies
  """
  formDataTableName: String

  """
  The id of the record on which this form change applies
  """
  formDataRecordId: Int

  """
  The project revision this change might be associated with (if known)
  """
  projectRevisionId: Int

  """
  The change status of this form change, foreign key to cif.change_status.
  """
  changeStatus: String

  """
  The name of the JSON schema to use for validation of this form data
  """
  jsonSchemaName: String

  """
  The validation errors computed for this record's new_form_data and the json_schema_name schema
  """
  validationErrors: JSON

  """
  The id of the form_change record that preceded this one
  """
  previousFormChangeId: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime
}

"""
All input for the `updateFormChangeById` mutation.
"""
input UpdateFormChangeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FormChange` being updated.
  """
  formChangePatch: FormChangePatch!

  """
  Unique ID for the form_change
  """
  id: Int!
}

"""
The output of our update `FundingParameter` mutation.
"""
type UpdateFundingParameterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingParameter` that was updated by this mutation.
  """
  fundingParameter: FundingParameter

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `FundingParameter`.
  """
  projectByProjectId: Project

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingParameter`. May be used by Relay 1.
  """
  fundingParameterEdge(
    """
    The method to use when ordering `FundingParameter`.
    """
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersEdge
}

"""
All input for the `updateFundingParameter` mutation.
"""
input UpdateFundingParameterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingParameter` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FundingParameter` being updated.
  """
  fundingParameterPatch: FundingParameterPatch!
}

"""
Represents an update to a `FundingParameter`. Fields that are set will be updated.
"""
input FundingParameterPatch {
  """
  The related project for this data
  """
  projectId: Int

  """
  Maximum funding amount for this project
  """
  maxFundingAmount: BigFloat

  """
  The percent of the total funding for a project that the Province is providing
  """
  provinceSharePercentage: BigFloat

  """
  The designated holdback percentage for each payment. CIF holds back this designated holdback percentage from each payment, and the cumulated holdback amount is the total possible value of the final (performance) milestone payment. The proponent is paid a portion of this possible total based on their project emission intensity performance relative to the target emission intensity
  """
  holdbackPercentage: BigFloat

  """
  Total anticipated funding amount inserted by CIF users
  """
  anticipatedFundingAmount: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  The funding provided by the proponent
  """
  proponentCost: BigFloat

  """
  contract start date to support the auto-generation of quarterly and annual reports
  """
  contractStartDate: Datetime

  """
  project assets life end date to support the auto-generation of quarterly and annual reports
  """
  projectAssetsLifeEndDate: Datetime
}

"""
All input for the `updateFundingParameterById` mutation.
"""
input UpdateFundingParameterByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingParameter` being updated.
  """
  fundingParameterPatch: FundingParameterPatch!

  """
  Unique ID for the funding agreement data
  """
  id: Int!
}

"""
The output of our update `FundingStream` mutation.
"""
type UpdateFundingStreamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingStream` that was updated by this mutation.
  """
  fundingStream: FundingStream

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingStream`. May be used by Relay 1.
  """
  fundingStreamEdge(
    """
    The method to use when ordering `FundingStream`.
    """
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge
}

"""
All input for the `updateFundingStream` mutation.
"""
input UpdateFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStream` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FundingStream` being updated.
  """
  fundingStreamPatch: FundingStreamPatch!
}

"""
Represents an update to a `FundingStream`. Fields that are set will be updated.
"""
input FundingStreamPatch {
  """
  Shortname of the funding stream program
  """
  name: String

  """
  Description of the funding_stream
  """
  description: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateFundingStreamById` mutation.
"""
input UpdateFundingStreamByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStream` being updated.
  """
  fundingStreamPatch: FundingStreamPatch!

  """
  Unique ID for the funding_stream
  """
  id: Int!
}

"""
The output of our update `FundingStreamProjectStatus` mutation.
"""
type UpdateFundingStreamProjectStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingStreamProjectStatus` that was updated by this mutation.
  """
  fundingStreamProjectStatus: FundingStreamProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FundingStream` that is related to this `FundingStreamProjectStatus`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingStreamProjectStatus`. May be used by Relay 1.
  """
  fundingStreamProjectStatusEdge(
    """
    The method to use when ordering `FundingStreamProjectStatus`.
    """
    orderBy: [FundingStreamProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamProjectStatusesEdge
}

"""
All input for the `updateFundingStreamProjectStatus` mutation.
"""
input UpdateFundingStreamProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStreamProjectStatus` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FundingStreamProjectStatus` being updated.
  """
  fundingStreamProjectStatusPatch: FundingStreamProjectStatusPatch!
}

"""
Represents an update to a `FundingStreamProjectStatus`. Fields that are set will be updated.
"""
input FundingStreamProjectStatusPatch {
  """
  Foreign key referencing the funding_stream table
  """
  fundingStreamId: Int

  """
  Foreign key refrencing the project_status table
  """
  projectStatusId: Int

  """
  Defines a way to order the project statuses
  """
  sortingOrder: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateFundingStreamProjectStatusById` mutation.
"""
input UpdateFundingStreamProjectStatusByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamProjectStatus` being updated.
  """
  fundingStreamProjectStatusPatch: FundingStreamProjectStatusPatch!

  """
  Unique ID for funding_stream_project_status table
  """
  id: Int!
}

"""
The output of our update `FundingStreamRfp` mutation.
"""
type UpdateFundingStreamRfpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingStreamRfp` that was updated by this mutation.
  """
  fundingStreamRfp: FundingStreamRfp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingStreamRfp`. May be used by Relay 1.
  """
  fundingStreamRfpEdge(
    """
    The method to use when ordering `FundingStreamRfp`.
    """
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsEdge
}

"""
All input for the `updateFundingStreamRfp` mutation.
"""
input UpdateFundingStreamRfpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStreamRfp` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FundingStreamRfp` being updated.
  """
  fundingStreamRfpPatch: FundingStreamRfpPatch!
}

"""
Represents an update to a `FundingStreamRfp`. Fields that are set will be updated.
"""
input FundingStreamRfpPatch {
  """
  The year this funding stream rfp is associated with
  """
  year: Int

  """
  The id of the funding_stream (cif.funding_stream.id) this rfp year is associated with
  """
  fundingStreamId: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateFundingStreamRfpById` mutation.
"""
input UpdateFundingStreamRfpByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `FundingStreamRfp` being updated.
  """
  fundingStreamRfpPatch: FundingStreamRfpPatch!

  """
  Unique ID for the funding_stream_rfp
  """
  id: Int!
}

"""
The output of our update `MilestoneReport` mutation.
"""
type UpdateMilestoneReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `MilestoneReport` that was updated by this mutation.
  """
  milestoneReport: MilestoneReport

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `MilestoneReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `MilestoneReport`. May be used by Relay 1.
  """
  milestoneReportEdge(
    """
    The method to use when ordering `MilestoneReport`.
    """
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsEdge
}

"""
All input for the `updateMilestoneReport` mutation.
"""
input UpdateMilestoneReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MilestoneReport` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MilestoneReport` being updated.
  """
  milestoneReportPatch: MilestoneReportPatch!
}

"""
Represents an update to a `MilestoneReport`. Fields that are set will be updated.
"""
input MilestoneReportPatch {
  """
  Foreign key to the reporting_requirement_table
  """
  reportingRequirementId: Int

  """
  The date where the work should be finished by. It can be automatically calculated based upon the type of milestone or manually overridden.
  Automatic calculations are as follows:
    - 30 days before report due date for general milestones
  """
  substantialCompletionDate: Datetime

  """
  The name of the person who certified the completion of the milestone
  """
  certifiedBy: String

  """
  The professional designation of the person who certified the completion of the milestone
  """
  certifierProfessionalDesignation: String

  """
  The maximum amount in dollars that can be applied to this milestone
  """
  maximumAmount: BigFloat

  """
  The total amount of expenses in dollars applied to this milestone
  """
  totalEligibleExpenses: BigFloat

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateMilestoneReportById` mutation.
"""
input UpdateMilestoneReportByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MilestoneReport` being updated.
  """
  milestoneReportPatch: MilestoneReportPatch!

  """
  Unique ID for the milestone_report
  """
  id: Int!
}

"""
The output of our update `Operator` mutation.
"""
type UpdateOperatorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Operator` that was updated by this mutation.
  """
  operator: Operator

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Operator`. May be used by Relay 1.
  """
  operatorEdge(
    """
    The method to use when ordering `Operator`.
    """
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsEdge
}

"""
All input for the `updateOperator` mutation.
"""
input UpdateOperatorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Operator` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Operator` being updated.
  """
  operatorPatch: OperatorPatch!
}

"""
Represents an update to a `Operator`. Fields that are set will be updated.
"""
input OperatorPatch {
  """
  The organisation ID from the ggircs database as assigned by the federal Single Window Reporting System
  """
  swrsOrganisationId: Int

  """
  The legal name of this operator
  """
  legalName: String

  """
  The trade name of this operator
  """
  tradeName: String

  """
  The legal name of this operator as last imported from SWRS
  """
  swrsLegalName: String

  """
  The trade name of this operator as last imported from SWRS
  """
  swrsTradeName: String

  """
  The bc registry id assigned to this operator
  """
  bcRegistryId: String

  """
  The operator code is a set of characters that uniquely identifies the operator and is used in the cif.project table as part of the propsal_reference
  """
  operatorCode: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateOperatorById` mutation.
"""
input UpdateOperatorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Operator` being updated.
  """
  operatorPatch: OperatorPatch!

  """
  Unique ID for the operator
  """
  id: Int!
}

"""
All input for the `updateOperatorBySwrsOrganisationId` mutation.
"""
input UpdateOperatorBySwrsOrganisationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Operator` being updated.
  """
  operatorPatch: OperatorPatch!

  """
  The organisation ID from the ggircs database as assigned by the federal Single Window Reporting System
  """
  swrsOrganisationId: Int!
}

"""
The output of our update `Payment` mutation.
"""
type UpdatePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Payment` that was updated by this mutation.
  """
  payment: Payment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `Payment`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Payment`. May be used by Relay 1.
  """
  paymentEdge(
    """
    The method to use when ordering `Payment`.
    """
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsEdge
}

"""
All input for the `updatePayment` mutation.
"""
input UpdatePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Payment` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Payment` being updated.
  """
  paymentPatch: PaymentPatch!
}

"""
Represents an update to a `Payment`. Fields that are set will be updated.
"""
input PaymentPatch {
  """
  Foreign key references the cif.reporting_requirement table
  """
  reportingRequirementId: Int

  """
  The adjusted value of the gross amount of the payment which is the amount before deducting any holdback amount
  """
  grossAmount: BigFloat

  """
  The adjusted value of the net amount of the payment which is the amount actually paid out, after deducting any holdback amount
  """
  netAmount: BigFloat

  """
  The date the payment was issued
  """
  dateSentToCsnr: Datetime

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updatePaymentById` mutation.
"""
input UpdatePaymentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Payment` being updated.
  """
  paymentPatch: PaymentPatch!

  """
  Unique ID for the payment
  """
  id: Int!
}

"""
The output of our update `Project` mutation.
"""
type UpdateProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Project` that was updated by this mutation.
  """
  project: Project

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Operator` that is related to this `Project`.
  """
  operatorByOperatorId: Operator

  """
  Reads a single `FundingStreamRfp` that is related to this `Project`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """
  Reads a single `ProjectStatus` that is related to this `Project`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `Sector` that is related to this `Project`.
  """
  sectorBySectorName: Sector

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `ProjectType` that is related to this `Project`.
  """
  projectTypeByProjectType: ProjectType

  """
  An edge for our `Project`. May be used by Relay 1.
  """
  projectEdge(
    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge
}

"""
All input for the `updateProject` mutation.
"""
input UpdateProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Project` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  projectPatch: ProjectPatch!
}

"""
Represents an update to a `Project`. Fields that are set will be updated.
"""
input ProjectPatch {
  """
  Foreign key references the cif.operator table
  """
  operatorId: Int

  """
  The id of the funding_stream_rfp (cif.funding_stream_rfp.id) that was selected when creating the project
  """
  fundingStreamRfpId: Int

  """
  The id of the project_status (cif.project_status.id) that the project is currently in
  """
  projectStatusId: Int

  """
  Unique identifier internal to the CIF team. As of the 2022 RFPs, the current format is YYYY-RFP-0-ABCD-000. Projects for the 2019 and 2020 RFPs may use a different format.
  """
  proposalReference: String

  """
  Summary of the project
  """
  summary: String

  """
  The name of the project
  """
  projectName: String

  """
  The total amount of funding requested for the project
  """
  totalFundingRequest: BigFloat

  """
  The industry sector this project relates to
  """
  sectorName: String

  """
  Any additional information about this project in reference to the industry sector such as a sub-sector
  """
  additionalSectorInformation: String

  """
  General comments pertaining to the project
  """
  comments: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  The score of the project after evaluation by the CIF team
  """
  score: BigFloat

  """
  The type of the project (e.g. fuel switching)
  """
  projectType: String

  """
  The contract number of the project
  """
  contractNumber: String
}

"""
All input for the `updateProjectById` mutation.
"""
input UpdateProjectByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  projectPatch: ProjectPatch!

  """
  Unique ID for the project
  """
  id: Int!
}

"""
All input for the `updateProjectByProposalReference` mutation.
"""
input UpdateProjectByProposalReferenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Project` being updated.
  """
  projectPatch: ProjectPatch!

  """
  Unique identifier internal to the CIF team. As of the 2022 RFPs, the current format is YYYY-RFP-0-ABCD-000. Projects for the 2019 and 2020 RFPs may use a different format.
  """
  proposalReference: String!
}

"""
The output of our update `ProjectContact` mutation.
"""
type UpdateProjectContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectContact` that was updated by this mutation.
  """
  projectContact: ProjectContact

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectContact`.
  """
  projectByProjectId: Project

  """
  Reads a single `Contact` that is related to this `ProjectContact`.
  """
  contactByContactId: Contact

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectContact`. May be used by Relay 1.
  """
  projectContactEdge(
    """
    The method to use when ordering `ProjectContact`.
    """
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsEdge
}

"""
All input for the `updateProjectContact` mutation.
"""
input UpdateProjectContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectContact` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectContact` being updated.
  """
  projectContactPatch: ProjectContactPatch!
}

"""
Represents an update to a `ProjectContact`. Fields that are set will be updated.
"""
input ProjectContactPatch {
  """
  Foreign key to the project
  """
  projectId: Int

  """
  Foreign key to the contact
  """
  contactId: Int

  """
  The zero-based index of the contact in the project
  """
  contactIndex: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateProjectContactById` mutation.
"""
input UpdateProjectContactByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectContact` being updated.
  """
  projectContactPatch: ProjectContactPatch!

  """
  Unique ID for the project contact record
  """
  id: Int!
}

"""
The output of our update `ProjectManager` mutation.
"""
type UpdateProjectManagerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectManager` that was updated by this mutation.
  """
  projectManager: ProjectManager

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectManager`.
  """
  projectByProjectId: Project

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByCifUserId: CifUser

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectManager`. May be used by Relay 1.
  """
  projectManagerEdge(
    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge
}

"""
All input for the `updateProjectManager` mutation.
"""
input UpdateProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManager` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectManager` being updated.
  """
  projectManagerPatch: ProjectManagerPatch!
}

"""
Represents an update to a `ProjectManager`. Fields that are set will be updated.
"""
input ProjectManagerPatch {
  """
  Foreign key to the project
  """
  projectId: Int

  """
  Foreign key to the cif user
  """
  cifUserId: Int

  """
  Foreign key to the project_manager_label table. Defines the list of labels that cif_users can be assigned to as a manager of a project
  """
  projectManagerLabelId: Int

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateProjectManagerById` mutation.
"""
input UpdateProjectManagerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectManager` being updated.
  """
  projectManagerPatch: ProjectManagerPatch!

  """
  Unique ID for the project manager record
  """
  id: Int!
}

"""
The output of our update `ProjectManagerLabel` mutation.
"""
type UpdateProjectManagerLabelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectManagerLabel` that was updated by this mutation.
  """
  projectManagerLabel: ProjectManagerLabel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectManagerLabel`. May be used by Relay 1.
  """
  projectManagerLabelEdge(
    """
    The method to use when ordering `ProjectManagerLabel`.
    """
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsEdge
}

"""
All input for the `updateProjectManagerLabel` mutation.
"""
input UpdateProjectManagerLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManagerLabel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectManagerLabel` being updated.
  """
  projectManagerLabelPatch: ProjectManagerLabelPatch!
}

"""
Represents an update to a `ProjectManagerLabel`. Fields that are set will be updated.
"""
input ProjectManagerLabelPatch {
  """
  The label that project managers can be assigned to a project as
  """
  label: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateProjectManagerLabelById` mutation.
"""
input UpdateProjectManagerLabelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectManagerLabel` being updated.
  """
  projectManagerLabelPatch: ProjectManagerLabelPatch!

  """
  Unique ID for the project_manager_label record
  """
  id: Int!
}

"""
All input for the `updateProjectManagerLabelByLabel` mutation.
"""
input UpdateProjectManagerLabelByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectManagerLabel` being updated.
  """
  projectManagerLabelPatch: ProjectManagerLabelPatch!

  """
  The label that project managers can be assigned to a project as
  """
  label: String!
}

"""
The output of our update `ProjectRevision` mutation.
"""
type UpdateProjectRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectRevision` that was updated by this mutation.
  """
  projectRevision: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectRevision`.
  """
  projectByProjectId: Project

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  An edge for our `ProjectRevision`. May be used by Relay 1.
  """
  projectRevisionEdge(
    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge
}

"""
All input for the `updateProjectRevision` mutation.
"""
input UpdateProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevision` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectRevision` being updated.
  """
  projectRevisionPatch: ProjectRevisionPatch!
}

"""
Represents an update to a `ProjectRevision`. Fields that are set will be updated.
"""
input ProjectRevisionPatch {
  """
  Foreign key to the associated project row. Will be null if the project hasn't been committed yet.
  """
  projectId: Int

  """
  Foreign key to the status of the project revision
  """
  changeStatus: String

  """
  Explanation of why the revision was made
  """
  changeReason: String

  """
  Boolean value to indicate if the revision is the first revision for the project
  """
  isFirstRevision: Boolean

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  The type of the project revision (e.g. General Revision)
  """
  revisionType: String

  """
  Comments on the project revision
  """
  comments: String

  """
  The status of the revision of a project
  """
  revisionStatus: String

  """
  Pending actions from (e.g. Director)
  """
  pendingActionsFrom: String
}

"""
All input for the `updateProjectRevisionById` mutation.
"""
input UpdateProjectRevisionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectRevision` being updated.
  """
  projectRevisionPatch: ProjectRevisionPatch!

  """
  Unique ID for the project revision
  """
  id: Int!
}

"""
The output of our update `ProjectRevisionAmendmentType` mutation.
"""
type UpdateProjectRevisionAmendmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectRevisionAmendmentType` that was updated by this mutation.
  """
  projectRevisionAmendmentType: ProjectRevisionAmendmentType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `ProjectRevisionAmendmentType`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `AmendmentType` that is related to this `ProjectRevisionAmendmentType`.
  """
  amendmentTypeByAmendmentType: AmendmentType

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectRevisionAmendmentType`. May be used by Relay 1.
  """
  projectRevisionAmendmentTypeEdge(
    """
    The method to use when ordering `ProjectRevisionAmendmentType`.
    """
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesEdge
}

"""
All input for the `updateProjectRevisionAmendmentType` mutation.
"""
input UpdateProjectRevisionAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevisionAmendmentType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectRevisionAmendmentType` being updated.
  """
  projectRevisionAmendmentTypePatch: ProjectRevisionAmendmentTypePatch!
}

"""
Represents an update to a `ProjectRevisionAmendmentType`. Fields that are set will be updated.
"""
input ProjectRevisionAmendmentTypePatch {
  """
  Foreign key to the project revision
  """
  projectRevisionId: Int

  """
  Foreign key to the amendment type
  """
  amendmentType: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateProjectRevisionAmendmentTypeById` mutation.
"""
input UpdateProjectRevisionAmendmentTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectRevisionAmendmentType` being updated.
  """
  projectRevisionAmendmentTypePatch: ProjectRevisionAmendmentTypePatch!

  """
  Unique ID for the project revision amendment type.
  """
  id: Int!
}

"""
The output of our update `ProjectStatus` mutation.
"""
type UpdateProjectStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectStatus` that was updated by this mutation.
  """
  projectStatus: ProjectStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectStatus`. May be used by Relay 1.
  """
  projectStatusEdge(
    """
    The method to use when ordering `ProjectStatus`.
    """
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesEdge
}

"""
All input for the `updateProjectStatus` mutation.
"""
input UpdateProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectStatus` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectStatus` being updated.
  """
  projectStatusPatch: ProjectStatusPatch!
}

"""
Represents an update to a `ProjectStatus`. Fields that are set will be updated.
"""
input ProjectStatusPatch {
  """
  Name of the project_status
  """
  name: String

  """
  Description of the project_status
  """
  description: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateProjectStatusById` mutation.
"""
input UpdateProjectStatusByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectStatus` being updated.
  """
  projectStatusPatch: ProjectStatusPatch!

  """
  Unique ID for the project_status
  """
  id: Int!
}

"""
The output of our update `ProjectType` mutation.
"""
type UpdateProjectTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectType` that was updated by this mutation.
  """
  projectType: ProjectType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectType`. May be used by Relay 1.
  """
  projectTypeEdge(
    """
    The method to use when ordering `ProjectType`.
    """
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesEdge
}

"""
All input for the `updateProjectType` mutation.
"""
input UpdateProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProjectType` being updated.
  """
  projectTypePatch: ProjectTypePatch!
}

"""
Represents an update to a `ProjectType`. Fields that are set will be updated.
"""
input ProjectTypePatch {
  """
  The name of the project_type
  """
  name: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateProjectTypeById` mutation.
"""
input UpdateProjectTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectType` being updated.
  """
  projectTypePatch: ProjectTypePatch!

  """
  Unique ID for the project_type
  """
  id: Int!
}

"""
All input for the `updateProjectTypeByName` mutation.
"""
input UpdateProjectTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProjectType` being updated.
  """
  projectTypePatch: ProjectTypePatch!

  """
  The name of the project_type
  """
  name: String!
}

"""
The output of our update `ReportType` mutation.
"""
type UpdateReportTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ReportType` that was updated by this mutation.
  """
  reportType: ReportType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ReportType`. May be used by Relay 1.
  """
  reportTypeEdge(
    """
    The method to use when ordering `ReportType`.
    """
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesEdge
}

"""
All input for the `updateReportType` mutation.
"""
input UpdateReportTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReportType` being updated.
  """
  reportTypePatch: ReportTypePatch!
}

"""
Represents an update to a `ReportType`. Fields that are set will be updated.
"""
input ReportTypePatch {
  """
  The name of the report type as the primary key
  """
  name: String

  """
  Boolean value indicates if this report type record is a Milestone. There are several different milestones and this value allows for easier filtering.
  """
  isMilestone: Boolean

  """
  Boolean value indicates if this report type has payments associated with it.
  """
  hasExpenses: Boolean

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateReportTypeByName` mutation.
"""
input UpdateReportTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReportType` being updated.
  """
  reportTypePatch: ReportTypePatch!

  """
  The name of the report type as the primary key
  """
  name: String!
}

"""
The output of our update `ReportingRequirement` mutation.
"""
type UpdateReportingRequirementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ReportingRequirement` that was updated by this mutation.
  """
  reportingRequirement: ReportingRequirement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ReportingRequirement`.
  """
  projectByProjectId: Project

  """
  Reads a single `ReportType` that is related to this `ReportingRequirement`.
  """
  reportTypeByReportType: ReportType

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ReportingRequirement`. May be used by Relay 1.
  """
  reportingRequirementEdge(
    """
    The method to use when ordering `ReportingRequirement`.
    """
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsEdge
}

"""
All input for the `updateReportingRequirement` mutation.
"""
input UpdateReportingRequirementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportingRequirement` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ReportingRequirement` being updated.
  """
  reportingRequirementPatch: ReportingRequirementPatch!
}

"""
Represents an update to a `ReportingRequirement`. Fields that are set will be updated.
"""
input ReportingRequirementPatch {
  """
  Foreign key references the cif.project table
  """
  projectId: Int

  """
  Foreign key references the cif.report_type table
  """
  reportType: String

  """
  The date the reporting requirement is due
  """
  reportDueDate: Datetime

  """
  The date the reporting requirement was submitted
  """
  submittedDate: Datetime

  """
  Comments about the reporting requirement
  """
  comments: String

  """
  An index that identifies the order of the reporting requirement
  """
  reportingRequirementIndex: Int

  """
  A user defined description of a reporting requirement
  """
  description: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateReportingRequirementById` mutation.
"""
input UpdateReportingRequirementByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ReportingRequirement` being updated.
  """
  reportingRequirementPatch: ReportingRequirementPatch!

  """
  Unique ID for the reporting requirement
  """
  id: Int!
}

"""
The output of our update `RevisionStatus` mutation.
"""
type UpdateRevisionStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `RevisionStatus` that was updated by this mutation.
  """
  revisionStatus: RevisionStatus

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `RevisionStatus`. May be used by Relay 1.
  """
  revisionStatusEdge(
    """
    The method to use when ordering `RevisionStatus`.
    """
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesEdge
}

"""
All input for the `updateRevisionStatus` mutation.
"""
input UpdateRevisionStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RevisionStatus` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RevisionStatus` being updated.
  """
  revisionStatusPatch: RevisionStatusPatch!
}

"""
Represents an update to a `RevisionStatus`. Fields that are set will be updated.
"""
input RevisionStatusPatch {
  """
  The name of the amendment status as the primary key
  """
  name: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime

  """
  Boolean value to indicate if the revision status can only be used for amendments
  """
  isAmendmentSpecific: Boolean
}

"""
All input for the `updateRevisionStatusByName` mutation.
"""
input UpdateRevisionStatusByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RevisionStatus` being updated.
  """
  revisionStatusPatch: RevisionStatusPatch!

  """
  The name of the amendment status as the primary key
  """
  name: String!
}

"""
The output of our update `RevisionType` mutation.
"""
type UpdateRevisionTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `RevisionType` that was updated by this mutation.
  """
  revisionType: RevisionType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `RevisionType`. May be used by Relay 1.
  """
  revisionTypeEdge(
    """
    The method to use when ordering `RevisionType`.
    """
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesEdge
}

"""
All input for the `updateRevisionType` mutation.
"""
input UpdateRevisionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RevisionType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `RevisionType` being updated.
  """
  revisionTypePatch: RevisionTypePatch!
}

"""
Represents an update to a `RevisionType`. Fields that are set will be updated.
"""
input RevisionTypePatch {
  """
  The type of the revision type as the primary key
  """
  type: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateRevisionTypeByType` mutation.
"""
input UpdateRevisionTypeByTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `RevisionType` being updated.
  """
  revisionTypePatch: RevisionTypePatch!

  """
  The type of the revision type as the primary key
  """
  type: String!
}

"""
The output of our update `Sector` mutation.
"""
type UpdateSectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Sector` that was updated by this mutation.
  """
  sector: Sector

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Sector`. May be used by Relay 1.
  """
  sectorEdge(
    """
    The method to use when ordering `Sector`.
    """
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsEdge
}

"""
All input for the `updateSector` mutation.
"""
input UpdateSectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sector` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Sector` being updated.
  """
  sectorPatch: SectorPatch!
}

"""
Represents an update to a `Sector`. Fields that are set will be updated.
"""
input SectorPatch {
  """
  The name of the sector as the primary key
  """
  sectorName: String

  """
  created by user id
  """
  createdBy: Int

  """
  created at timestamp
  """
  createdAt: Datetime

  """
  updated by user id
  """
  updatedBy: Int

  """
  updated at timestamp
  """
  updatedAt: Datetime

  """
  archived by user id
  """
  archivedBy: Int

  """
  archived at timestamp
  """
  archivedAt: Datetime
}

"""
All input for the `updateSectorBySectorName` mutation.
"""
input UpdateSectorBySectorNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Sector` being updated.
  """
  sectorPatch: SectorPatch!

  """
  The name of the sector as the primary key
  """
  sectorName: String!
}

"""
The output of our delete `AdditionalFundingSource` mutation.
"""
type DeleteAdditionalFundingSourcePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `AdditionalFundingSource` that was deleted by this mutation.
  """
  additionalFundingSource: AdditionalFundingSource
  deletedAdditionalFundingSourceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `AdditionalFundingSource`.
  """
  projectByProjectId: Project

  """
  Reads a single `AdditionalFundingSourceStatus` that is related to this `AdditionalFundingSource`.
  """
  additionalFundingSourceStatusByStatus: AdditionalFundingSourceStatus

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSource`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `AdditionalFundingSource`. May be used by Relay 1.
  """
  additionalFundingSourceEdge(
    """
    The method to use when ordering `AdditionalFundingSource`.
    """
    orderBy: [AdditionalFundingSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourcesEdge
}

"""
All input for the `deleteAdditionalFundingSource` mutation.
"""
input DeleteAdditionalFundingSourceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalFundingSource` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAdditionalFundingSourceById` mutation.
"""
input DeleteAdditionalFundingSourceByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the additional funding source
  """
  id: Int!
}

"""
The output of our delete `AdditionalFundingSourceStatus` mutation.
"""
type DeleteAdditionalFundingSourceStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `AdditionalFundingSourceStatus` that was deleted by this mutation.
  """
  additionalFundingSourceStatus: AdditionalFundingSourceStatus
  deletedAdditionalFundingSourceStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AdditionalFundingSourceStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `AdditionalFundingSourceStatus`. May be used by Relay 1.
  """
  additionalFundingSourceStatusEdge(
    """
    The method to use when ordering `AdditionalFundingSourceStatus`.
    """
    orderBy: [AdditionalFundingSourceStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AdditionalFundingSourceStatusesEdge
}

"""
All input for the `deleteAdditionalFundingSourceStatus` mutation.
"""
input DeleteAdditionalFundingSourceStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AdditionalFundingSourceStatus` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAdditionalFundingSourceStatusByStatusName` mutation.
"""
input DeleteAdditionalFundingSourceStatusByStatusNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The name of the status as the primary key
  """
  statusName: String!
}

"""
The output of our delete `AmendmentType` mutation.
"""
type DeleteAmendmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `AmendmentType` that was deleted by this mutation.
  """
  amendmentType: AmendmentType
  deletedAmendmentTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `AmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `AmendmentType`. May be used by Relay 1.
  """
  amendmentTypeEdge(
    """
    The method to use when ordering `AmendmentType`.
    """
    orderBy: [AmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): AmendmentTypesEdge
}

"""
All input for the `deleteAmendmentType` mutation.
"""
input DeleteAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AmendmentType` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAmendmentTypeByName` mutation.
"""
input DeleteAmendmentTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The name of the amendment type as the primary key
  """
  name: String!
}

"""
The output of our delete `Attachment` mutation.
"""
type DeleteAttachmentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Attachment` that was deleted by this mutation.
  """
  attachment: Attachment
  deletedAttachmentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `Attachment`.
  """
  projectByProjectId: Project

  """
  Reads a single `ProjectStatus` that is related to this `Attachment`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Attachment`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Attachment`. May be used by Relay 1.
  """
  attachmentEdge(
    """
    The method to use when ordering `Attachment`.
    """
    orderBy: [AttachmentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): AttachmentsEdge
}

"""
All input for the `deleteAttachment` mutation.
"""
input DeleteAttachmentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Attachment` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteAttachmentById` mutation.
"""
input DeleteAttachmentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the attachment
  """
  id: Int!
}

"""
The output of our delete `ChangeStatus` mutation.
"""
type DeleteChangeStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ChangeStatus` that was deleted by this mutation.
  """
  changeStatus: ChangeStatus
  deletedChangeStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ChangeStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ChangeStatus`. May be used by Relay 1.
  """
  changeStatusEdge(
    """
    The method to use when ordering `ChangeStatus`.
    """
    orderBy: [ChangeStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChangeStatusesEdge
}

"""
All input for the `deleteChangeStatus` mutation.
"""
input DeleteChangeStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChangeStatus` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteChangeStatusByStatus` mutation.
"""
input DeleteChangeStatusByStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The name of the status, e.g. "pending", "committed", ...
  """
  status: String!
}

"""
The output of our delete `CifUser` mutation.
"""
type DeleteCifUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `CifUser` that was deleted by this mutation.
  """
  cifUser: CifUser
  deletedCifUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `CifUser`. May be used by Relay 1.
  """
  cifUserEdge(
    """
    The method to use when ordering `CifUser`.
    """
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge
}

"""
All input for the `deleteCifUser` mutation.
"""
input DeleteCifUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CifUser` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCifUserById` mutation.
"""
input DeleteCifUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the user
  """
  id: Int!
}

"""
The output of our delete `Contact` mutation.
"""
type DeleteContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Contact` that was deleted by this mutation.
  """
  contact: Contact
  deletedContactId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Contact`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Contact`. May be used by Relay 1.
  """
  contactEdge(
    """
    The method to use when ordering `Contact`.
    """
    orderBy: [ContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContactsEdge
}

"""
All input for the `deleteContact` mutation.
"""
input DeleteContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Contact` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteContactById` mutation.
"""
input DeleteContactByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the contact
  """
  id: Int!
}

"""
All input for the `deleteContactByEmail` mutation.
"""
input DeleteContactByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The email address, and a unique identifier, of this contact
  """
  email: String!
}

"""
The output of our delete `EmissionIntensityPaymentPercent` mutation.
"""
type DeleteEmissionIntensityPaymentPercentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EmissionIntensityPaymentPercent` that was deleted by this mutation.
  """
  emissionIntensityPaymentPercent: EmissionIntensityPaymentPercent
  deletedEmissionIntensityPaymentPercentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityPaymentPercent`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `EmissionIntensityPaymentPercent`. May be used by Relay 1.
  """
  emissionIntensityPaymentPercentEdge(
    """
    The method to use when ordering `EmissionIntensityPaymentPercent`.
    """
    orderBy: [EmissionIntensityPaymentPercentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityPaymentPercentsEdge
}

"""
All input for the `deleteEmissionIntensityPaymentPercent` mutation.
"""
input DeleteEmissionIntensityPaymentPercentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionIntensityPaymentPercent` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEmissionIntensityPaymentPercentById` mutation.
"""
input DeleteEmissionIntensityPaymentPercentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the emission_intensity_payment_percent
  """
  id: Int!
}

"""
All input for the `deleteEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformance` mutation.
"""
input DeleteEmissionIntensityPaymentPercentByMaxEmissionIntensityPerformanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The calculated emission intensity performance.
  This is stored as a maxiumum as any value 30 and below maps to 0% and any value 100 and above (stored as Infinity) maps to 100%
  """
  maxEmissionIntensityPerformance: BigFloat!
}

"""
The output of our delete `EmissionIntensityReport` mutation.
"""
type DeleteEmissionIntensityReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `EmissionIntensityReport` that was deleted by this mutation.
  """
  emissionIntensityReport: EmissionIntensityReport
  deletedEmissionIntensityReportId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `EmissionIntensityReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `EmissionIntensityReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `EmissionIntensityReport`. May be used by Relay 1.
  """
  emissionIntensityReportEdge(
    """
    The method to use when ordering `EmissionIntensityReport`.
    """
    orderBy: [EmissionIntensityReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EmissionIntensityReportsEdge
}

"""
All input for the `deleteEmissionIntensityReport` mutation.
"""
input DeleteEmissionIntensityReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EmissionIntensityReport` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteEmissionIntensityReportById` mutation.
"""
input DeleteEmissionIntensityReportByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the emission_intensity_report
  """
  id: Int!
}

"""
The output of our delete `Form` mutation.
"""
type DeleteFormPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Form` that was deleted by this mutation.
  """
  form: Form
  deletedFormId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Form`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Form`. May be used by Relay 1.
  """
  formEdge(
    """
    The method to use when ordering `Form`.
    """
    orderBy: [FormsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormsEdge
}

"""
All input for the `deleteForm` mutation.
"""
input DeleteFormInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Form` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteFormById` mutation.
"""
input DeleteFormByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the form data.
  """
  id: Int!
}

"""
All input for the `deleteFormBySlug` mutation.
"""
input DeleteFormBySlugInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique short name identifier for the json_schema data.
  """
  slug: String!
}

"""
The output of our delete `FormChange` mutation.
"""
type DeleteFormChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FormChange` that was deleted by this mutation.
  """
  formChange: FormChange
  deletedFormChangeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `FormChange`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `ChangeStatus` that is related to this `FormChange`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `Form` that is related to this `FormChange`.
  """
  formByJsonSchemaName: Form

  """
  Reads a single `FormChange` that is related to this `FormChange`.
  """
  formChangeByPreviousFormChangeId: FormChange

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByUpdatedBy: CifUser

  """
  An edge for our `FormChange`. May be used by Relay 1.
  """
  formChangeEdge(
    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge
}

"""
All input for the `deleteFormChange` mutation.
"""
input DeleteFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FormChange` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteFormChangeById` mutation.
"""
input DeleteFormChangeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the form_change
  """
  id: Int!
}

"""
The output of our delete `FundingParameter` mutation.
"""
type DeleteFundingParameterPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingParameter` that was deleted by this mutation.
  """
  fundingParameter: FundingParameter
  deletedFundingParameterId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `FundingParameter`.
  """
  projectByProjectId: Project

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingParameter`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingParameter`. May be used by Relay 1.
  """
  fundingParameterEdge(
    """
    The method to use when ordering `FundingParameter`.
    """
    orderBy: [FundingParametersOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingParametersEdge
}

"""
All input for the `deleteFundingParameter` mutation.
"""
input DeleteFundingParameterInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingParameter` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteFundingParameterById` mutation.
"""
input DeleteFundingParameterByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the funding agreement data
  """
  id: Int!
}

"""
The output of our delete `FundingStream` mutation.
"""
type DeleteFundingStreamPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingStream` that was deleted by this mutation.
  """
  fundingStream: FundingStream
  deletedFundingStreamId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStream`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingStream`. May be used by Relay 1.
  """
  fundingStreamEdge(
    """
    The method to use when ordering `FundingStream`.
    """
    orderBy: [FundingStreamsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamsEdge
}

"""
All input for the `deleteFundingStream` mutation.
"""
input DeleteFundingStreamInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStream` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteFundingStreamById` mutation.
"""
input DeleteFundingStreamByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the funding_stream
  """
  id: Int!
}

"""
The output of our delete `FundingStreamProjectStatus` mutation.
"""
type DeleteFundingStreamProjectStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingStreamProjectStatus` that was deleted by this mutation.
  """
  fundingStreamProjectStatus: FundingStreamProjectStatus
  deletedFundingStreamProjectStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FundingStream` that is related to this `FundingStreamProjectStatus`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  Reads a single `ProjectStatus` that is related to this `FundingStreamProjectStatus`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingStreamProjectStatus`. May be used by Relay 1.
  """
  fundingStreamProjectStatusEdge(
    """
    The method to use when ordering `FundingStreamProjectStatus`.
    """
    orderBy: [FundingStreamProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamProjectStatusesEdge
}

"""
All input for the `deleteFundingStreamProjectStatus` mutation.
"""
input DeleteFundingStreamProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStreamProjectStatus` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteFundingStreamProjectStatusById` mutation.
"""
input DeleteFundingStreamProjectStatusByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for funding_stream_project_status table
  """
  id: Int!
}

"""
The output of our delete `FundingStreamRfp` mutation.
"""
type DeleteFundingStreamRfpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `FundingStreamRfp` that was deleted by this mutation.
  """
  fundingStreamRfp: FundingStreamRfp
  deletedFundingStreamRfpId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `FundingStream` that is related to this `FundingStreamRfp`.
  """
  fundingStreamByFundingStreamId: FundingStream

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FundingStreamRfp`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `FundingStreamRfp`. May be used by Relay 1.
  """
  fundingStreamRfpEdge(
    """
    The method to use when ordering `FundingStreamRfp`.
    """
    orderBy: [FundingStreamRfpsOrderBy!] = [PRIMARY_KEY_ASC]
  ): FundingStreamRfpsEdge
}

"""
All input for the `deleteFundingStreamRfp` mutation.
"""
input DeleteFundingStreamRfpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FundingStreamRfp` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteFundingStreamRfpById` mutation.
"""
input DeleteFundingStreamRfpByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the funding_stream_rfp
  """
  id: Int!
}

"""
The output of our delete `MilestoneReport` mutation.
"""
type DeleteMilestoneReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `MilestoneReport` that was deleted by this mutation.
  """
  milestoneReport: MilestoneReport
  deletedMilestoneReportId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `MilestoneReport`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `MilestoneReport`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `MilestoneReport`. May be used by Relay 1.
  """
  milestoneReportEdge(
    """
    The method to use when ordering `MilestoneReport`.
    """
    orderBy: [MilestoneReportsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MilestoneReportsEdge
}

"""
All input for the `deleteMilestoneReport` mutation.
"""
input DeleteMilestoneReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MilestoneReport` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteMilestoneReportById` mutation.
"""
input DeleteMilestoneReportByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the milestone_report
  """
  id: Int!
}

"""
The output of our delete `Operator` mutation.
"""
type DeleteOperatorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Operator` that was deleted by this mutation.
  """
  operator: Operator
  deletedOperatorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Operator`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Operator`. May be used by Relay 1.
  """
  operatorEdge(
    """
    The method to use when ordering `Operator`.
    """
    orderBy: [OperatorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OperatorsEdge
}

"""
All input for the `deleteOperator` mutation.
"""
input DeleteOperatorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Operator` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteOperatorById` mutation.
"""
input DeleteOperatorByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the operator
  """
  id: Int!
}

"""
All input for the `deleteOperatorBySwrsOrganisationId` mutation.
"""
input DeleteOperatorBySwrsOrganisationIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The organisation ID from the ggircs database as assigned by the federal Single Window Reporting System
  """
  swrsOrganisationId: Int!
}

"""
The output of our delete `Payment` mutation.
"""
type DeletePaymentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Payment` that was deleted by this mutation.
  """
  payment: Payment
  deletedPaymentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ReportingRequirement` that is related to this `Payment`.
  """
  reportingRequirementByReportingRequirementId: ReportingRequirement

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Payment`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Payment`. May be used by Relay 1.
  """
  paymentEdge(
    """
    The method to use when ordering `Payment`.
    """
    orderBy: [PaymentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PaymentsEdge
}

"""
All input for the `deletePayment` mutation.
"""
input DeletePaymentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Payment` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deletePaymentById` mutation.
"""
input DeletePaymentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the payment
  """
  id: Int!
}

"""
The output of our delete `Project` mutation.
"""
type DeleteProjectPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Project` that was deleted by this mutation.
  """
  project: Project
  deletedProjectId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Operator` that is related to this `Project`.
  """
  operatorByOperatorId: Operator

  """
  Reads a single `FundingStreamRfp` that is related to this `Project`.
  """
  fundingStreamRfpByFundingStreamRfpId: FundingStreamRfp

  """
  Reads a single `ProjectStatus` that is related to this `Project`.
  """
  projectStatusByProjectStatusId: ProjectStatus

  """
  Reads a single `Sector` that is related to this `Project`.
  """
  sectorBySectorName: Sector

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Project`.
  """
  cifUserByArchivedBy: CifUser

  """
  Reads a single `ProjectType` that is related to this `Project`.
  """
  projectTypeByProjectType: ProjectType

  """
  An edge for our `Project`. May be used by Relay 1.
  """
  projectEdge(
    """
    The method to use when ordering `Project`.
    """
    orderBy: [ProjectsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectsEdge
}

"""
All input for the `deleteProject` mutation.
"""
input DeleteProjectInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Project` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectById` mutation.
"""
input DeleteProjectByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the project
  """
  id: Int!
}

"""
All input for the `deleteProjectByProposalReference` mutation.
"""
input DeleteProjectByProposalReferenceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique identifier internal to the CIF team. As of the 2022 RFPs, the current format is YYYY-RFP-0-ABCD-000. Projects for the 2019 and 2020 RFPs may use a different format.
  """
  proposalReference: String!
}

"""
The output of our delete `ProjectContact` mutation.
"""
type DeleteProjectContactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectContact` that was deleted by this mutation.
  """
  projectContact: ProjectContact
  deletedProjectContactId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectContact`.
  """
  projectByProjectId: Project

  """
  Reads a single `Contact` that is related to this `ProjectContact`.
  """
  contactByContactId: Contact

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectContact`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectContact`. May be used by Relay 1.
  """
  projectContactEdge(
    """
    The method to use when ordering `ProjectContact`.
    """
    orderBy: [ProjectContactsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectContactsEdge
}

"""
All input for the `deleteProjectContact` mutation.
"""
input DeleteProjectContactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectContact` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectContactById` mutation.
"""
input DeleteProjectContactByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the project contact record
  """
  id: Int!
}

"""
The output of our delete `ProjectManager` mutation.
"""
type DeleteProjectManagerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectManager` that was deleted by this mutation.
  """
  projectManager: ProjectManager
  deletedProjectManagerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectManager`.
  """
  projectByProjectId: Project

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByCifUserId: CifUser

  """
  Reads a single `ProjectManagerLabel` that is related to this `ProjectManager`.
  """
  projectManagerLabelByProjectManagerLabelId: ProjectManagerLabel

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManager`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectManager`. May be used by Relay 1.
  """
  projectManagerEdge(
    """
    The method to use when ordering `ProjectManager`.
    """
    orderBy: [ProjectManagersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagersEdge
}

"""
All input for the `deleteProjectManager` mutation.
"""
input DeleteProjectManagerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManager` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectManagerById` mutation.
"""
input DeleteProjectManagerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the project manager record
  """
  id: Int!
}

"""
The output of our delete `ProjectManagerLabel` mutation.
"""
type DeleteProjectManagerLabelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectManagerLabel` that was deleted by this mutation.
  """
  projectManagerLabel: ProjectManagerLabel
  deletedProjectManagerLabelId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectManagerLabel`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectManagerLabel`. May be used by Relay 1.
  """
  projectManagerLabelEdge(
    """
    The method to use when ordering `ProjectManagerLabel`.
    """
    orderBy: [ProjectManagerLabelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectManagerLabelsEdge
}

"""
All input for the `deleteProjectManagerLabel` mutation.
"""
input DeleteProjectManagerLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectManagerLabel` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectManagerLabelById` mutation.
"""
input DeleteProjectManagerLabelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the project_manager_label record
  """
  id: Int!
}

"""
All input for the `deleteProjectManagerLabelByLabel` mutation.
"""
input DeleteProjectManagerLabelByLabelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The label that project managers can be assigned to a project as
  """
  label: String!
}

"""
The output of our delete `ProjectRevision` mutation.
"""
type DeleteProjectRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectRevision` that was deleted by this mutation.
  """
  projectRevision: ProjectRevision
  deletedProjectRevisionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectRevision`.
  """
  projectByProjectId: Project

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  An edge for our `ProjectRevision`. May be used by Relay 1.
  """
  projectRevisionEdge(
    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge
}

"""
All input for the `deleteProjectRevision` mutation.
"""
input DeleteProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevision` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectRevisionById` mutation.
"""
input DeleteProjectRevisionByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the project revision
  """
  id: Int!
}

"""
The output of our delete `ProjectRevisionAmendmentType` mutation.
"""
type DeleteProjectRevisionAmendmentTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectRevisionAmendmentType` that was deleted by this mutation.
  """
  projectRevisionAmendmentType: ProjectRevisionAmendmentType
  deletedProjectRevisionAmendmentTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `ProjectRevisionAmendmentType`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `AmendmentType` that is related to this `ProjectRevisionAmendmentType`.
  """
  amendmentTypeByAmendmentType: AmendmentType

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevisionAmendmentType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectRevisionAmendmentType`. May be used by Relay 1.
  """
  projectRevisionAmendmentTypeEdge(
    """
    The method to use when ordering `ProjectRevisionAmendmentType`.
    """
    orderBy: [ProjectRevisionAmendmentTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionAmendmentTypesEdge
}

"""
All input for the `deleteProjectRevisionAmendmentType` mutation.
"""
input DeleteProjectRevisionAmendmentTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectRevisionAmendmentType` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectRevisionAmendmentTypeById` mutation.
"""
input DeleteProjectRevisionAmendmentTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the project revision amendment type.
  """
  id: Int!
}

"""
The output of our delete `ProjectStatus` mutation.
"""
type DeleteProjectStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectStatus` that was deleted by this mutation.
  """
  projectStatus: ProjectStatus
  deletedProjectStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectStatus`. May be used by Relay 1.
  """
  projectStatusEdge(
    """
    The method to use when ordering `ProjectStatus`.
    """
    orderBy: [ProjectStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectStatusesEdge
}

"""
All input for the `deleteProjectStatus` mutation.
"""
input DeleteProjectStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectStatus` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectStatusById` mutation.
"""
input DeleteProjectStatusByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the project_status
  """
  id: Int!
}

"""
The output of our delete `ProjectType` mutation.
"""
type DeleteProjectTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ProjectType` that was deleted by this mutation.
  """
  projectType: ProjectType
  deletedProjectTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ProjectType`. May be used by Relay 1.
  """
  projectTypeEdge(
    """
    The method to use when ordering `ProjectType`.
    """
    orderBy: [ProjectTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectTypesEdge
}

"""
All input for the `deleteProjectType` mutation.
"""
input DeleteProjectTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProjectType` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteProjectTypeById` mutation.
"""
input DeleteProjectTypeByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the project_type
  """
  id: Int!
}

"""
All input for the `deleteProjectTypeByName` mutation.
"""
input DeleteProjectTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The name of the project_type
  """
  name: String!
}

"""
The output of our delete `ReportType` mutation.
"""
type DeleteReportTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ReportType` that was deleted by this mutation.
  """
  reportType: ReportType
  deletedReportTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ReportType`. May be used by Relay 1.
  """
  reportTypeEdge(
    """
    The method to use when ordering `ReportType`.
    """
    orderBy: [ReportTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportTypesEdge
}

"""
All input for the `deleteReportType` mutation.
"""
input DeleteReportTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportType` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteReportTypeByName` mutation.
"""
input DeleteReportTypeByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The name of the report type as the primary key
  """
  name: String!
}

"""
The output of our delete `ReportingRequirement` mutation.
"""
type DeleteReportingRequirementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `ReportingRequirement` that was deleted by this mutation.
  """
  reportingRequirement: ReportingRequirement
  deletedReportingRequirementId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ReportingRequirement`.
  """
  projectByProjectId: Project

  """
  Reads a single `ReportType` that is related to this `ReportingRequirement`.
  """
  reportTypeByReportType: ReportType

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ReportingRequirement`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `ReportingRequirement`. May be used by Relay 1.
  """
  reportingRequirementEdge(
    """
    The method to use when ordering `ReportingRequirement`.
    """
    orderBy: [ReportingRequirementsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReportingRequirementsEdge
}

"""
All input for the `deleteReportingRequirement` mutation.
"""
input DeleteReportingRequirementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ReportingRequirement` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteReportingRequirementById` mutation.
"""
input DeleteReportingRequirementByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  Unique ID for the reporting requirement
  """
  id: Int!
}

"""
The output of our delete `RevisionStatus` mutation.
"""
type DeleteRevisionStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `RevisionStatus` that was deleted by this mutation.
  """
  revisionStatus: RevisionStatus
  deletedRevisionStatusId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionStatus`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `RevisionStatus`. May be used by Relay 1.
  """
  revisionStatusEdge(
    """
    The method to use when ordering `RevisionStatus`.
    """
    orderBy: [RevisionStatusesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionStatusesEdge
}

"""
All input for the `deleteRevisionStatus` mutation.
"""
input DeleteRevisionStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RevisionStatus` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteRevisionStatusByName` mutation.
"""
input DeleteRevisionStatusByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The name of the amendment status as the primary key
  """
  name: String!
}

"""
The output of our delete `RevisionType` mutation.
"""
type DeleteRevisionTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `RevisionType` that was deleted by this mutation.
  """
  revisionType: RevisionType
  deletedRevisionTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `RevisionType`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `RevisionType`. May be used by Relay 1.
  """
  revisionTypeEdge(
    """
    The method to use when ordering `RevisionType`.
    """
    orderBy: [RevisionTypesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionTypesEdge
}

"""
All input for the `deleteRevisionType` mutation.
"""
input DeleteRevisionTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `RevisionType` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteRevisionTypeByType` mutation.
"""
input DeleteRevisionTypeByTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The type of the revision type as the primary key
  """
  type: String!
}

"""
The output of our delete `Sector` mutation.
"""
type DeleteSectorPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  The `Sector` that was deleted by this mutation.
  """
  sector: Sector
  deletedSectorId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `Sector`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `Sector`. May be used by Relay 1.
  """
  sectorEdge(
    """
    The method to use when ordering `Sector`.
    """
    orderBy: [SectorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): SectorsEdge
}

"""
All input for the `deleteSector` mutation.
"""
input DeleteSectorInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sector` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteSectorBySectorName` mutation.
"""
input DeleteSectorBySectorNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The name of the sector as the primary key
  """
  sectorName: String!
}

"""
The output of our `addAdditionalFundingSourceToRevision` mutation.
"""
type AddAdditionalFundingSourceToRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChange: FormChange

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `FormChange`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `ChangeStatus` that is related to this `FormChange`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `Form` that is related to this `FormChange`.
  """
  formByJsonSchemaName: Form

  """
  Reads a single `FormChange` that is related to this `FormChange`.
  """
  formChangeByPreviousFormChangeId: FormChange

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByUpdatedBy: CifUser

  """
  An edge for our `FormChange`. May be used by Relay 1.
  """
  formChangeEdge(
    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge
}

"""
All input for the `addAdditionalFundingSourceToRevision` mutation.
"""
input AddAdditionalFundingSourceToRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int
  sourceIndex: Int
}

"""
The output of our `addContactToRevision` mutation.
"""
type AddContactToRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChange: FormChange

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `FormChange`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `ChangeStatus` that is related to this `FormChange`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `Form` that is related to this `FormChange`.
  """
  formByJsonSchemaName: Form

  """
  Reads a single `FormChange` that is related to this `FormChange`.
  """
  formChangeByPreviousFormChangeId: FormChange

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByUpdatedBy: CifUser

  """
  An edge for our `FormChange`. May be used by Relay 1.
  """
  formChangeEdge(
    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge
}

"""
All input for the `addContactToRevision` mutation.
"""
input AddContactToRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int
  contactIndex: Int
  contactId: Int
}

"""
The output of our `addEmissionIntensityReportToRevision` mutation.
"""
type AddEmissionIntensityReportToRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `addEmissionIntensityReportToRevision` mutation.
"""
input AddEmissionIntensityReportToRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int
}

"""
The output of our `commitFormChange` mutation.
"""
type CommitFormChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChange: FormChange

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `FormChange`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `ChangeStatus` that is related to this `FormChange`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `Form` that is related to this `FormChange`.
  """
  formByJsonSchemaName: Form

  """
  Reads a single `FormChange` that is related to this `FormChange`.
  """
  formChangeByPreviousFormChangeId: FormChange

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByUpdatedBy: CifUser

  """
  An edge for our `FormChange`. May be used by Relay 1.
  """
  formChangeEdge(
    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge
}

"""
All input for the `commitFormChange` mutation.
"""
input CommitFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int
  formChangePatch: FormChangePatch
}

"""
The output of our `commitProjectRevision` mutation.
"""
type CommitProjectRevisionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  projectRevision: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectRevision`.
  """
  projectByProjectId: Project

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  An edge for our `ProjectRevision`. May be used by Relay 1.
  """
  projectRevisionEdge(
    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge
}

"""
All input for the `commitProjectRevision` mutation.
"""
input CommitProjectRevisionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionToCommitId: Int
}

"""
The output of our `discardAdditionalFundingSourceFormChange` mutation.
"""
type DiscardAdditionalFundingSourceFormChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  projectRevision: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectRevision`.
  """
  projectByProjectId: Project

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  An edge for our `ProjectRevision`. May be used by Relay 1.
  """
  projectRevisionEdge(
    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge
}

"""
All input for the `discardAdditionalFundingSourceFormChange` mutation.
"""
input DiscardAdditionalFundingSourceFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formChangeId: Int
}

"""
The output of our `discardEmissionIntensityReport` mutation.
"""
type DiscardEmissionIntensityReportPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `discardEmissionIntensityReport` mutation.
"""
input DiscardEmissionIntensityReportInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int
}

"""
The output of our `discardFundingParameterFormChange` mutation.
"""
type DiscardFundingParameterFormChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `discardFundingParameterFormChange` mutation.
"""
input DiscardFundingParameterFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int
}

"""
The output of our `generateAnnualReports` mutation.
"""
type GenerateAnnualReportsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `generateAnnualReports` mutation.
"""
input GenerateAnnualReportsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int
  startDate: Datetime
  endDate: Datetime
}

"""
The output of our `generateQuarterlyReports` mutation.
"""
type GenerateQuarterlyReportsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `generateQuarterlyReports` mutation.
"""
input GenerateQuarterlyReportsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  revisionId: Int
  startDate: Datetime
  endDate: Datetime
}

"""
The output of our `stageDirtyFormChanges` mutation.
"""
type StageDirtyFormChangesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChanges: [FormChange]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
All input for the `stageDirtyFormChanges` mutation.
"""
input StageDirtyFormChangesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  projectRevisionId: Int!
}

"""
The output of our `stageFormChange` mutation.
"""
type StageFormChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChange: FormChange

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `FormChange`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `ChangeStatus` that is related to this `FormChange`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `Form` that is related to this `FormChange`.
  """
  formByJsonSchemaName: Form

  """
  Reads a single `FormChange` that is related to this `FormChange`.
  """
  formChangeByPreviousFormChangeId: FormChange

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByUpdatedBy: CifUser

  """
  An edge for our `FormChange`. May be used by Relay 1.
  """
  formChangeEdge(
    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge
}

"""
All input for the `stageFormChange` mutation.
"""
input StageFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int
  formChangePatch: FormChangePatch
}

"""
The output of our `undoFormChanges` mutation.
"""
type UndoFormChangesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  projectRevision: ProjectRevision

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Project` that is related to this `ProjectRevision`.
  """
  projectByProjectId: Project

  """
  Reads a single `ChangeStatus` that is related to this `ProjectRevision`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `ProjectRevision`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `RevisionType` that is related to this `ProjectRevision`.
  """
  revisionTypeByRevisionType: RevisionType

  """
  Reads a single `RevisionStatus` that is related to this `ProjectRevision`.
  """
  revisionStatusByRevisionStatus: RevisionStatus

  """
  An edge for our `ProjectRevision`. May be used by Relay 1.
  """
  projectRevisionEdge(
    """
    The method to use when ordering `ProjectRevision`.
    """
    orderBy: [ProjectRevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProjectRevisionsEdge
}

"""
All input for the `undoFormChanges` mutation.
"""
input UndoFormChangesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  formChangesIds: [Int]!
}

"""
The output of our `updateMilestoneFormChange` mutation.
"""
type UpdateMilestoneFormChangePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  formChange: FormChange

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ProjectRevision` that is related to this `FormChange`.
  """
  projectRevisionByProjectRevisionId: ProjectRevision

  """
  Reads a single `ChangeStatus` that is related to this `FormChange`.
  """
  changeStatusByChangeStatus: ChangeStatus

  """
  Reads a single `Form` that is related to this `FormChange`.
  """
  formByJsonSchemaName: Form

  """
  Reads a single `FormChange` that is related to this `FormChange`.
  """
  formChangeByPreviousFormChangeId: FormChange

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `FormChange`.
  """
  cifUserByUpdatedBy: CifUser

  """
  An edge for our `FormChange`. May be used by Relay 1.
  """
  formChangeEdge(
    """
    The method to use when ordering `FormChange`.
    """
    orderBy: [FormChangesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FormChangesEdge
}

"""
All input for the `updateMilestoneFormChange` mutation.
"""
input UpdateMilestoneFormChangeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int
  formChangePatch: FormChangePatch
}

"""
The output of our `updateOrCreateUserFromSession` mutation.
"""
type UpdateOrCreateUserFromSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  cifUser: CifUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByCreatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByUpdatedBy: CifUser

  """
  Reads a single `CifUser` that is related to this `CifUser`.
  """
  cifUserByArchivedBy: CifUser

  """
  An edge for our `CifUser`. May be used by Relay 1.
  """
  cifUserEdge(
    """
    The method to use when ordering `CifUser`.
    """
    orderBy: [CifUsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): CifUsersEdge
}

"""
All input for the `updateOrCreateUserFromSession` mutation.
"""
input UpdateOrCreateUserFromSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}
