apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cas-cif.fullname" . }}
  labels:
    component: app
{{ include "cas-cif.labels" . | indent 4 }}

spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    name: {{ template "cas-cif.fullname" . }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      component: app
{{ include "cas-cif.selectorLabels" . | indent 6 }}
  template:
    metadata:
      labels:
        component: app
{{ include "cas-cif.labels" . | indent 8 }}
    spec:
      serviceAccountName: default
      initContainers:
      # The init container waits until the sqitch changes are deployed to the db
      - env: {{ include "cas-cif.cifUserPgEnv" . | nindent 10 }}
          - name: SQITCH_TARGET
            value: "db:pg:"
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
        name: {{ template "cas-cif.fullname" . }}-schema-deploy-data
        image: {{ .Values.image.schema.repository }}:{{ default .Values.defaultImageTag .Values.image.schema.tag }}
        imagePullPolicy: {{ default .Values.defaultImagePullPolicy .Values.image.schema.pullPolicy }}
        resources:
          limits:
            cpu: 50m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        command:
          - /usr/bin/env
          - bash
          - -c
          - |
            set -euo pipefail;
            while [ "$(sqitch status | tail -1)" != "Nothing to deploy (up-to-date)" ]; do
              echo "Waiting 10s for migrations to complete..."
              sleep 10;
            done;
      imagePullSecrets: {{ include "cas-cif.imagePullSecrets" . | nindent 8 }}
      containers:
      - name: {{ template "cas-cif.fullname" . }}
        imagePullPolicy: {{ default .Values.defaultImagePullPolicy .Values.image.app.pullPolicy }}
        image: {{ .Values.image.app.repository }}:{{ default .Values.defaultImageTag .Values.image.app.tag }}
        env: {{ include "cas-cif.appUserPgEnv" . | nindent 10 }}
          - name: SESSION_SECRET
            valueFrom:
              secretKeyRef:
                key: session-secret
                name: {{ template "cas-cif.fullname" . }}
          - name: PORT
            value: {{ .Values.app.port | quote }}
          - name: SITEWIDE_NOTICE
            value: {{ .Values.app.sitewide_notice.content | quote }}
          - name: HOST
            value: https://{{ .Values.hostName }}
          - name: SENTRY_ENVIRONMENT
            value: {{ include "cas-cif.namespaceSuffix" . }}
          - name: SENTRY_RELEASE
            value: {{ .Values.image.app.tag }}
          - name: SHOW_KC_LOGIN
            value: {{ .Values.app.showKCLogin | quote }}
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: "/attachments-credentials/attachments-credentials.json"
          - name: ATTACHMENTS_BUCKET
            valueFrom:
              secretKeyRef:
                name: gcp-{{ .Release.Namespace }}-cif-documents-service-account-key
                key: bucket_name
          - name: GROWTHBOOK_API_KEY
            valueFrom:
              secretKeyRef:
                name: growthbook
                key: api-key
          - name: PROGRAM_DIRECTOR_NAME
            valueFrom:
              secretKeyRef:
                name: cif-director
                key: cif-director-name
          - name: PROGRAM_DIRECTOR_EMAIL
            valueFrom:
              secretKeyRef:
                name: cif-director
                key: cif-director-email
          - name: KC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: keycloak-gold-client-secret
                key: kcClientSecret
        ports:
        - containerPort: {{ .Values.app.port }}
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /ready
            port: {{ .Values.app.probesPort }}
          # we want the readiness threshold to fail fast,
          # to prevent any request from going to a pod that is not ready
          failureThreshold: 1
          successThreshold: 1
          periodSeconds: 5
          timeoutSeconds: 5
          initialDelaySeconds: 5
        livenessProbe:
          # the liveness probe is here to ensure that a pod does not get
          # stuck in a shutdown state. It needs to allow enough time for
          # the registered shutdown handler to run to completion.
          httpGet:
            path: /live
            port: {{ .Values.app.probesPort }}
          initialDelaySeconds: 10
          periodSeconds: 10
          failureThreshold: 3
          successThreshold: 1
          timeoutSeconds: 5
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
          - mountPath: "/attachments-credentials"
            name: gcs-documents-credentials
            readOnly: true
      volumes:
        - name: gcs-documents-credentials
          secret:
            secretName: gcp-{{ .Release.Namespace }}-cif-documents-service-account-key
            items:
            - key: credentials.json
              path: attachments-credentials.json
      restartPolicy: Always
