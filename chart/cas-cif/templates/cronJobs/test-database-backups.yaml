{{- $backupNamespace := printf "%s%s" (include "cas-cif.namespacePrefix" .) "-tools"}}
{{- $backupHost := printf "%s%s%s" "backup-test-postgres-primary." $backupNamespace ".svc.cluster.local"}}
{{- $secret := (lookup "v1" "Secret" $backupNamespace "backup-test-postgres-pguser-postgres" ) }}
{{- $pgPassword := "unfetched password" }}
{{- if $secret }}
{{- $pgPassword = index $secret.data "password" }}
{{- end -}}

apiVersion: batch/v1
kind: CronJob
metadata:
  name: test-database-backups
  labels:
{{ include "cas-cif.labels" . | indent 4 }}
spec:
  suspend: true # This cron job is intended to be triggered manually
  schedule: "* * * * *"
  jobTemplate:
    spec:
      backoffLimit: 0
      activeDeadlineSeconds: 600
      template:
        metadata:
          labels: {{ include "cas-cif.labels" . | nindent 14 }}
        spec:
          activeDeadlineSeconds: 600
          restartPolicy: Never
          serviceAccountName: deployer
          containers:
          - name: test-database-backups
            image: postgres:14.6-alpine
            imagePullPolicy: {{ default .Values.defaultImagePullPolicy .Values.image.backupTest.pullPolicy }}
            env:
              - name: CIF_BACKUP_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: dbname
                    name: cas-cif-postgres-pguser-postgres
              - name: CIF_BACKUP_HOST
                value: {{ $backupHost }}
              - name: CIF_BACKUP_PASS
                value: {{ $pgPassword }}
            resources:
              limits:
                cpu: 800m
                memory: 1Gi
              requests:
                cpu: 200m
                memory: 256Mi
            command:
            - /bin/sh
            - -c
            - |
                set -euo pipefail;
                declare -i VALUE;
                export PGPASSWORD="$(CIF_BACKUP_PASS)";
                VALUE=$(psql -U postgres -h "$(CIF_BACKUP_HOST)" -qtAX -d $(CIF_BACKUP_DATABASE) -c "select count(*) from cif_private.full_backup_log where full_backup_timestamp > now() - interval '12 hours'");
                if [[ $VALUE -lt 1 ]] ; then
                  echo 'no timestamp found'
                  exit 1
                else
                  echo 'timestamp found, backup ok...uninstalling test cluster';
                  helm uninstall -n {{ include "cas-cif.namespacePrefix" . }}-tools backup-test;
                  exit 0;
                fi;
